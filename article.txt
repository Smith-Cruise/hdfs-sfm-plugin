See the “Customize the @ResponseBody Rendering” section and the WebMvcAutoConfiguration source code for more details.

9.4.4. Customize the @ResponseBody Rendering
Spring uses HttpMessageConverters to render @ResponseBody (or responses from @RestController). You can contribute additional converters by adding beans of the appropriate type in a Spring Boot context. If a bean you add is of a type that would have been included by default anyway (such as MappingJackson2HttpMessageConverter for JSON conversions), it replaces the default value. A convenience bean of type HttpMessageConverters is provided and is always available if you use the default MVC configuration. It has some useful methods to access the default and user-enhanced message converters (For example, it can be useful if you want to manually inject them into a custom RestTemplate).

As in normal MVC usage, any WebMvcConfigurer beans that you provide can also contribute converters by overriding the configureMessageConverters method. However, unlike with normal MVC, you can supply only additional converters that you need (because Spring Boot uses the same mechanism to contribute its defaults). Finally, if you opt out of the Spring Boot default MVC configuration by providing your own @EnableWebMvc configuration, you can take control completely and do everything manually by using getMessageConverters from WebMvcConfigurationSupport.

See the WebMvcAutoConfiguration source code for more details.

9.4.5. Handling Multipart File Uploads
Spring Boot embraces the Servlet 3 javax.servlet.http.Part API to support uploading files. By default, Spring Boot configures Spring MVC with a maximum size of 1MB per file and a maximum of 10MB of file data in a single request. You may override these values, the location to which intermediate data is stored (for example, to the /tmp directory), and the threshold past which data is flushed to disk by using the properties exposed in the MultipartProperties class. For example, if you want to specify that files be unlimited, set the spring.servlet.multipart.max-file-size property to -1.

The multipart support is helpful when you want to receive multipart encoded file data as a @RequestParam-annotated parameter of type MultipartFile in a Spring MVC controller handler method.

See the MultipartAutoConfiguration source for more details.

It is recommended to use the container’s built-in support for multipart uploads rather than introducing an additional dependency such as Apache Commons File Upload.
9.4.6. Switch Off the Spring MVC DispatcherServlet
By default, all content is served from the root of your application (/). If you would rather map to a different path, you can configure one as follows:

PropertiesYaml
spring.mvc.servlet.path=/acme
If you have additional servlets you can declare a @Bean of type Servlet or ServletRegistrationBean for each and Spring Boot will register them transparently to the container. Because servlets are registered that way, they can be mapped to a sub-context of the DispatcherServlet without invoking it.

Configuring the DispatcherServlet yourself is unusual but if you really need to do it, a @Bean of type DispatcherServletPath must be provided as well to provide the path of your custom DispatcherServlet.

9.4.7. Switch off the Default MVC Configuration
The easiest way to take complete control over MVC configuration is to provide your own @Configuration with the @EnableWebMvc annotation. Doing so leaves all MVC configuration in your hands.

9.4.8. Customize ViewResolvers
A ViewResolver is a core component of Spring MVC, translating view names in @Controller to actual View implementations. Note that ViewResolvers are mainly used in UI applications, rather than REST-style services (a View is not used to render a @ResponseBody). There are many implementations of ViewResolver to choose from, and Spring on its own is not opinionated about which ones you should use. Spring Boot, on the other hand, installs one or two for you, depending on what it finds on the classpath and in the application context. The DispatcherServlet uses all the resolvers it finds in the application context, trying each one in turn until it gets a result. If you add your own, you have to be aware of the order and in which position your resolver is added.

WebMvcAutoConfiguration adds the following ViewResolvers to your context:

An InternalResourceViewResolver named ‘defaultViewResolver’. This one locates physical resources that can be rendered by using the DefaultServlet (including static resources and JSP pages, if you use those). It applies a prefix and a suffix to the view name and then looks for a physical resource with that path in the servlet context (the defaults are both empty but are accessible for external configuration through spring.mvc.view.prefix and spring.mvc.view.suffix). You can override it by providing a bean of the same type.

A BeanNameViewResolver named ‘beanNameViewResolver’. This is a useful member of the view resolver chain and picks up any beans with the same name as the View being resolved. It should not be necessary to override or replace it.

A ContentNegotiatingViewResolver named ‘viewResolver’ is added only if there are actually beans of type View present. This is a ‘master’ resolver, delegating to all the others and attempting to find a match to the ‘Accept’ HTTP header sent by the client. There is a useful blog about ContentNegotiatingViewResolver that you might like to study to learn more, and you might also look at the source code for detail. You can switch off the auto-configured ContentNegotiatingViewResolver by defining a bean named ‘viewResolver’.

If you use Thymeleaf, you also have a ThymeleafViewResolver named ‘thymeleafViewResolver’. It looks for resources by surrounding the view name with a prefix and suffix. The prefix is spring.thymeleaf.prefix, and the suffix is spring.thymeleaf.suffix. The values of the prefix and suffix default to ‘classpath:/templates/’ and ‘.html’, respectively. You can override ThymeleafViewResolver by providing a bean of the same name.

If you use FreeMarker, you also have a FreeMarkerViewResolver named ‘freeMarkerViewResolver’. It looks for resources in a loader path (which is externalized to spring.freemarker.templateLoaderPath and has a default value of ‘classpath:/templates/’) by surrounding the view name with a prefix and a suffix. The prefix is externalized to spring.freemarker.prefix, and the suffix is externalized to spring.freemarker.suffix. The default values of the prefix and suffix are empty and ‘.ftlh’, respectively. You can override FreeMarkerViewResolver by providing a bean of the same name.

If you use Groovy templates (actually, if groovy-templates is on your classpath), you also have a GroovyMarkupViewResolver named ‘groovyMarkupViewResolver’. It looks for resources in a loader path by surrounding the view name with a prefix and suffix (externalized to spring.groovy.template.prefix and spring.groovy.template.suffix). The prefix and suffix have default values of ‘classpath:/templates/’ and ‘.tpl’, respectively. You can override GroovyMarkupViewResolver by providing a bean of the same name.

If you use Mustache, you also have a MustacheViewResolver named ‘mustacheViewResolver’. It looks for resources by surrounding the view name with a prefix and suffix. The prefix is spring.mustache.prefix, and the suffix is spring.mustache.suffix. The values of the prefix and suffix default to ‘classpath:/templates/’ and ‘.mustache’, respectively. You can override MustacheViewResolver by providing a bean of the same name.

For more detail, see the following sections:

WebMvcAutoConfiguration

ThymeleafAutoConfiguration

FreeMarkerAutoConfiguration

GroovyTemplateAutoConfiguration

9.5. Testing With Spring Security
Spring Security provides support for running tests as a specific user. For example, the test in the snippet below will run with an authenticated user that has the ADMIN role.

@Test
@WithMockUser(roles="ADMIN")
public void requestProtectedUrlWithUser() throws Exception {
    mvc
        .perform(get("/"))
        ...
}
Spring Security provides comprehensive integration with Spring MVC Test and this can also be used when testing controllers using the @WebMvcTest slice and MockMvc.

For additional details on Spring Security’s testing support, refer to Spring Security’s reference documentation).

9.6. Jersey
9.6.1. Secure Jersey endpoints with Spring Security
Spring Security can be used to secure a Jersey-based web application in much the same way as it can be used to secure a Spring MVC-based web application. However, if you want to use Spring Security’s method-level security with Jersey, you must configure Jersey to use setStatus(int) rather sendError(int). This prevents Jersey from committing the response before Spring Security has had an opportunity to report an authentication or authorization failure to the client.

The jersey.config.server.response.setStatusOverSendError property must be set to true on the application’s ResourceConfig bean, as shown in the following example:

@Component
public class JerseyConfig extends ResourceConfig {

    public JerseyConfig() {
        register(Endpoint.class);
        setProperties(Collections.singletonMap("jersey.config.server.response.setStatusOverSendError", true));
    }

}
9.6.2. Use Jersey Alongside Another Web Framework
To use Jersey alongside another web framework, such as Spring MVC, it should be configured so that it will allow the other framework to handle requests that it cannot handle. First, configure Jersey to use a Filter rather than a Servlet by configuring the spring.jersey.type application property with a value of filter. Second, configure your ResourceConfig to forward requests that would have resulted in a 404, as shown in the following example.

@Component
public class JerseyConfig extends ResourceConfig {

    public JerseyConfig() {
        register(Endpoint.class);
        property(ServletProperties.FILTER_FORWARD_ON_404, true);
    }

}
9.7. HTTP Clients
Spring Boot offers a number of starters that work with HTTP clients. This section answers questions related to using them.

9.7.1. Configure RestTemplate to Use a Proxy
As described in RestTemplate Customization, you can use a RestTemplateCustomizer with RestTemplateBuilder to build a customized RestTemplate. This is the recommended approach for creating a RestTemplate configured to use a proxy.

The exact details of the proxy configuration depend on the underlying client request factory that is being used. The following example configures HttpComponentsClientRequestFactory with an HttpClient that uses a proxy for all hosts except 192.168.0.5:

static class ProxyCustomizer implements RestTemplateCustomizer {

    @Override
    public void customize(RestTemplate restTemplate) {
        HttpHost proxy = new HttpHost("proxy.example.com");
        HttpClient httpClient = HttpClientBuilder.create().setRoutePlanner(new DefaultProxyRoutePlanner(proxy) {

            @Override
            public HttpHost determineProxy(HttpHost target, HttpRequest request, HttpContext context)
                    throws HttpException {
                if (target.getHostName().equals("192.168.0.5")) {
                    return null;
                }
                return super.determineProxy(target, request, context);
            }

        }).build();
        restTemplate.setRequestFactory(new HttpComponentsClientHttpRequestFactory(httpClient));
    }

}
9.7.2. Configure the TcpClient used by a Reactor Netty-based WebClient
When Reactor Netty is on the classpath a Reactor Netty-based WebClient is auto-configured. To customize the client’s handling of network connections, provide a ClientHttpConnector bean. The following example configures a 60 second connect timeout and adds a ReadTimeoutHandler:

@Bean
ClientHttpConnector clientHttpConnector(ReactorResourceFactory resourceFactory) {
    HttpClient httpClient = HttpClient.create(resourceFactory.getConnectionProvider())
            .runOn(resourceFactory.getLoopResources()).option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 60000)
            .doOnConnected((connection) -> connection.addHandlerLast(new ReadTimeoutHandler(60)));
    return new ReactorClientHttpConnector(httpClient);
}
Note the use of ReactorResourceFactory for the connection provider and event loop resources. This ensures efficient sharing of resources for the server receiving requests and the client making requests.
9.8. Logging
Spring Boot has no mandatory logging dependency, except for the Commons Logging API, which is typically provided by Spring Framework’s spring-jcl module. To use Logback, you need to include it and spring-jcl on the classpath. The recommended way to do that is through the starters, which all depend on spring-boot-starter-logging. For a web application, you need only spring-boot-starter-web, since it depends transitively on the logging starter. If you use Maven, the following dependency adds logging for you:

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>
Spring Boot has a LoggingSystem abstraction that attempts to configure logging based on the content of the classpath. If Logback is available, it is the first choice.

If the only change you need to make to logging is to set the levels of various loggers, you can do so in application.properties by using the "logging.level" prefix, as shown in the following example:

PropertiesYaml
logging.level.org.springframework.web=debug
logging.level.org.hibernate=error
You can also set the location of a file to which to write the log (in addition to the console) by using logging.file.name.

To configure the more fine-grained settings of a logging system, you need to use the native configuration format supported by the LoggingSystem in question. By default, Spring Boot picks up the native configuration from its default location for the system (such as classpath:logback.xml for Logback), but you can set the location of the config file by using the logging.config property.

9.8.1. Configure Logback for Logging
If you need to apply customizations to logback beyond those that can be achieved with application.properties, you’ll need to add a standard logback configuration file. You can add a logback.xml file to the root of your classpath for logback to find. You can also use logback-spring.xml if you want to use the Spring Boot Logback extensions.

The Logback documentation has a dedicated section that covers configuration in some detail.
Spring Boot provides a number of logback configurations that be included from your own configuration. These includes are designed to allow certain common Spring Boot conventions to be re-applied.

The following files are provided under org/springframework/boot/logging/logback/:

defaults.xml - Provides conversion rules, pattern properties and common logger configurations.

console-appender.xml - Adds a ConsoleAppender using the CONSOLE_LOG_PATTERN.

file-appender.xml - Adds a RollingFileAppender using the FILE_LOG_PATTERN and ROLLING_FILE_NAME_PATTERN with appropriate settings.

In addition, a legacy base.xml file is provided for compatibility with earlier versions of Spring Boot.

A typical custom logback.xml file would look something like this:

<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />
    <root level="INFO">
        <appender-ref ref="CONSOLE" />
    </root>
    <logger name="org.springframework.web" level="DEBUG"/>
</configuration>
Your logback configuration file can also make use of System properties that the LoggingSystem takes care of creating for you:

${PID}: The current process ID.

${LOG_FILE}: Whether logging.file.name was set in Boot’s external configuration.

${LOG_PATH}: Whether logging.file.path (representing a directory for log files to live in) was set in Boot’s external configuration.

${LOG_EXCEPTION_CONVERSION_WORD}: Whether logging.exception-conversion-word was set in Boot’s external configuration.

${ROLLING_FILE_NAME_PATTERN}: Whether logging.pattern.rolling-file-name was set in Boot’s external configuration.

Spring Boot also provides some nice ANSI color terminal output on a console (but not in a log file) by using a custom Logback converter. See the CONSOLE_LOG_PATTERN in the defaults.xml configuration for an example.

If Groovy is on the classpath, you should be able to configure Logback with logback.groovy as well. If present, this setting is given preference.

Spring extensions are not supported with Groovy configuration. Any logback-spring.groovy files will not be detected.
Configure Logback for File-only Output
If you want to disable console logging and write output only to a file, you need a custom logback-spring.xml that imports file-appender.xml but not console-appender.xml, as shown in the following example:

<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}/}spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/file-appender.xml" />
    <root level="INFO">
        <appender-ref ref="FILE" />
    </root>
</configuration>
You also need to add logging.file.name to your application.properties or application.yaml, as shown in the following example:

PropertiesYaml
logging.file.name=myapplication.log
9.8.2. Configure Log4j for Logging
Spring Boot supports Log4j 2 for logging configuration if it is on the classpath. If you use the starters for assembling dependencies, you have to exclude Logback and then include log4j 2 instead. If you do not use the starters, you need to provide (at least) spring-jcl in addition to Log4j 2.

The recommended path is through the starters, even though it requires some jiggling. The following example shows how to set up the starters in Maven:

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter</artifactId>
    <exclusions>
        <exclusion>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-logging</artifactId>
        </exclusion>
    </exclusions>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-log4j2</artifactId>
</dependency>
And the following example shows one way to set up the starters in Gradle:

    dependencies {
        compile 'org.springframework.boot:spring-boot-starter-web'
    }

    configurations.all {
        resolutionStrategy.dependencySubstitution.all { dependency ->
            if (dependency.requested instanceof ModuleComponentSelector && dependency.requested.module == 'spring-boot-starter-logging') {
                dependency.useTarget("org.springframework.boot:spring-boot-starter-log4j2:$dependency.requested.version", 'Use Log4j2 instead of Logback')
            }
        }
    }
}
The Log4j starters gather together the dependencies for common logging requirements (such as having Tomcat use java.util.logging but configuring the output using Log4j 2).
To ensure that debug logging performed using java.util.logging is routed into Log4j 2, configure its JDK logging adapter by setting the java.util.logging.manager system property to org.apache.logging.log4j.jul.LogManager.
Use YAML or JSON to Configure Log4j 2
In addition to its default XML configuration format, Log4j 2 also supports YAML and JSON configuration files. To configure Log4j 2 to use an alternative configuration file format, add the appropriate dependencies to the classpath and name your configuration files to match your chosen file format, as shown in the following example:

Format	Dependencies	File names
YAML

com.fasterxml.jackson.core:jackson-databind + com.fasterxml.jackson.dataformat:jackson-dataformat-yaml

log4j2.yaml + log4j2.yml

JSON

com.fasterxml.jackson.core:jackson-databind

log4j2.json + log4j2.jsn

9.9. Data Access
Spring Boot includes a number of starters for working with data sources. This section answers questions related to doing so.

9.9.1. Configure a Custom DataSource
To configure your own DataSource, define a @Bean of that type in your configuration. Spring Boot reuses your DataSource anywhere one is required, including database initialization. If you need to externalize some settings, you can bind your DataSource to the environment (see “Third-party Configuration”).

The following example shows how to define a data source in a bean:

@Bean
@ConfigurationProperties(prefix="app.datasource")
public DataSource dataSource() {
    return new FancyDataSource();
}
The following example shows how to define a data source by setting properties:

PropertiesYaml
app.datasource.url=jdbc:h2:mem:mydb
app.datasource.username=sa
app.datasource.pool-size=30
Assuming that your FancyDataSource has regular JavaBean properties for the URL, the username, and the pool size, these settings are bound automatically before the DataSource is made available to other components. The regular database initialization also happens (so the relevant sub-set of spring.datasource.* can still be used with your custom configuration).

Spring Boot also provides a utility builder class, called DataSourceBuilder, that can be used to create one of the standard data sources (if it is on the classpath). The builder can detect the one to use based on what’s available on the classpath. It also auto-detects the driver based on the JDBC URL.

The following example shows how to create a data source by using a DataSourceBuilder:

@Bean
@ConfigurationProperties("app.datasource")
public DataSource dataSource() {
    return DataSourceBuilder.create().build();
}
To run an app with that DataSource, all you need is the connection information. Pool-specific settings can also be provided. Check the implementation that is going to be used at runtime for more details.

The following example shows how to define a JDBC data source by setting properties:

PropertiesYaml
app.datasource.url=jdbc:mysql://localhost/test
app.datasource.username=dbuser
app.datasource.password=dbpass
app.datasource.pool-size=30
However, there is a catch. Because the actual type of the connection pool is not exposed, no keys are generated in the metadata for your custom DataSource and no completion is available in your IDE (because the DataSource interface exposes no properties). Also, if you happen to have Hikari on the classpath, this basic setup does not work, because Hikari has no url property (but does have a jdbcUrl property). In that case, you must rewrite your configuration as follows:

PropertiesYaml
app.datasource.jdbc-url=jdbc:mysql://localhost/test
app.datasource.username=dbuser
app.datasource.password=dbpass
app.datasource.pool-size=30
You can fix that by forcing the connection pool to use and return a dedicated implementation rather than DataSource. You cannot change the implementation at runtime, but the list of options will be explicit.

The following example shows how create a HikariDataSource with DataSourceBuilder:

@Bean
@ConfigurationProperties("app.datasource")
public HikariDataSource dataSource() {
    return DataSourceBuilder.create().type(HikariDataSource.class).build();
}
You can even go further by leveraging what DataSourceProperties does for you — that is, by providing a default embedded database with a sensible username and password if no URL is provided. You can easily initialize a DataSourceBuilder from the state of any DataSourceProperties object, so you could also inject the DataSource that Spring Boot creates automatically. However, that would split your configuration into two namespaces: url, username, password, type, and driver on spring.datasource and the rest on your custom namespace (app.datasource). To avoid that, you can redefine a custom DataSourceProperties on your custom namespace, as shown in the following example:

@Bean
@Primary
@ConfigurationProperties("app.datasource")
public DataSourceProperties dataSourceProperties() {
    return new DataSourceProperties();
}

@Bean
@ConfigurationProperties("app.datasource.configuration")
public HikariDataSource dataSource(DataSourceProperties properties) {
    return properties.initializeDataSourceBuilder().type(HikariDataSource.class).build();
}
This setup puts you in sync with what Spring Boot does for you by default, except that a dedicated connection pool is chosen (in code) and its settings are exposed in the app.datasource.configuration sub namespace. Because DataSourceProperties is taking care of the url/jdbcUrl translation for you, you can configure it as follows:

PropertiesYaml
app.datasource.url=jdbc:mysql://localhost/test
app.datasource.username=dbuser
app.datasource.password=dbpass
app.datasource.configuration.maximum-pool-size=30
Spring Boot will expose Hikari-specific settings to spring.datasource.hikari. This example uses a more generic configuration sub namespace as the example does not support multiple datasource implementations.
Because your custom configuration chooses to go with Hikari, app.datasource.type has no effect. In practice, the builder is initialized with whatever value you might set there and then overridden by the call to .type().
See “Configure a DataSource” in the “Spring Boot features” section and the DataSourceAutoConfiguration class for more details.

9.9.2. Configure Two DataSources
If you need to configure multiple data sources, you can apply the same tricks that are described in the previous section. You must, however, mark one of the DataSource instances as @Primary, because various auto-configurations down the road expect to be able to get one by type.

If you create your own DataSource, the auto-configuration backs off. In the following example, we provide the exact same feature set as the auto-configuration provides on the primary data source:

@Bean
@Primary
@ConfigurationProperties("app.datasource.first")
public DataSourceProperties firstDataSourceProperties() {
    return new DataSourceProperties();
}

@Bean
@Primary
@ConfigurationProperties("app.datasource.first.configuration")
public HikariDataSource firstDataSource() {
    return firstDataSourceProperties().initializeDataSourceBuilder().type(HikariDataSource.class).build();
}

@Bean
@ConfigurationProperties("app.datasource.second")
public BasicDataSource secondDataSource() {
    return DataSourceBuilder.create().type(BasicDataSource.class).build();
}
firstDataSourceProperties has to be flagged as @Primary so that the database initializer feature uses your copy (if you use the initializer).
Both data sources are also bound for advanced customizations. For instance, you could configure them as follows:

PropertiesYaml
app.datasource.first.url=jdbc:mysql://localhost/first
app.datasource.first.username=dbuser
app.datasource.first.password=dbpass
app.datasource.first.configuration.maximum-pool-size=30

app.datasource.second.url=jdbc:mysql://localhost/second
app.datasource.second.username=dbuser
app.datasource.second.password=dbpass
app.datasource.second.max-total=30
You can apply the same concept to the secondary DataSource as well, as shown in the following example:

@Bean
@Primary
@ConfigurationProperties("app.datasource.first")
public DataSourceProperties firstDataSourceProperties() {
    return new DataSourceProperties();
}

@Bean
@Primary
@ConfigurationProperties("app.datasource.first.configuration")
public HikariDataSource firstDataSource() {
    return firstDataSourceProperties().initializeDataSourceBuilder().type(HikariDataSource.class).build();
}

@Bean
@ConfigurationProperties("app.datasource.second")
public DataSourceProperties secondDataSourceProperties() {
    return new DataSourceProperties();
}

@Bean
@ConfigurationProperties("app.datasource.second.configuration")
public BasicDataSource secondDataSource() {
    return secondDataSourceProperties().initializeDataSourceBuilder().type(BasicDataSource.class).build();
}
The preceding example configures two data sources on custom namespaces with the same logic as Spring Boot would use in auto-configuration. Note that each configuration sub namespace provides advanced settings based on the chosen implementation.

9.9.3. Use Spring Data Repositories
Spring Data can create implementations of @Repository interfaces of various flavors. Spring Boot handles all of that for you, as long as those @Repositories are included in the same package (or a sub-package) of your @EnableAutoConfiguration class.

For many applications, all you need is to put the right Spring Data dependencies on your classpath. There is a spring-boot-starter-data-jpa for JPA, spring-boot-starter-data-mongodb for Mongodb, etc. To get started, create some repository interfaces to handle your @Entity objects.

Spring Boot tries to guess the location of your @Repository definitions, based on the @EnableAutoConfiguration it finds. To get more control, use the @EnableJpaRepositories annotation (from Spring Data JPA).

For more about Spring Data, see the Spring Data project page.

9.9.4. Separate @Entity Definitions from Spring Configuration
Spring Boot tries to guess the location of your @Entity definitions, based on the @EnableAutoConfiguration it finds. To get more control, you can use the @EntityScan annotation, as shown in the following example:

@Configuration(proxyBeanMethods = false)
@EnableAutoConfiguration
@EntityScan(basePackageClasses=City.class)
public class Application {

    //...

}
9.9.5. Configure JPA Properties
Spring Data JPA already provides some vendor-independent configuration options (such as those for SQL logging), and Spring Boot exposes those options and a few more for Hibernate as external configuration properties. Some of them are automatically detected according to the context so you should not have to set them.

The spring.jpa.hibernate.ddl-auto is a special case, because, depending on runtime conditions, it has different defaults. If an embedded database is used and no schema manager (such as Liquibase or Flyway) is handling the DataSource, it defaults to create-drop. In all other cases, it defaults to none.

The dialect to use is detected by the JPA provider. If you prefer to set the dialect yourself, set the spring.jpa.database-platform property.

The most common options to set are shown in the following example:

PropertiesYaml
spring.jpa.hibernate.naming.physical-strategy=com.example.MyPhysicalNamingStrategy
spring.jpa.show-sql=true
In addition, all properties in spring.jpa.properties.* are passed through as normal JPA properties (with the prefix stripped) when the local EntityManagerFactory is created.

You need to ensure that names defined under spring.jpa.properties.* exactly match those expected by your JPA provider. Spring Boot will not attempt any kind of relaxed binding for these entries.

For example, if you want to configure Hibernate’s batch size you must use spring.jpa.properties.hibernate.jdbc.batch_size. If you use other forms, such as batchSize or batch-size, Hibernate will not apply the setting.

If you need to apply advanced customization to Hibernate properties, consider registering a HibernatePropertiesCustomizer bean that will be invoked prior to creating the EntityManagerFactory. This takes precedence to anything that is applied by the auto-configuration.
9.9.6. Configure Hibernate Naming Strategy
Hibernate uses two different naming strategies to map names from the object model to the corresponding database names. The fully qualified class name of the physical and the implicit strategy implementations can be configured by setting the spring.jpa.hibernate.naming.physical-strategy and spring.jpa.hibernate.naming.implicit-strategy properties, respectively. Alternatively, if ImplicitNamingStrategy or PhysicalNamingStrategy beans are available in the application context, Hibernate will be automatically configured to use them.

By default, Spring Boot configures the physical naming strategy with SpringPhysicalNamingStrategy. This implementation provides the same table structure as Hibernate 4: all dots are replaced by underscores and camel casing is replaced by underscores as well. Additionally, by default, all table names are generated in lower case. For example, a TelephoneNumber entity is mapped to the telephone_number table. If your schema requires mixed-case identifiers, define a custom SpringPhysicalNamingStrategy bean, as shown in the following example:

@Bean
SpringPhysicalNamingStrategy caseSensitivePhysicalNamingStrategy() {
    return new SpringPhysicalNamingStrategy() {

        @Override
        protected boolean isCaseInsensitive(JdbcEnvironment jdbcEnvironment) {
            return false;
        }

    };
}
If you prefer to use Hibernate 5’s default instead, set the following property:

spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
Alternatively, you can configure the following bean:

@Bean
public PhysicalNamingStrategy physicalNamingStrategy() {
    return new PhysicalNamingStrategyStandardImpl();
}
See HibernateJpaAutoConfiguration and JpaBaseConfiguration for more details.

9.9.7. Configure Hibernate Second-Level Caching
Hibernate second-level cache can be configured for a range of cache providers. Rather than configuring Hibernate to lookup the cache provider again, it is better to provide the one that is available in the context whenever possible.

To do this with JCache, first make sure that org.hibernate:hibernate-jcache is available on the classpath. Then, add a HibernatePropertiesCustomizer bean as shown in the following example:

@Configuration(proxyBeanMethods = false)
public class HibernateSecondLevelCacheExample {

    @Bean
    public HibernatePropertiesCustomizer hibernateSecondLevelCacheCustomizer(JCacheCacheManager cacheManager) {
        return (properties) -> properties.put(ConfigSettings.CACHE_MANAGER, cacheManager.getCacheManager());
    }

}
This customizer will configure Hibernate to use the same CacheManager as the one that the application uses. It is also possible to use separate CacheManager instances. For details, refer to the Hibernate user guide.

9.9.8. Use Dependency Injection in Hibernate Components
By default, Spring Boot registers a BeanContainer implementation that uses the BeanFactory so that converters and entity listeners can use regular dependency injection.

You can disable or tune this behaviour by registering a HibernatePropertiesCustomizer that removes or changes the hibernate.resource.beans.container property.

9.9.9. Use a Custom EntityManagerFactory
To take full control of the configuration of the EntityManagerFactory, you need to add a @Bean named ‘entityManagerFactory’. Spring Boot auto-configuration switches off its entity manager in the presence of a bean of that type.

9.9.10. Use Two EntityManagers
Even if the default EntityManagerFactory works fine, you need to define a new one, otherwise the presence of the second bean of that type switches off the default. You can use the EntityManagerBuilder provided by Spring Boot to help you to create one. Alternatively, you can use the LocalContainerEntityManagerFactoryBean directly from Spring ORM, as shown in the following example:

// add two data sources configured as above

@Bean
public LocalContainerEntityManagerFactoryBean customerEntityManagerFactory(
        EntityManagerFactoryBuilder builder) {
    return builder
            .dataSource(customerDataSource())
            .packages(Customer.class)
            .persistenceUnit("customers")
            .build();
}

@Bean
public LocalContainerEntityManagerFactoryBean orderEntityManagerFactory(
        EntityManagerFactoryBuilder builder) {
    return builder
            .dataSource(orderDataSource())
            .packages(Order.class)
            .persistenceUnit("orders")
            .build();
}
When you create a bean for LocalContainerEntityManagerFactoryBean yourself, any customization that was applied during the creation of the auto-configured LocalContainerEntityManagerFactoryBean is lost. For example, in case of Hibernate, any properties under the spring.jpa.hibernate prefix will not be automatically applied to your LocalContainerEntityManagerFactoryBean. If you were relying on these properties for configuring things like the naming strategy or the DDL mode, you will need to explicitly configure that when creating the LocalContainerEntityManagerFactoryBean bean. On the other hand, properties that get applied to the auto-configured EntityManagerFactoryBuilder, which are specified via spring.jpa.properties, will automatically be applied, provided you use the auto-configured EntityManagerFactoryBuilder to build the LocalContainerEntityManagerFactoryBean bean.
The configuration above almost works on its own. To complete the picture, you need to configure TransactionManagers for the two EntityManagers as well. If you mark one of them as @Primary, it could be picked up by the default JpaTransactionManager in Spring Boot. The other would have to be explicitly injected into a new instance. Alternatively, you might be able to use a JTA transaction manager that spans both.

If you use Spring Data, you need to configure @EnableJpaRepositories accordingly, as shown in the following example:

@Configuration(proxyBeanMethods = false)
@EnableJpaRepositories(basePackageClasses = Customer.class,
        entityManagerFactoryRef = "customerEntityManagerFactory")
public class CustomerConfiguration {
    ...
}

@Configuration(proxyBeanMethods = false)
@EnableJpaRepositories(basePackageClasses = Order.class,
        entityManagerFactoryRef = "orderEntityManagerFactory")
public class OrderConfiguration {
    ...
}
9.9.11. Use a Traditional persistence.xml File
Spring Boot will not search for or use a META-INF/persistence.xml by default. If you prefer to use a traditional persistence.xml, you need to define your own @Bean of type LocalEntityManagerFactoryBean (with an ID of ‘entityManagerFactory’) and set the persistence unit name there.

See JpaBaseConfiguration for the default settings.

9.9.12. Use Spring Data JPA and Mongo Repositories
Spring Data JPA and Spring Data Mongo can both automatically create Repository implementations for you. If they are both present on the classpath, you might have to do some extra configuration to tell Spring Boot which repositories to create. The most explicit way to do that is to use the standard Spring Data @EnableJpaRepositories and @EnableMongoRepositories annotations and provide the location of your Repository interfaces.

There are also flags (spring.data.*.repositories.enabled and spring.data.*.repositories.type) that you can use to switch the auto-configured repositories on and off in external configuration. Doing so is useful, for instance, in case you want to switch off the Mongo repositories and still use the auto-configured MongoTemplate.

The same obstacle and the same features exist for other auto-configured Spring Data repository types (Elasticsearch, Solr, and others). To work with them, change the names of the annotations and flags accordingly.

9.9.13. Customize Spring Data’s Web Support
Spring Data provides web support that simplifies the use of Spring Data repositories in a web application. Spring Boot provides properties in the spring.data.web namespace for customizing its configuration. Note that if you are using Spring Data REST, you must use the properties in the spring.data.rest namespace instead.

9.9.14. Expose Spring Data Repositories as REST Endpoint
Spring Data REST can expose the Repository implementations as REST endpoints for you, provided Spring MVC has been enabled for the application.

Spring Boot exposes a set of useful properties (from the spring.data.rest namespace) that customize the RepositoryRestConfiguration. If you need to provide additional customization, you should use a RepositoryRestConfigurer bean.

If you do not specify any order on your custom RepositoryRestConfigurer, it runs after the one Spring Boot uses internally. If you need to specify an order, make sure it is higher than 0.
9.9.15. Configure a Component that is Used by JPA
If you want to configure a component that JPA uses, then you need to ensure that the component is initialized before JPA. When the component is auto-configured, Spring Boot takes care of this for you. For example, when Flyway is auto-configured, Hibernate is configured to depend upon Flyway so that Flyway has a chance to initialize the database before Hibernate tries to use it.

If you are configuring a component yourself, you can use an EntityManagerFactoryDependsOnPostProcessor subclass as a convenient way of setting up the necessary dependencies. For example, if you use Hibernate Search with Elasticsearch as its index manager, any EntityManagerFactory beans must be configured to depend on the elasticsearchClient bean, as shown in the following example:

/**
 * {@link EntityManagerFactoryDependsOnPostProcessor} that ensures that
 * {@link EntityManagerFactory} beans depend on the {@code elasticsearchClient} bean.
 */
@Component
static class ElasticsearchEntityManagerFactoryDependsOnPostProcessor
        extends EntityManagerFactoryDependsOnPostProcessor {

    ElasticsearchEntityManagerFactoryDependsOnPostProcessor() {
        super("elasticsearchClient");
    }

}
9.9.16. Configure jOOQ with Two DataSources
If you need to use jOOQ with multiple data sources, you should create your own DSLContext for each one. Refer to JooqAutoConfiguration for more details.

In particular, JooqExceptionTranslator and SpringTransactionProvider can be reused to provide similar features to what the auto-configuration does with a single DataSource.
9.10. Database Initialization
An SQL database can be initialized in different ways depending on what your stack is. Of course, you can also do it manually, provided the database is a separate process. It is recommended to use a single mechanism for schema generation.

9.10.1. Initialize a Database Using JPA
JPA has features for DDL generation, and these can be set up to run on startup against the database. This is controlled through two external properties:

spring.jpa.generate-ddl (boolean) switches the feature on and off and is vendor independent.

spring.jpa.hibernate.ddl-auto (enum) is a Hibernate feature that controls the behavior in a more fine-grained way. This feature is described in more detail later in this guide.

9.10.2. Initialize a Database Using Hibernate
You can set spring.jpa.hibernate.ddl-auto explicitly and the standard Hibernate property values are none, validate, update, create, and create-drop. Spring Boot chooses a default value for you based on whether it thinks your database is embedded. It defaults to create-drop if no schema manager has been detected or none in all other cases. An embedded database is detected by looking at the Connection type and JDBC url. hsqldb, h2, and derby are candidates, and others are not. Be careful when switching from in-memory to a ‘real’ database that you do not make assumptions about the existence of the tables and data in the new platform. You either have to set ddl-auto explicitly or use one of the other mechanisms to initialize the database.

You can output the schema creation by enabling the org.hibernate.SQL logger. This is done for you automatically if you enable the debug mode.
In addition, a file named import.sql in the root of the classpath is executed on startup if Hibernate creates the schema from scratch (that is, if the ddl-auto property is set to create or create-drop). This can be useful for demos and for testing if you are careful but is probably not something you want to be on the classpath in production. It is a Hibernate feature (and has nothing to do with Spring).

9.10.3. Initialize a Database using basic SQL scripts
Spring Boot can automatically create the schema (DDL scripts) of your DataSource and initialize it (DML scripts). It loads SQL from the standard root classpath locations: schema.sql and data.sql, respectively. In addition, Spring Boot processes the schema-${platform}.sql and data-${platform}.sql files (if present), where platform is the value of spring.datasource.platform. This allows you to switch to database-specific scripts if necessary. For example, you might choose to set it to the vendor name of the database (hsqldb, h2, oracle, mysql, postgresql, and so on).

When only basic SQL scripts are used, Spring Boot automatically creates the schema of an embedded DataSource. This behavior can be customized by using the spring.datasource.initialization-mode property. For instance, if you want to always initialize the DataSource regardless of its type:

spring.datasource.initialization-mode=always
In a JPA-based app, you can choose to let Hibernate create the schema or use schema.sql, but you cannot do both. Make sure to disable spring.jpa.hibernate.ddl-auto if you use schema.sql.

spring.jpa.hibernate.ddl-auto=none
If you are using a Higher-level Database Migration Tool, like Flyway or Liquibase, you should use them alone to create and initialize the schema. Using the basic schema.sql and data.sql scripts alongside Flyway or Liquibase is not recommended and support will be removed in a future release.

By default, Spring Boot enables the fail-fast feature of the Spring JDBC initializer. This means that, if the scripts cause exceptions, the application fails to start. You can tune that behavior by setting spring.datasource.continue-on-error.

9.10.4. Initialize a Database Using R2DBC
If you are using R2DBC, the regular DataSource auto-configuration backs off so none of the options described above can be used.

You can initialize the database on startup using SQL scripts as shown in the following example:

@Configuration(proxyBeanMethods = false)
static class DatabaseInitializationConfiguration {

    @Autowired
    void initializeDatabase(ConnectionFactory connectionFactory) {
        ResourceLoader resourceLoader = new DefaultResourceLoader();
        Resource[] scripts = new Resource[] { resourceLoader.getResource("classpath:schema.sql"),
                resourceLoader.getResource("classpath:data.sql") };
        new ResourceDatabasePopulator(scripts).populate(connectionFactory).block();
    }

}
Alternatively, you can configure either Flyway or Liquibase to configure a DataSource for you for the duration of the migration. Both these libraries offer properties to set the url, username and password of the database to migrate.

When choosing this option, org.springframework:spring-jdbc is still a required dependency.
9.10.5. Initialize a Spring Batch Database
If you use Spring Batch, it comes pre-packaged with SQL initialization scripts for most popular database platforms. Spring Boot can detect your database type and execute those scripts on startup. If you use an embedded database, this happens by default. You can also enable it for any database type, as shown in the following example:

PropertiesYaml
spring.batch.initialize-schema=always
You can also switch off the initialization explicitly by setting spring.batch.initialize-schema to never.

9.10.6. Use a Higher-level Database Migration Tool
Spring Boot supports two higher-level migration tools: Flyway and Liquibase.

Execute Flyway Database Migrations on Startup
To automatically run Flyway database migrations on startup, add the org.flywaydb:flyway-core to your classpath.

Typically, migrations are scripts in the form V<VERSION>__<NAME>.sql (with <VERSION> an underscore-separated version, such as ‘1’ or ‘2_1’). By default, they are in a directory called classpath:db/migration, but you can modify that location by setting spring.flyway.locations. This is a comma-separated list of one or more classpath: or filesystem: locations. For example, the following configuration would search for scripts in both the default classpath location and the /opt/migration directory:

PropertiesYaml
spring.flyway.locations=classpath:db/migration,filesystem:/opt/migration
You can also add a special {vendor} placeholder to use vendor-specific scripts. Assume the following:

PropertiesYaml
spring.flyway.locations=classpath:db/migration/{vendor}
Rather than using db/migration, the preceding configuration sets the directory to use according to the type of the database (such as db/migration/mysql for MySQL). The list of supported databases is available in DatabaseDriver.

Migrations can also be written in Java. Flyway will be auto-configured with any beans that implement JavaMigration.

FlywayProperties provides most of Flyway’s settings and a small set of additional properties that can be used to disable the migrations or switch off the location checking. If you need more control over the configuration, consider registering a FlywayConfigurationCustomizer bean.

Spring Boot calls Flyway.migrate() to perform the database migration. If you would like more control, provide a @Bean that implements FlywayMigrationStrategy.

Flyway supports SQL and Java callbacks. To use SQL-based callbacks, place the callback scripts in the classpath:db/migration directory. To use Java-based callbacks, create one or more beans that implement Callback. Any such beans are automatically registered with Flyway. They can be ordered by using @Order or by implementing Ordered. Beans that implement the deprecated FlywayCallback interface can also be detected, however they cannot be used alongside Callback beans.

By default, Flyway autowires the (@Primary) DataSource in your context and uses that for migrations. If you like to use a different DataSource, you can create one and mark its @Bean as @FlywayDataSource. If you do so and want two data sources, remember to create another one and mark it as @Primary. Alternatively, you can use Flyway’s native DataSource by setting spring.flyway.[url,user,password] in external properties. Setting either spring.flyway.url or spring.flyway.user is sufficient to cause Flyway to use its own DataSource. If any of the three properties has not been set, the value of its equivalent spring.datasource property will be used.

You can also use Flyway to provide data for specific scenarios. For example, you can place test-specific migrations in src/test/resources and they are run only when your application starts for testing. Also, you can use profile-specific configuration to customize spring.flyway.locations so that certain migrations run only when a particular profile is active. For example, in application-dev.properties, you might specify the following setting:

PropertiesYaml
spring.flyway.locations=classpath:/db/migration,classpath:/dev/db/migration
With that setup, migrations in dev/db/migration run only when the dev profile is active.

Execute Liquibase Database Migrations on Startup
To automatically run Liquibase database migrations on startup, add the org.liquibase:liquibase-core to your classpath.

When you add the org.liquibase:liquibase-core to your classpath, database migrations run by default for both during application startup and before your tests run. This behavior can be customized by using the spring.liquibase.enabled property, setting different values in the main and test configurations. It is not possible to use two different ways to initialize the database (e.g. Liquibase for application startup, JPA for test runs).

By default, the master change log is read from db/changelog/db.changelog-master.yaml, but you can change the location by setting spring.liquibase.change-log. In addition to YAML, Liquibase also supports JSON, XML, and SQL change log formats.

By default, Liquibase autowires the (@Primary) DataSource in your context and uses that for migrations. If you need to use a different DataSource, you can create one and mark its @Bean as @LiquibaseDataSource. If you do so and you want two data sources, remember to create another one and mark it as @Primary. Alternatively, you can use Liquibase’s native DataSource by setting spring.liquibase.[driver-class-name,url,user,password] in external properties. Setting either spring.liquibase.url or spring.liquibase.user is sufficient to cause Liquibase to use its own DataSource. If any of the three properties has not been set, the value of its equivalent spring.datasource property will be used.

See LiquibaseProperties for details about available settings such as contexts, the default schema, and others.

9.11. Messaging
Spring Boot offers a number of starters that include messaging. This section answers questions that arise from using messaging with Spring Boot.

9.11.1. Disable Transacted JMS Session
If your JMS broker does not support transacted sessions, you have to disable the support of transactions altogether. If you create your own JmsListenerContainerFactory, there is nothing to do, since, by default it cannot be transacted. If you want to use the DefaultJmsListenerContainerFactoryConfigurer to reuse Spring Boot’s default, you can disable transacted sessions, as follows:

@Bean
public DefaultJmsListenerContainerFactory jmsListenerContainerFactory(
        ConnectionFactory connectionFactory,
        DefaultJmsListenerContainerFactoryConfigurer configurer) {
    DefaultJmsListenerContainerFactory listenerFactory =
            new DefaultJmsListenerContainerFactory();
    configurer.configure(listenerFactory, connectionFactory);
    listenerFactory.setTransactionManager(null);
    listenerFactory.setSessionTransacted(false);
    return listenerFactory;
}
The preceding example overrides the default factory, and it should be applied to any other factory that your application defines, if any.

9.12. Batch Applications
A number of questions often arise when people use Spring Batch from within a Spring Boot application. This section addresses those questions.

9.12.1. Specifying a Batch Data Source
By default, batch applications require a DataSource to store job details. Spring Batch expects a single DataSource by default. To have it use a DataSource other than the application’s main DataSource, declare a DataSource bean, annotating its @Bean method with @BatchDataSource. If you do so and want two data sources, remember to mark the other one @Primary. To take greater control, implement BatchConfigurer. See The Javadoc of @EnableBatchProcessing for more details.

For more info about Spring Batch, see the Spring Batch project page.

9.12.2. Running Spring Batch Jobs on Startup
Spring Batch auto-configuration is enabled by adding @EnableBatchProcessing to one of your @Configuration classes.

By default, it executes all Jobs in the application context on startup (see JobLauncherApplicationRunner for details). You can narrow down to a specific job or jobs by specifying spring.batch.job.names (which takes a comma-separated list of job name patterns).

See BatchAutoConfiguration and @EnableBatchProcessing for more details.

9.12.3. Running from the Command Line
Spring Boot converts any command line argument starting with -- to a property to add to the Environment, see accessing command line properties. This should not be used to pass arguments to batch jobs. To specify batch arguments on the command line, use the regular format (i.e. without --), as shown in the following example:

$ java -jar myapp.jar someParameter=someValue anotherParameter=anotherValue
If you specify a property of the Environment on the command line, it is ignored by the job. Consider the following command:

$ java -jar myapp.jar --server.port=7070 someParameter=someValue
This provides only one argument to the batch job: someParameter=someValue.

9.12.4. Storing the Job Repository
Spring Batch requires a data store for the Job repository. If you use Spring Boot, you must use an actual database. Note that it can be an in-memory database, see Configuring a Job Repository.

9.13. Actuator
Spring Boot includes the Spring Boot Actuator. This section answers questions that often arise from its use.

9.13.1. Change the HTTP Port or Address of the Actuator Endpoints
In a standalone application, the Actuator HTTP port defaults to the same as the main HTTP port. To make the application listen on a different port, set the external property: management.server.port. To listen on a completely different network address (such as when you have an internal network for management and an external one for user applications), you can also set management.server.address to a valid IP address to which the server is able to bind.

For more detail, see the ManagementServerProperties source code and “Customizing the Management Server Port” in the “Production-ready features” section.

9.13.2. Customize the ‘whitelabel’ Error Page
Spring Boot installs a ‘whitelabel’ error page that you see in a browser client if you encounter a server error (machine clients consuming JSON and other media types should see a sensible response with the right error code).

Set server.error.whitelabel.enabled=false to switch the default error page off. Doing so restores the default of the servlet container that you are using. Note that Spring Boot still tries to resolve the error view, so you should probably add your own error page rather than disabling it completely.
Overriding the error page with your own depends on the templating technology that you use. For example, if you use Thymeleaf, you can add an error.html template. If you use FreeMarker, you can add an error.ftlh template. In general, you need a View that resolves with a name of error or a @Controller that handles the /error path. Unless you replaced some of the default configuration, you should find a BeanNameViewResolver in your ApplicationContext, so a @Bean named error would be one way of doing that. See ErrorMvcAutoConfiguration for more options.

See also the section on “Error Handling” for details of how to register handlers in the servlet container.

9.13.3. Sanitize Sensitive Values
Information returned by the env and configprops endpoints can be somewhat sensitive so keys matching a certain pattern are sanitized by default (i.e. their values are replaced by ******).

The patterns to use can be customized using the management.endpoint.env.keys-to-sanitize and management.endpoint.configprops.keys-to-sanitize respectively.

Spring Boot uses sensible defaults for such keys: any key ending with the word "password", "secret", "key", "token", "vcap_services", "sun.java.command" is entirely sanitized. Additionally, any key that holds the word credentials as part of the key is sanitized (configured as a regular expression, i.e. *credentials.*).

Furthermore, Spring Boot only sanitizes the sensitive portion of URIs for keys which end with "uri", "uris", "address", or "addresses". The sensitive portion of the URI is identified using the format <scheme>://<username>:<password>@<host>:<port>/. For example, for the property myclient.uri=http://user1:password1@localhost:8081, the resulting sanitized value is http://user1:******@localhost:8081.

9.13.4. Map Health Indicators to Micrometer Metrics
Spring Boot health indicators return a Status type to indicate the overall system health. If you want to monitor or alert on levels of health for a particular application, you can export these statuses as metrics via Micrometer. By default, the status codes “UP”, “DOWN”, “OUT_OF_SERVICE” and “UNKNOWN” are used by Spring Boot. To export these, you’ll need to convert these states to some set of numbers so that they can be used with a Micrometer Gauge.

The following example shows one way to write such an exporter:

@Configuration
public class HealthMetricsConfiguration {

    public HealthMetricsConfiguration(MeterRegistry registry, HealthEndpoint healthEndpoint) {
        // This example presumes common tags (such as the app) are applied elsewhere
        Gauge.builder("health", healthEndpoint, this::getStatusCode).strongReference(true).register(registry);
    }

    private int getStatusCode(HealthEndpoint health) {
        Status status = health.health().getStatus();
        if (Status.UP.equals(status)) {
            return 3;
        }
        if (Status.OUT_OF_SERVICE.equals(status)) {
            return 2;
        }
        if (Status.DOWN.equals(status)) {
            return 1;
        }
        return 0;
    }

}
9.14. Security
This section addresses questions about security when working with Spring Boot, including questions that arise from using Spring Security with Spring Boot.

For more about Spring Security, see the Spring Security project page.

9.14.1. Switch off the Spring Boot Security Configuration
If you define a @Configuration with a WebSecurityConfigurerAdapter or a SecurityFilterChain bean in your application, it switches off the default webapp security settings in Spring Boot.

9.14.2. Change the UserDetailsService and Add User Accounts
If you provide a @Bean of type AuthenticationManager, AuthenticationProvider, or UserDetailsService, the default @Bean for InMemoryUserDetailsManager is not created. This means you have the full feature set of Spring Security available (such as various authentication options).

The easiest way to add user accounts is to provide your own UserDetailsService bean.

9.14.3. Enable HTTPS When Running behind a Proxy Server
Ensuring that all your main endpoints are only available over HTTPS is an important chore for any application. If you use Tomcat as a servlet container, then Spring Boot adds Tomcat’s own RemoteIpValve automatically if it detects some environment settings, and you should be able to rely on the HttpServletRequest to report whether it is secure or not (even downstream of a proxy server that handles the real SSL termination). The standard behavior is determined by the presence or absence of certain request headers (x-forwarded-for and x-forwarded-proto), whose names are conventional, so it should work with most front-end proxies. You can switch on the valve by adding some entries to application.properties, as shown in the following example:

PropertiesYaml
server.tomcat.remoteip.remote-ip-header=x-forwarded-for
server.tomcat.remoteip.protocol-header=x-forwarded-proto
(The presence of either of those properties switches on the valve. Alternatively, you can add the RemoteIpValve by customizing the TomcatServletWebServerFactory using a WebServerFactoryCustomizer bean.)

To configure Spring Security to require a secure channel for all (or some) requests, consider adding your own SecurityFilterChain bean that adds the following HttpSecurity configuration:

@Bean
public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
    // Customize the application security
    http.requiresChannel().anyRequest().requiresSecure();
    return http.build();
}
9.15. Hot Swapping
Spring Boot supports hot swapping. This section answers questions about how it works.

9.15.1. Reload Static Content
There are several options for hot reloading. The recommended approach is to use spring-boot-devtools, as it provides additional development-time features, such as support for fast application restarts and LiveReload as well as sensible development-time configuration (such as template caching). Devtools works by monitoring the classpath for changes. This means that static resource changes must be "built" for the change to take effect. By default, this happens automatically in Eclipse when you save your changes. In IntelliJ IDEA, the Make Project command triggers the necessary build. Due to the default restart exclusions, changes to static resources do not trigger a restart of your application. They do, however, trigger a live reload.

Alternatively, running in an IDE (especially with debugging on) is a good way to do development (all modern IDEs allow reloading of static resources and usually also allow hot-swapping of Java class changes).

Finally, the Maven and Gradle plugins can be configured (see the addResources property) to support running from the command line with reloading of static files directly from source. You can use that with an external css/js compiler process if you are writing that code with higher-level tools.

9.15.2. Reload Templates without Restarting the Container
Most of the templating technologies supported by Spring Boot include a configuration option to disable caching (described later in this document). If you use the spring-boot-devtools module, these properties are automatically configured for you at development time.

Thymeleaf Templates
If you use Thymeleaf, set spring.thymeleaf.cache to false. See ThymeleafAutoConfiguration for other Thymeleaf customization options.

FreeMarker Templates
If you use FreeMarker, set spring.freemarker.cache to false. See FreeMarkerAutoConfiguration for other FreeMarker customization options.

Groovy Templates
If you use Groovy templates, set spring.groovy.template.cache to false. See GroovyTemplateAutoConfiguration for other Groovy customization options.

9.15.3. Fast Application Restarts
The spring-boot-devtools module includes support for automatic application restarts. While not as fast as technologies such as JRebel it is usually significantly faster than a “cold start”. You should probably give it a try before investigating some of the more complex reload options discussed later in this document.

For more details, see the Developer Tools section.

9.15.4. Reload Java Classes without Restarting the Container
Many modern IDEs (Eclipse, IDEA, and others) support hot swapping of bytecode. Consequently, if you make a change that does not affect class or method signatures, it should reload cleanly with no side effects.

9.16. Build
Spring Boot includes build plugins for Maven and Gradle. This section answers common questions about these plugins.

9.16.1. Generate Build Information
Both the Maven plugin and the Gradle plugin allow generating build information containing the coordinates, name, and version of the project. The plugins can also be configured to add additional properties through configuration. When such a file is present, Spring Boot auto-configures a BuildProperties bean.

To generate build information with Maven, add an execution for the build-info goal, as shown in the following example:

<build>
    <plugins>
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <version>2.4.5</version>
            <executions>
                <execution>
                    <goals>
                        <goal>build-info</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>
See the Spring Boot Maven Plugin documentation for more details.
The following example does the same with Gradle:

springBoot {
    buildInfo()
}
See the Spring Boot Gradle Plugin documentation for more details.
9.16.2. Generate Git Information
Both Maven and Gradle allow generating a git.properties file containing information about the state of your git source code repository when the project was built.

For Maven users, the spring-boot-starter-parent POM includes a pre-configured plugin to generate a git.properties file. To use it, add the following declaration to your POM:

<build>
    <plugins>
        <plugin>
            <groupId>pl.project13.maven</groupId>
            <artifactId>git-commit-id-plugin</artifactId>
        </plugin>
    </plugins>
</build>
Gradle users can achieve the same result by using the gradle-git-properties plugin, as shown in the following example:

plugins {
    id "com.gorylenko.gradle-git-properties" version "2.2.4"
}
Both the Maven and Gradle plugins allow the properties that are included in git.properties to be configured.

The commit time in git.properties is expected to match the following format: yyyy-MM-dd’T’HH:mm:ssZ. This is the default format for both plugins listed above. Using this format lets the time be parsed into a Date and its format, when serialized to JSON, to be controlled by Jackson’s date serialization configuration settings.
9.16.3. Customize Dependency Versions
The spring-boot-dependencies POM manages the versions of common dependencies. The Spring Boot plugins for Maven and Gradle allow these managed dependency versions to be customized using build properties.

Each Spring Boot release is designed and tested against this specific set of third-party dependencies. Overriding versions may cause compatibility issues.
To override dependency versions with Maven, see this section of the Maven plugin’s documentation.

To override dependency versions in Gradle, see this section of the Gradle plugin’s documentation.

9.16.4. Create an Executable JAR with Maven
The spring-boot-maven-plugin can be used to create an executable “fat” JAR. If you use the spring-boot-starter-parent POM, you can declare the plugin and your jars are repackaged as follows:

<build>
    <plugins>
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
        </plugin>
    </plugins>
</build>
If you do not use the parent POM, you can still use the plugin. However, you must additionally add an <executions> section, as follows:

<build>
    <plugins>
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <version>2.4.5</version>
            <executions>
                <execution>
                    <goals>
                        <goal>repackage</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>
See the plugin documentation for full usage details.

9.16.5. Use a Spring Boot Application as a Dependency
Like a war file, a Spring Boot application is not intended to be used as a dependency. If your application contains classes that you want to share with other projects, the recommended approach is to move that code into a separate module. The separate module can then be depended upon by your application and other projects.

If you cannot rearrange your code as recommended above, Spring Boot’s Maven and Gradle plugins must be configured to produce a separate artifact that is suitable for use as a dependency. The executable archive cannot be used as a dependency as the executable jar format packages application classes in BOOT-INF/classes. This means that they cannot be found when the executable jar is used as a dependency.

To produce the two artifacts, one that can be used as a dependency and one that is executable, a classifier must be specified. This classifier is applied to the name of the executable archive, leaving the default archive for use as a dependency.

To configure a classifier of exec in Maven, you can use the following configuration:

<build>
    <plugins>
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <configuration>
                <classifier>exec</classifier>
            </configuration>
        </plugin>
    </plugins>
</build>
9.16.6. Extract Specific Libraries When an Executable Jar Runs
Most nested libraries in an executable jar do not need to be unpacked in order to run. However, certain libraries can have problems. For example, JRuby includes its own nested jar support, which assumes that the jruby-complete.jar is always directly available as a file in its own right.

To deal with any problematic libraries, you can flag that specific nested jars should be automatically unpacked when the executable jar first runs. Such nested jars are written beneath the temporary directory identified by the java.io.tmpdir system property.

Care should be taken to ensure that your operating system is configured so that it will not delete the jars that have been unpacked to the temporary directory while the application is still running.
For example, to indicate that JRuby should be flagged for unpacking by using the Maven Plugin, you would add the following configuration:

<build>
    <plugins>
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <configuration>
                <requiresUnpack>
                    <dependency>
                        <groupId>org.jruby</groupId>
                        <artifactId>jruby-complete</artifactId>
                    </dependency>
                </requiresUnpack>
            </configuration>
        </plugin>
    </plugins>
</build>
9.16.7. Create a Non-executable JAR with Exclusions
Often, if you have an executable and a non-executable jar as two separate build products, the executable version has additional configuration files that are not needed in a library jar. For example, the application.yml configuration file might be excluded from the non-executable JAR.

In Maven, the executable jar must be the main artifact and you can add a classified jar for the library, as follows:

<build>
    <plugins>
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
        </plugin>
        <plugin>
            <artifactId>maven-jar-plugin</artifactId>
            <executions>
                <execution>
                    <id>lib</id>
                    <phase>package</phase>
                    <goals>
                        <goal>jar</goal>
                    </goals>
                    <configuration>
                        <classifier>lib</classifier>
                        <excludes>
                            <exclude>application.yml</exclude>
                        </excludes>
                    </configuration>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>
9.16.8. Remote Debug a Spring Boot Application Started with Maven
To attach a remote debugger to a Spring Boot application that was started with Maven, you can use the jvmArguments property of the maven plugin.

See this example for more details.

9.16.9. Build an Executable Archive from Ant without Using spring-boot-antlib
To build with Ant, you need to grab dependencies, compile, and then create a jar or war archive. To make it executable, you can either use the spring-boot-antlib module or you can follow these instructions:

If you are building a jar, package the application’s classes and resources in a nested BOOT-INF/classes directory. If you are building a war, package the application’s classes in a nested WEB-INF/classes directory as usual.

Add the runtime dependencies in a nested BOOT-INF/lib directory for a jar or WEB-INF/lib for a war. Remember not to compress the entries in the archive.

Add the provided (embedded container) dependencies in a nested BOOT-INF/lib directory for a jar or WEB-INF/lib-provided for a war. Remember not to compress the entries in the archive.

Add the spring-boot-loader classes at the root of the archive (so that the Main-Class is available).

Use the appropriate launcher (such as JarLauncher for a jar file) as a Main-Class attribute in the manifest and specify the other properties it needs as manifest entries — principally, by setting a Start-Class property.

The following example shows how to build an executable archive with Ant:

<target name="build" depends="compile">
    <jar destfile="target/${ant.project.name}-${spring-boot.version}.jar" compress="false">
        <mappedresources>
            <fileset dir="target/classes" />
            <globmapper from="*" to="BOOT-INF/classes/*"/>
        </mappedresources>
        <mappedresources>
            <fileset dir="src/main/resources" erroronmissingdir="false"/>
            <globmapper from="*" to="BOOT-INF/classes/*"/>
        </mappedresources>
        <mappedresources>
            <fileset dir="${lib.dir}/runtime" />
            <globmapper from="*" to="BOOT-INF/lib/*"/>
        </mappedresources>
        <zipfileset src="${lib.dir}/loader/spring-boot-loader-jar-${spring-boot.version}.jar" />
        <manifest>
            <attribute name="Main-Class" value="org.springframework.boot.loader.JarLauncher" />
            <attribute name="Start-Class" value="${start-class}" />
        </manifest>
    </jar>
</target>
9.17. Traditional Deployment
Spring Boot supports traditional deployment as well as more modern forms of deployment. This section answers common questions about traditional deployment.

9.17.1. Create a Deployable War File
Because Spring WebFlux does not strictly depend on the Servlet API and applications are deployed by default on an embedded Reactor Netty server, War deployment is not supported for WebFlux applications.
The first step in producing a deployable war file is to provide a SpringBootServletInitializer subclass and override its configure method. Doing so makes use of Spring Framework’s Servlet 3.0 support and lets you configure your application when it is launched by the servlet container. Typically, you should update your application’s main class to extend SpringBootServletInitializer, as shown in the following example:

@SpringBootApplication
public class Application extends SpringBootServletInitializer {

    @Override
    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
        return application.sources(Application.class);
    }

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }

}
The next step is to update your build configuration such that your project produces a war file rather than a jar file. If you use Maven and spring-boot-starter-parent (which configures Maven’s war plugin for you), all you need to do is to modify pom.xml to change the packaging to war, as follows:

<packaging>war</packaging>
If you use Gradle, you need to modify build.gradle to apply the war plugin to the project, as follows:

apply plugin: 'war'
The final step in the process is to ensure that the embedded servlet container does not interfere with the servlet container to which the war file is deployed. To do so, you need to mark the embedded servlet container dependency as being provided.

If you use Maven, the following example marks the servlet container (Tomcat, in this case) as being provided:

<dependencies>
    <!-- … -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-tomcat</artifactId>
        <scope>provided</scope>
    </dependency>
    <!-- … -->
</dependencies>
If you use Gradle, the following example marks the servlet container (Tomcat, in this case) as being provided:

dependencies {
    // …
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    // …
}
providedRuntime is preferred to Gradle’s compileOnly configuration. Among other limitations, compileOnly dependencies are not on the test classpath, so any web-based integration tests fail.
If you use the Spring Boot build tools, marking the embedded servlet container dependency as provided produces an executable war file with the provided dependencies packaged in a lib-provided directory. This means that, in addition to being deployable to a servlet container, you can also run your application by using java -jar on the command line.

9.17.2. Convert an Existing Application to Spring Boot
To convert an existing non-web Spring application to a Spring Boot application, replace the code that creates your ApplicationContext and replace it with calls to SpringApplication or SpringApplicationBuilder. Spring MVC web applications are generally amenable to first creating a deployable war application and then migrating it later to an executable war or jar. See the Getting Started Guide on Converting a jar to a war.

To create a deployable war by extending SpringBootServletInitializer (for example, in a class called Application) and adding the Spring Boot @SpringBootApplication annotation, use code similar to that shown in the following example:

@SpringBootApplication
public class Application extends SpringBootServletInitializer {

    @Override
    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
        // Customize the application or call application.sources(...) to add sources
        // Since our example is itself a @Configuration class (via @SpringBootApplication)
        // we actually don't need to override this method.
        return application;
    }

}
Remember that, whatever you put in the sources is merely a Spring ApplicationContext. Normally, anything that already works should work here. There might be some beans you can remove later and let Spring Boot provide its own defaults for them, but it should be possible to get something working before you need to do that.

Static resources can be moved to /public (or /static or /resources or /META-INF/resources) in the classpath root. The same applies to messages.properties (which Spring Boot automatically detects in the root of the classpath).

Vanilla usage of Spring DispatcherServlet and Spring Security should require no further changes. If you have other features in your application (for instance, using other servlets or filters), you may need to add some configuration to your Application context, by replacing those elements from the web.xml, as follows:

A @Bean of type Servlet or ServletRegistrationBean installs that bean in the container as if it were a <servlet/> and <servlet-mapping/> in web.xml.

A @Bean of type Filter or FilterRegistrationBean behaves similarly (as a <filter/> and <filter-mapping/>).

An ApplicationContext in an XML file can be added through an @ImportResource in your Application. Alternatively, cases where annotation configuration is heavily used already can be recreated in a few lines as @Bean definitions.

Once the war file is working, you can make it executable by adding a main method to your Application, as shown in the following example:

public static void main(String[] args) {
    SpringApplication.run(Application.class, args);
}
If you intend to start your application as a war or as an executable application, you need to share the customizations of the builder in a method that is both available to the SpringBootServletInitializer callback and in the main method in a class similar to the following:

@SpringBootApplication
public class Application extends SpringBootServletInitializer {

    @Override
    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {
        return configureApplication(builder);
    }

    public static void main(String[] args) {
        configureApplication(new SpringApplicationBuilder()).run(args);
    }

    private static SpringApplicationBuilder configureApplication(SpringApplicationBuilder builder) {
        return builder.sources(Application.class).bannerMode(Banner.Mode.OFF);
    }

}
Applications can fall into more than one category:

Servlet 3.0+ applications with no web.xml.

Applications with a web.xml.

Applications with a context hierarchy.

Applications without a context hierarchy.

All of these should be amenable to translation, but each might require slightly different techniques.

Servlet 3.0+ applications might translate pretty easily if they already use the Spring Servlet 3.0+ initializer support classes. Normally, all the code from an existing WebApplicationInitializer can be moved into a SpringBootServletInitializer. If your existing application has more than one ApplicationContext (for example, if it uses AbstractDispatcherServletInitializer) then you might be able to combine all your context sources into a single SpringApplication. The main complication you might encounter is if combining does not work and you need to maintain the context hierarchy. See the entry on building a hierarchy for examples. An existing parent context that contains web-specific features usually needs to be broken up so that all the ServletContextAware components are in the child context.

Applications that are not already Spring applications might be convertible to Spring Boot applications, and the previously mentioned guidance may help. However, you may yet encounter problems. In that case, we suggest asking questions on Stack Overflow with a tag of spring-boot.

9.17.3. Deploying a WAR to WebLogic
To deploy a Spring Boot application to WebLogic, you must ensure that your servlet initializer directly implements WebApplicationInitializer (even if you extend from a base class that already implements it).

A typical initializer for WebLogic should resemble the following example:

import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;
import org.springframework.web.WebApplicationInitializer;

@SpringBootApplication
public class MyApplication extends SpringBootServletInitializer implements WebApplicationInitializer {

}
If you use Logback, you also need to tell WebLogic to prefer the packaged version rather than the version that was pre-installed with the server. You can do so by adding a WEB-INF/weblogic.xml file with the following contents:

<?xml version="1.0" encoding="UTF-8"?>
<wls:weblogic-web-app
    xmlns:wls="http://xmlns.oracle.com/weblogic/weblogic-web-app"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
        https://java.sun.com/xml/ns/javaee/ejb-jar_3_0.xsd
        http://xmlns.oracle.com/weblogic/weblogic-web-app
        https://xmlns.oracle.com/weblogic/weblogic-web-app/1.4/weblogic-web-app.xsd">
    <wls:container-descriptor>
        <wls:prefer-application-packages>
            <wls:package-name>org.slf4j</wls:package-name>
        </wls:prefer-application-packages>
    </wls:container-descriptor>
</wls:weblogic-web-app>
9.17.4. Use Jedis Instead of Lettuce
By default, the Spring Boot starter (spring-boot-starter-data-redis) uses Lettuce. You need to exclude that dependency and include the Jedis one instead. Spring Boot manages both of these dependencies so you can switch to Jedis without specifying a version.

The following example shows how to do so in Maven:

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-redis</artifactId>
    <exclusions>
        <exclusion>
            <groupId>io.lettuce</groupId>
            <artifactId>lettuce-core</artifactId>
        </exclusion>
    </exclusions>
</dependency>
<dependency>
    <groupId>redis.clients</groupId>
    <artifactId>jedis</artifactId>
</dependency>
The following example shows how to do so in Gradle:

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-data-redis') {
        exclude group: 'io.lettuce', module: 'lettuce-core'
    }
    implementation 'redis.clients:jedis'
    // ...
}
9.17.5. Use Testcontainers for integration testing
The Testcontainers library provides a way to manage services running inside Docker containers. It integrates with JUnit, allowing you to write a test class that can start up a container before any of the tests run. Testcontainers is especially useful for writing integration tests that talk to a real backend service such as MySQL, MongoDB, Cassandra etc. Testcontainers can be used in a Spring Boot test as follows:

@SpringBootTest
@Testcontainers
class ExampleIntegrationTests {

    @Container
    static Neo4jContainer<?> neo4j = new Neo4jContainer<>();

}
This will start up a docker container running Neo4j (if Docker is running locally) before any of the tests are run. In most cases, you will need to configure the application using details from the running container, such as container IP or port.

This can be done with a static @DynamicPropertySource method that allows adding dynamic property values to the Spring Environment.

@SpringBootTest
@Testcontainers
class ExampleIntegrationTests {

    @Container
    static Neo4jContainer<?> neo4j = new Neo4jContainer<>();

    @DynamicPropertySource
    static void neo4jProperties(DynamicPropertyRegistry registry) {
        registry.add("spring.neo4j.uri", neo4j::getBoltUrl);
    }

}
The above configuration allows Neo4j-related beans in the application to communicate with Neo4j running inside the Testcontainers-managed Docker container.

10. Appendices
Appendix A: Common Application properties
Various properties can be specified inside your application.properties file, inside your application.yml file, or as command line switches. This appendix provides a list of common Spring Boot properties and references to the underlying classes that consume them.

Spring Boot provides various conversion mechanism with advanced value formatting, make sure to review the properties conversion section.
Property contributions can come from additional jar files on your classpath, so you should not consider this an exhaustive list. Also, you can define your own properties.
10.A.1. Core Properties
Key	Default Value	Description
debug

false

Enable debug logs.

info.*

Arbitrary properties to add to the info endpoint.

logging.charset.console

Charset to use for console output.

logging.charset.file

Charset to use for file output.

logging.config

Location of the logging configuration file. For instance, `classpath:logback.xml` for Logback.

logging.exception-conversion-word

%wEx

Conversion word used when logging exceptions.

logging.file.name

Log file name (for instance, `myapp.log`). Names can be an exact location or relative to the current directory.

logging.file.path

Location of the log file. For instance, `/var/log`.

logging.group.*

Log groups to quickly change multiple loggers at the same time. For instance, `logging.group.db=org.hibernate,org.springframework.jdbc`.

logging.level.*

Log levels severity mapping. For instance, `logging.level.org.springframework=DEBUG`.

logging.logback.rollingpolicy.clean-history-on-start

false

Whether to clean the archive log files on startup.

logging.logback.rollingpolicy.file-name-pattern

${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz

Pattern for rolled-over log file names.

logging.logback.rollingpolicy.max-file-size

10MB

Maximum log file size.

logging.logback.rollingpolicy.max-history

7

Maximum number of days archive log files are kept.

logging.logback.rollingpolicy.total-size-cap

0B

Total size of log backups to be kept.

logging.pattern.console

%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}

Appender pattern for output to the console. Supported only with the default Logback setup.

logging.pattern.dateformat

yyyy-MM-dd HH:mm:ss.SSS

Appender pattern for log date format. Supported only with the default Logback setup.

logging.pattern.file

%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}

Appender pattern for output to a file. Supported only with the default Logback setup.

logging.pattern.level

%5p

Appender pattern for log level. Supported only with the default Logback setup.

logging.register-shutdown-hook

false

Register a shutdown hook for the logging system when it is initialized.

spring.aop.auto

true

Add @EnableAspectJAutoProxy.

spring.aop.proxy-target-class

true

Whether subclass-based (CGLIB) proxies are to be created (true), as opposed to standard Java interface-based proxies (false).

spring.application.admin.enabled

false

Whether to enable admin features for the application.

spring.application.admin.jmx-name

org.springframework.boot:type=Admin,name=SpringApplication

JMX name of the application admin MBean.

spring.application.name

Application name.

spring.autoconfigure.exclude

Auto-configuration classes to exclude.

spring.banner.charset

UTF-8

Banner file encoding.

spring.banner.image.bitdepth

4

Bit depth to use for ANSI colors. Supported values are 4 (16 color) or 8 (256 color).

spring.banner.image.height

Height of the banner image in chars (default based on image height).

spring.banner.image.invert

false

Whether images should be inverted for dark terminal themes.

spring.banner.image.location

classpath:banner.gif

Banner image file location (jpg or png can also be used).

spring.banner.image.margin

2

Left hand image margin in chars.

spring.banner.image.pixelmode

TEXT

Pixel mode to use when rendering the image.

spring.banner.image.width

76

Width of the banner image in chars.

spring.banner.location

classpath:banner.txt

Banner text resource location.

spring.beaninfo.ignore

true

Whether to skip search of BeanInfo classes.

spring.codec.log-request-details

false

Whether to log form data at DEBUG level, and headers at TRACE level.

spring.codec.max-in-memory-size

Limit on the number of bytes that can be buffered whenever the input stream needs to be aggregated. This applies only to the auto-configured WebFlux server and WebClient instances. By default this is not set, in which case individual codec defaults apply. Most codecs are limited to 256K by default.

spring.config.activate.on-cloud-platform

Required cloud platform for the document to be included.

spring.config.activate.on-profile

Profile expressions that should match for the document to be included.

spring.config.additional-location

Config file locations used in addition to the defaults.

spring.config.import

Import additional config data.

spring.config.location

Config file locations that replace the defaults.

spring.config.name

application

Config file name.

spring.config.use-legacy-processing

false

Whether to enable configuration data processing legacy mode.

spring.info.build.encoding

UTF-8

File encoding.

spring.info.build.location

classpath:META-INF/build-info.properties

Location of the generated build-info.properties file.

spring.info.git.encoding

UTF-8

File encoding.

spring.info.git.location

classpath:git.properties

Location of the generated git.properties file.

spring.jmx.default-domain

JMX domain name.

spring.jmx.enabled

false

Expose management beans to the JMX domain.

spring.jmx.server

mbeanServer

MBeanServer bean name.

spring.jmx.unique-names

false

Whether unique runtime object names should be ensured.

spring.lifecycle.timeout-per-shutdown-phase

30s

Timeout for the shutdown of any phase (group of SmartLifecycle beans with the same 'phase' value).

spring.main.allow-bean-definition-overriding

false

Whether bean definition overriding, by registering a definition with the same name as an existing definition, is allowed.

spring.main.banner-mode

console

Mode used to display the banner when the application runs.

spring.main.cloud-platform

Override the Cloud Platform auto-detection.

spring.main.lazy-initialization

false

Whether initialization should be performed lazily.

spring.main.log-startup-info

true

Whether to log information about the application when it starts.

spring.main.register-shutdown-hook

true

Whether the application should have a shutdown hook registered.

spring.main.sources

Sources (class names, package names, or XML resource locations) to include in the ApplicationContext.

spring.main.web-application-type

Flag to explicitly request a specific type of web application. If not set, auto-detected based on the classpath.

spring.mandatory-file-encoding

Expected character encoding the application must use.

spring.messages.always-use-message-format

false

Whether to always apply the MessageFormat rules, parsing even messages without arguments.

spring.messages.basename

messages

Comma-separated list of basenames (essentially a fully-qualified classpath location), each following the ResourceBundle convention with relaxed support for slash based locations. If it doesn't contain a package qualifier (such as "org.mypackage"), it will be resolved from the classpath root.

spring.messages.cache-duration

Loaded resource bundle files cache duration. When not set, bundles are cached forever. If a duration suffix is not specified, seconds will be used.

spring.messages.encoding

UTF-8

Message bundles encoding.

spring.messages.fallback-to-system-locale

true

Whether to fall back to the system Locale if no files for a specific Locale have been found. if this is turned off, the only fallback will be the default file (e.g. "messages.properties" for basename "messages").

spring.messages.use-code-as-default-message

false

Whether to use the message code as the default message instead of throwing a "NoSuchMessageException". Recommended during development only.

spring.output.ansi.enabled

detect

Configures the ANSI output.

spring.pid.fail-on-write-error

Fails if ApplicationPidFileWriter is used but it cannot write the PID file.

spring.pid.file

Location of the PID file to write (if ApplicationPidFileWriter is used).

spring.profiles.active

Comma-separated list of active profiles. Can be overridden by a command line switch.

spring.profiles.include

Unconditionally activate the specified comma-separated list of profiles (or list of profiles if using YAML).

spring.quartz.auto-startup

true

Whether to automatically start the scheduler after initialization.

spring.quartz.jdbc.comment-prefix

[#, --]

Prefixes for single-line comments in SQL initialization scripts.

spring.quartz.jdbc.initialize-schema

embedded

Database schema initialization mode.

spring.quartz.jdbc.schema

classpath:org/quartz/impl/jdbcjobstore/tables_@@platform@@.sql

Path to the SQL file to use to initialize the database schema.

spring.quartz.job-store-type

memory

Quartz job store type.

spring.quartz.overwrite-existing-jobs

false

Whether configured jobs should overwrite existing job definitions.

spring.quartz.properties.*

Additional Quartz Scheduler properties.

spring.quartz.scheduler-name

quartzScheduler

Name of the scheduler.

spring.quartz.startup-delay

0s

Delay after which the scheduler is started once initialization completes. Setting this property makes sense if no jobs should be run before the entire application has started up.

spring.quartz.wait-for-jobs-to-complete-on-shutdown

false

Whether to wait for running jobs to complete on shutdown.

spring.reactor.debug-agent.enabled

true

Whether the Reactor Debug Agent should be enabled when reactor-tools is present.

spring.task.execution.pool.allow-core-thread-timeout

true

Whether core threads are allowed to time out. This enables dynamic growing and shrinking of the pool.

spring.task.execution.pool.core-size

8

Core number of threads.

spring.task.execution.pool.keep-alive

60s

Time limit for which threads may remain idle before being terminated.

spring.task.execution.pool.max-size

Maximum allowed number of threads. If tasks are filling up the queue, the pool can expand up to that size to accommodate the load. Ignored if the queue is unbounded.

spring.task.execution.pool.queue-capacity

Queue capacity. An unbounded capacity does not increase the pool and therefore ignores the "max-size" property.

spring.task.execution.shutdown.await-termination

false

Whether the executor should wait for scheduled tasks to complete on shutdown.

spring.task.execution.shutdown.await-termination-period

Maximum time the executor should wait for remaining tasks to complete.

spring.task.execution.thread-name-prefix

task-

Prefix to use for the names of newly created threads.

spring.task.scheduling.pool.size

1

Maximum allowed number of threads.

spring.task.scheduling.shutdown.await-termination

false

Whether the executor should wait for scheduled tasks to complete on shutdown.

spring.task.scheduling.shutdown.await-termination-period

Maximum time the executor should wait for remaining tasks to complete.

spring.task.scheduling.thread-name-prefix

scheduling-

Prefix to use for the names of newly created threads.

trace

false

Enable trace logs.

10.A.2. Cache Properties
Key	Default Value	Description
spring.cache.cache-names

Comma-separated list of cache names to create if supported by the underlying cache manager. Usually, this disables the ability to create additional caches on-the-fly.

spring.cache.caffeine.spec

The spec to use to create caches. See CaffeineSpec for more details on the spec format.

spring.cache.couchbase.expiration

Entry expiration. By default the entries never expire. Note that this value is ultimately converted to seconds.

spring.cache.ehcache.config

The location of the configuration file to use to initialize EhCache.

spring.cache.infinispan.config

The location of the configuration file to use to initialize Infinispan.

spring.cache.jcache.config

The location of the configuration file to use to initialize the cache manager. The configuration file is dependent of the underlying cache implementation.

spring.cache.jcache.provider

Fully qualified name of the CachingProvider implementation to use to retrieve the JSR-107 compliant cache manager. Needed only if more than one JSR-107 implementation is available on the classpath.

spring.cache.redis.cache-null-values

true

Allow caching null values.

spring.cache.redis.enable-statistics

false

Whether to enable cache statistics.

spring.cache.redis.key-prefix

Key prefix.

spring.cache.redis.time-to-live

Entry expiration. By default the entries never expire.

spring.cache.redis.use-key-prefix

true

Whether to use the key prefix when writing to Redis.

spring.cache.type

Cache type. By default, auto-detected according to the environment.

10.A.3. Mail Properties
Key	Default Value	Description
spring.mail.default-encoding

UTF-8

Default MimeMessage encoding.

spring.mail.host

SMTP server host. For instance, `smtp.example.com`.

spring.mail.jndi-name

Session JNDI name. When set, takes precedence over other Session settings.

spring.mail.password

Login password of the SMTP server.

spring.mail.port

SMTP server port.

spring.mail.properties.*

Additional JavaMail Session properties.

spring.mail.protocol

smtp

Protocol used by the SMTP server.

spring.mail.test-connection

false

Whether to test that the mail server is available on startup.

spring.mail.username

Login user of the SMTP server.

spring.sendgrid.api-key

SendGrid API key.

spring.sendgrid.proxy.host

SendGrid proxy host.

spring.sendgrid.proxy.port

SendGrid proxy port.

10.A.4. JSON Properties
Key	Default Value	Description
spring.gson.date-format

Format to use when serializing Date objects.

spring.gson.disable-html-escaping

Whether to disable the escaping of HTML characters such as '<', '>', etc.

spring.gson.disable-inner-class-serialization

Whether to exclude inner classes during serialization.

spring.gson.enable-complex-map-key-serialization

Whether to enable serialization of complex map keys (i.e. non-primitives).

spring.gson.exclude-fields-without-expose-annotation

Whether to exclude all fields from consideration for serialization or deserialization that do not have the "Expose" annotation.

spring.gson.field-naming-policy

Naming policy that should be applied to an object's field during serialization and deserialization.

spring.gson.generate-non-executable-json

Whether to generate non executable JSON by prefixing the output with some special text.

spring.gson.lenient

Whether to be lenient about parsing JSON that doesn't conform to RFC 4627.

spring.gson.long-serialization-policy

Serialization policy for Long and long types.

spring.gson.pretty-printing

Whether to output serialized JSON that fits in a page for pretty printing.

spring.gson.serialize-nulls

Whether to serialize null fields.

spring.jackson.date-format

Date format string or a fully-qualified date format class name. For instance, `yyyy-MM-dd HH:mm:ss`.

spring.jackson.default-property-inclusion

Controls the inclusion of properties during serialization. Configured with one of the values in Jackson's JsonInclude.Include enumeration.

spring.jackson.deserialization.*

Jackson on/off features that affect the way Java objects are deserialized.

spring.jackson.generator.*

Jackson on/off features for generators.

spring.jackson.locale

Locale used for formatting.

spring.jackson.mapper.*

Jackson general purpose on/off features.

spring.jackson.parser.*

Jackson on/off features for parsers.

spring.jackson.property-naming-strategy

One of the constants on Jackson's PropertyNamingStrategy. Can also be a fully-qualified class name of a PropertyNamingStrategy subclass.

spring.jackson.serialization.*

Jackson on/off features that affect the way Java objects are serialized.

spring.jackson.time-zone

Time zone used when formatting dates. For instance, "America/Los_Angeles" or "GMT+10".

spring.jackson.visibility.*

Jackson visibility thresholds that can be used to limit which methods (and fields) are auto-detected.

10.A.5. Data Properties
Key	Default Value	Description
spring.couchbase.connection-string

Connection string used to locate the Couchbase cluster.

spring.couchbase.env.io.idle-http-connection-timeout

4500ms

Length of time an HTTP connection may remain idle before it is closed and removed from the pool.

spring.couchbase.env.io.max-endpoints

12

Maximum number of sockets per node.

spring.couchbase.env.io.min-endpoints

1

Minimum number of sockets per node.

spring.couchbase.env.ssl.enabled

Whether to enable SSL support. Enabled automatically if a "keyStore" is provided unless specified otherwise.

spring.couchbase.env.ssl.key-store

Path to the JVM key store that holds the certificates.

spring.couchbase.env.ssl.key-store-password

Password used to access the key store.

spring.couchbase.env.timeouts.analytics

75s

Timeout for the analytics service.

spring.couchbase.env.timeouts.connect

10s

Bucket connect timeout.

spring.couchbase.env.timeouts.disconnect

10s

Bucket disconnect timeout.

spring.couchbase.env.timeouts.key-value

2500ms

Timeout for operations on a specific key-value.

spring.couchbase.env.timeouts.key-value-durable

10s

Timeout for operations on a specific key-value with a durability level.

spring.couchbase.env.timeouts.management

75s

Timeout for the management operations.

spring.couchbase.env.timeouts.query

75s

N1QL query operations timeout.

spring.couchbase.env.timeouts.search

75s

Timeout for the search service.

spring.couchbase.env.timeouts.view

75s

Regular and geospatial view operations timeout.

spring.couchbase.password

Cluster password.

spring.couchbase.username

Cluster username.

spring.dao.exceptiontranslation.enabled

true

Whether to enable the PersistenceExceptionTranslationPostProcessor.

spring.data.cassandra.compression

none

Compression supported by the Cassandra binary protocol.

spring.data.cassandra.connection.connect-timeout

5s

Timeout to use when establishing driver connections.

spring.data.cassandra.connection.init-query-timeout

5s

Timeout to use for internal queries that run as part of the initialization process, just after a connection is opened.

spring.data.cassandra.contact-points

[127.0.0.1:9042]

Cluster node addresses in the form 'host:port', or a simple 'host' to use the configured port.

spring.data.cassandra.keyspace-name

Keyspace name to use.

spring.data.cassandra.local-datacenter

Datacenter that is considered "local". Contact points should be from this datacenter.

spring.data.cassandra.password

Login password of the server.

spring.data.cassandra.pool.heartbeat-interval

30s

Heartbeat interval after which a message is sent on an idle connection to make sure it's still alive.

spring.data.cassandra.pool.idle-timeout

5s

Idle timeout before an idle connection is removed.

spring.data.cassandra.port

9042

Port to use if a contact point does not specify one.

spring.data.cassandra.repositories.type

auto

Type of Cassandra repositories to enable.

spring.data.cassandra.request.consistency

Queries consistency level.

spring.data.cassandra.request.page-size

5000

How many rows will be retrieved simultaneously in a single network roundtrip.

spring.data.cassandra.request.serial-consistency

Queries serial consistency level.

spring.data.cassandra.request.throttler.drain-interval

10ms

How often the throttler attempts to dequeue requests. Set this high enough that each attempt will process multiple entries in the queue, but not delay requests too much.

spring.data.cassandra.request.throttler.max-concurrent-requests

10000

Maximum number of requests that are allowed to execute in parallel.

spring.data.cassandra.request.throttler.max-queue-size

10000

Maximum number of requests that can be enqueued when the throttling threshold is exceeded.

spring.data.cassandra.request.throttler.max-requests-per-second

10000

Maximum allowed request rate.

spring.data.cassandra.request.throttler.type

none

Request throttling type.

spring.data.cassandra.request.timeout

2s

How long the driver waits for a request to complete.

spring.data.cassandra.schema-action

none

Schema action to take at startup.

spring.data.cassandra.session-name

Name of the Cassandra session.

spring.data.cassandra.ssl

false

Enable SSL support.

spring.data.cassandra.username

Login user of the server.

spring.data.couchbase.auto-index

false

Automatically create views and indexes. Use the meta-data provided by "@ViewIndexed", "@N1qlPrimaryIndexed" and "@N1qlSecondaryIndexed".

spring.data.couchbase.bucket-name

Name of the bucket to connect to.

spring.data.couchbase.field-naming-strategy

Fully qualified name of the FieldNamingStrategy to use.

spring.data.couchbase.repositories.type

auto

Type of Couchbase repositories to enable.

spring.data.couchbase.scope-name

Name of the scope used for all collection access.

spring.data.couchbase.type-key

_class

Name of the field that stores the type information for complex types when using "MappingCouchbaseConverter".

spring.data.elasticsearch.client.reactive.connection-timeout

Connection timeout.

spring.data.elasticsearch.client.reactive.endpoints

Comma-separated list of the Elasticsearch endpoints to connect to.

spring.data.elasticsearch.client.reactive.max-in-memory-size

Limit on the number of bytes that can be buffered whenever the input stream needs to be aggregated.

spring.data.elasticsearch.client.reactive.password

Credentials password.

spring.data.elasticsearch.client.reactive.socket-timeout

Read and Write Socket timeout.

spring.data.elasticsearch.client.reactive.use-ssl

false

Whether the client should use SSL to connect to the endpoints.

spring.data.elasticsearch.client.reactive.username

Credentials username.

spring.data.elasticsearch.repositories.enabled

true

Whether to enable Elasticsearch repositories.

spring.data.jdbc.repositories.enabled

true

Whether to enable JDBC repositories.

spring.data.jpa.repositories.bootstrap-mode

default

Bootstrap mode for JPA repositories.

spring.data.jpa.repositories.enabled

true

Whether to enable JPA repositories.

spring.data.ldap.repositories.enabled

true

Whether to enable LDAP repositories.

spring.data.mongodb.authentication-database

Authentication database name.

spring.data.mongodb.auto-index-creation

Whether to enable auto-index creation.

spring.data.mongodb.database

Database name.

spring.data.mongodb.field-naming-strategy

Fully qualified name of the FieldNamingStrategy to use.

spring.data.mongodb.gridfs.bucket

GridFS bucket name.

spring.data.mongodb.gridfs.database

GridFS database name.

spring.data.mongodb.host

Mongo server host. Cannot be set with URI.

spring.data.mongodb.password

Login password of the mongo server. Cannot be set with URI.

spring.data.mongodb.port

Mongo server port. Cannot be set with URI.

spring.data.mongodb.replica-set-name

Required replica set name for the cluster. Cannot be set with URI.

spring.data.mongodb.repositories.type

auto

Type of Mongo repositories to enable.

spring.data.mongodb.uri

mongodb://localhost/test

Mongo database URI. Cannot be set with host, port, credentials and replica set name.

spring.data.mongodb.username

Login user of the mongo server. Cannot be set with URI.

spring.data.mongodb.uuid-representation

java-legacy

Representation to use when converting a UUID to a BSON binary value.

spring.data.neo4j.database

Database name to use. By default, the server decides the default database to use.

spring.data.neo4j.repositories.type

auto

Type of Neo4j repositories to enable.

spring.data.r2dbc.repositories.enabled

true

Whether to enable R2DBC repositories.

spring.data.redis.repositories.enabled

true

Whether to enable Redis repositories.

spring.data.rest.base-path

Base path to be used by Spring Data REST to expose repository resources.

spring.data.rest.default-media-type

Content type to use as a default when none is specified.

spring.data.rest.default-page-size

Default size of pages.

spring.data.rest.detection-strategy

default

Strategy to use to determine which repositories get exposed.

spring.data.rest.enable-enum-translation

Whether to enable enum value translation through the Spring Data REST default resource bundle.

spring.data.rest.limit-param-name

Name of the URL query string parameter that indicates how many results to return at once.

spring.data.rest.max-page-size

Maximum size of pages.

spring.data.rest.page-param-name

Name of the URL query string parameter that indicates what page to return.

spring.data.rest.return-body-on-create

Whether to return a response body after creating an entity.

spring.data.rest.return-body-on-update

Whether to return a response body after updating an entity.

spring.data.rest.sort-param-name

Name of the URL query string parameter that indicates what direction to sort results.

spring.data.solr.host

http://127.0.0.1:8983/solr

Solr host. Ignored if "zk-host" is set.

spring.data.solr.zk-host

ZooKeeper host address in the form HOST:PORT.

spring.data.web.pageable.default-page-size

20

Default page size.

spring.data.web.pageable.max-page-size

2000

Maximum page size to be accepted.

spring.data.web.pageable.one-indexed-parameters

false

Whether to expose and assume 1-based page number indexes. Defaults to "false", meaning a page number of 0 in the request equals the first page.

spring.data.web.pageable.page-parameter

page

Page index parameter name.

spring.data.web.pageable.prefix

General prefix to be prepended to the page number and page size parameters.

spring.data.web.pageable.qualifier-delimiter

_

Delimiter to be used between the qualifier and the actual page number and size properties.

spring.data.web.pageable.size-parameter

size

Page size parameter name.

spring.data.web.sort.sort-parameter

sort

Sort parameter name.

spring.datasource.continue-on-error

false

Whether to stop if an error occurs while initializing the database.

spring.datasource.data

Data (DML) script resource references.

spring.datasource.data-password

Password of the database to execute DML scripts (if different).

spring.datasource.data-username

Username of the database to execute DML scripts (if different).

spring.datasource.dbcp2.abandoned-usage-tracking
spring.datasource.dbcp2.access-to-underlying-connection-allowed
spring.datasource.dbcp2.auto-commit-on-return
spring.datasource.dbcp2.cache-state
spring.datasource.dbcp2.clear-statement-pool-on-return
spring.datasource.dbcp2.connection-factory-class-name
spring.datasource.dbcp2.connection-init-sqls
spring.datasource.dbcp2.default-auto-commit
spring.datasource.dbcp2.default-catalog
spring.datasource.dbcp2.default-query-timeout
spring.datasource.dbcp2.default-read-only
spring.datasource.dbcp2.default-schema
spring.datasource.dbcp2.default-transaction-isolation
spring.datasource.dbcp2.disconnection-sql-codes
spring.datasource.dbcp2.driver
spring.datasource.dbcp2.driver-class-name
spring.datasource.dbcp2.eviction-policy-class-name
spring.datasource.dbcp2.fast-fail-validation
spring.datasource.dbcp2.initial-size
spring.datasource.dbcp2.jmx-name
spring.datasource.dbcp2.lifo
spring.datasource.dbcp2.log-abandoned
spring.datasource.dbcp2.log-expired-connections
spring.datasource.dbcp2.login-timeout
spring.datasource.dbcp2.max-conn-lifetime-millis
spring.datasource.dbcp2.max-idle
spring.datasource.dbcp2.max-open-prepared-statements
spring.datasource.dbcp2.max-total
spring.datasource.dbcp2.max-wait-millis
spring.datasource.dbcp2.min-evictable-idle-time-millis
spring.datasource.dbcp2.min-idle
spring.datasource.dbcp2.num-tests-per-eviction-run
spring.datasource.dbcp2.password
spring.datasource.dbcp2.pool-prepared-statements
spring.datasource.dbcp2.remove-abandoned-on-borrow
spring.datasource.dbcp2.remove-abandoned-on-maintenance
spring.datasource.dbcp2.remove-abandoned-timeout
spring.datasource.dbcp2.rollback-on-return
spring.datasource.dbcp2.soft-min-evictable-idle-time-millis
spring.datasource.dbcp2.test-on-borrow
spring.datasource.dbcp2.test-on-create
spring.datasource.dbcp2.test-on-return
spring.datasource.dbcp2.test-while-idle
spring.datasource.dbcp2.time-between-eviction-runs-millis
spring.datasource.dbcp2.url
spring.datasource.dbcp2.username
spring.datasource.dbcp2.validation-query
spring.datasource.dbcp2.validation-query-timeout

Commons DBCP2 specific settings bound to an instance of DBCP2's BasicDataSource

spring.datasource.driver-class-name

Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.

spring.datasource.generate-unique-name

true

Whether to generate a random datasource name.

spring.datasource.hikari.allow-pool-suspension
spring.datasource.hikari.auto-commit
spring.datasource.hikari.catalog
spring.datasource.hikari.connection-init-sql
spring.datasource.hikari.connection-test-query
spring.datasource.hikari.connection-timeout
spring.datasource.hikari.data-source-class-name
spring.datasource.hikari.data-source-j-n-d-i
spring.datasource.hikari.data-source-properties
spring.datasource.hikari.driver-class-name
spring.datasource.hikari.exception-override-class-name
spring.datasource.hikari.health-check-properties
spring.datasource.hikari.health-check-registry
spring.datasource.hikari.idle-timeout
spring.datasource.hikari.initialization-fail-timeout
spring.datasource.hikari.isolate-internal-queries
spring.datasource.hikari.jdbc-url
spring.datasource.hikari.leak-detection-threshold
spring.datasource.hikari.login-timeout
spring.datasource.hikari.max-lifetime
spring.datasource.hikari.maximum-pool-size
spring.datasource.hikari.metric-registry
spring.datasource.hikari.metrics-tracker-factory
spring.datasource.hikari.minimum-idle
spring.datasource.hikari.password
spring.datasource.hikari.pool-name
spring.datasource.hikari.read-only
spring.datasource.hikari.register-mbeans
spring.datasource.hikari.scheduled-executor
spring.datasource.hikari.schema
spring.datasource.hikari.transaction-isolation
spring.datasource.hikari.username
spring.datasource.hikari.validation-timeout

Hikari specific settings bound to an instance of Hikari's HikariDataSource

spring.datasource.initialization-mode

embedded

Mode to apply when determining if DataSource initialization should be performed using the available DDL and DML scripts.

spring.datasource.jndi-name

JNDI location of the datasource. Class, url, username and password are ignored when set.

spring.datasource.name

Name of the datasource. Default to "testdb" when using an embedded database.

spring.datasource.oracleucp.abandoned-connection-timeout
spring.datasource.oracleucp.connection-factory-class-name
spring.datasource.oracleucp.connection-factory-properties
spring.datasource.oracleucp.connection-harvest-max-count
spring.datasource.oracleucp.connection-harvest-trigger-count
spring.datasource.oracleucp.connection-labeling-high-cost
spring.datasource.oracleucp.connection-pool-name
spring.datasource.oracleucp.connection-properties
spring.datasource.oracleucp.connection-repurpose-threshold
spring.datasource.oracleucp.connection-validation-timeout
spring.datasource.oracleucp.connection-wait-timeout
spring.datasource.oracleucp.data-source-name
spring.datasource.oracleucp.database-name
spring.datasource.oracleucp.description
spring.datasource.oracleucp.fast-connection-failover-enabled
spring.datasource.oracleucp.high-cost-connection-reuse-threshold
spring.datasource.oracleucp.inactive-connection-timeout
spring.datasource.oracleucp.initial-pool-size
spring.datasource.oracleucp.login-timeout
spring.datasource.oracleucp.max-connection-reuse-count
spring.datasource.oracleucp.max-connection-reuse-time
spring.datasource.oracleucp.max-connections-per-shard
spring.datasource.oracleucp.max-idle-time
spring.datasource.oracleucp.max-pool-size
spring.datasource.oracleucp.max-statements
spring.datasource.oracleucp.min-pool-size
spring.datasource.oracleucp.network-protocol
spring.datasource.oracleucp.o-n-s-configuration
spring.datasource.oracleucp.password
spring.datasource.oracleucp.pdb-roles
spring.datasource.oracleucp.port-number
spring.datasource.oracleucp.property-cycle
spring.datasource.oracleucp.query-timeout
spring.datasource.oracleucp.role-name
spring.datasource.oracleucp.s-q-l-for-validate-connection
spring.datasource.oracleucp.seconds-to-trust-idle-connection
spring.datasource.oracleucp.server-name
spring.datasource.oracleucp.sharding-mode
spring.datasource.oracleucp.time-to-live-connection-timeout
spring.datasource.oracleucp.timeout-check-interval
spring.datasource.oracleucp.u-r-l
spring.datasource.oracleucp.user
spring.datasource.oracleucp.validate-connection-on-borrow

Oracle UCP specific settings bound to an instance of Oracle UCP's PoolDataSource

spring.datasource.password

Login password of the database.

spring.datasource.platform

all

Platform to use in the DDL or DML scripts (such as schema-${platform}.sql or data-${platform}.sql).

spring.datasource.schema

Schema (DDL) script resource references.

spring.datasource.schema-password

Password of the database to execute DDL scripts (if different).

spring.datasource.schema-username

Username of the database to execute DDL scripts (if different).

spring.datasource.separator

;

Statement separator in SQL initialization scripts.

spring.datasource.sql-script-encoding

SQL scripts encoding.

spring.datasource.tomcat.abandon-when-percentage-full
spring.datasource.tomcat.access-to-underlying-connection-allowed
spring.datasource.tomcat.alternate-username-allowed
spring.datasource.tomcat.commit-on-return
spring.datasource.tomcat.connection-properties
spring.datasource.tomcat.data-source
spring.datasource.tomcat.data-source-j-n-d-i
spring.datasource.tomcat.db-properties
spring.datasource.tomcat.default-auto-commit
spring.datasource.tomcat.default-catalog
spring.datasource.tomcat.default-read-only
spring.datasource.tomcat.default-transaction-isolation
spring.datasource.tomcat.driver-class-name
spring.datasource.tomcat.fair-queue
spring.datasource.tomcat.ignore-exception-on-pre-load
spring.datasource.tomcat.init-s-q-l
spring.datasource.tomcat.initial-size
spring.datasource.tomcat.jdbc-interceptors
spring.datasource.tomcat.jmx-enabled
spring.datasource.tomcat.log-abandoned
spring.datasource.tomcat.log-validation-errors
spring.datasource.tomcat.login-timeout
spring.datasource.tomcat.max-active
spring.datasource.tomcat.max-age
spring.datasource.tomcat.max-idle
spring.datasource.tomcat.max-wait
spring.datasource.tomcat.min-evictable-idle-time-millis
spring.datasource.tomcat.min-idle
spring.datasource.tomcat.name
spring.datasource.tomcat.num-tests-per-eviction-run
spring.datasource.tomcat.password
spring.datasource.tomcat.propagate-interrupt-state
spring.datasource.tomcat.remove-abandoned
spring.datasource.tomcat.remove-abandoned-timeout
spring.datasource.tomcat.rollback-on-return
spring.datasource.tomcat.suspect-timeout
spring.datasource.tomcat.test-on-borrow
spring.datasource.tomcat.test-on-connect
spring.datasource.tomcat.test-on-return
spring.datasource.tomcat.test-while-idle
spring.datasource.tomcat.time-between-eviction-runs-millis
spring.datasource.tomcat.url
spring.datasource.tomcat.use-disposable-connection-facade
spring.datasource.tomcat.use-equals
spring.datasource.tomcat.use-lock
spring.datasource.tomcat.use-statement-facade
spring.datasource.tomcat.username
spring.datasource.tomcat.validation-interval
spring.datasource.tomcat.validation-query
spring.datasource.tomcat.validation-query-timeout
spring.datasource.tomcat.validator-class-name

Tomcat datasource specific settings bound to an instance of Tomcat JDBC's DataSource

spring.datasource.type

Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.

spring.datasource.url

JDBC URL of the database.

spring.datasource.username

Login username of the database.

spring.datasource.xa.data-source-class-name

XA datasource fully qualified name.

spring.datasource.xa.properties.*

Properties to pass to the XA data source.

spring.elasticsearch.rest.connection-timeout

1s

Connection timeout.

spring.elasticsearch.rest.password

Credentials password.

spring.elasticsearch.rest.read-timeout

30s

Read timeout.

spring.elasticsearch.rest.uris

[http://localhost:9200]

Comma-separated list of the Elasticsearch instances to use.

spring.elasticsearch.rest.username

Credentials username.

spring.h2.console.enabled

false

Whether to enable the console.

spring.h2.console.path

/h2-console

Path at which the console is available.

spring.h2.console.settings.trace

false

Whether to enable trace output.

spring.h2.console.settings.web-admin-password

Password to access preferences and tools of H2 Console.

spring.h2.console.settings.web-allow-others

false

Whether to enable remote access.

spring.influx.password

Login password.

spring.influx.url

URL of the InfluxDB instance to which to connect.

spring.influx.user

Login user.

spring.jdbc.template.fetch-size

-1

Number of rows that should be fetched from the database when more rows are needed. Use -1 to use the JDBC driver's default configuration.

spring.jdbc.template.max-rows

-1

Maximum number of rows. Use -1 to use the JDBC driver's default configuration.

spring.jdbc.template.query-timeout

Query timeout. Default is to use the JDBC driver's default configuration. If a duration suffix is not specified, seconds will be used.

spring.jooq.sql-dialect

SQL dialect to use. Auto-detected by default.

spring.jpa.database

Target database to operate on, auto-detected by default. Can be alternatively set using the "databasePlatform" property.

spring.jpa.database-platform

Name of the target database to operate on, auto-detected by default. Can be alternatively set using the "Database" enum.

spring.jpa.generate-ddl

false

Whether to initialize the schema on startup.

spring.jpa.hibernate.ddl-auto

DDL mode. This is actually a shortcut for the "hibernate.hbm2ddl.auto" property. Defaults to "create-drop" when using an embedded database and no schema manager was detected. Otherwise, defaults to "none".

spring.jpa.hibernate.naming.implicit-strategy

Fully qualified name of the implicit naming strategy.

spring.jpa.hibernate.naming.physical-strategy

Fully qualified name of the physical naming strategy.

spring.jpa.hibernate.use-new-id-generator-mappings

Whether to use Hibernate's newer IdentifierGenerator for AUTO, TABLE and SEQUENCE. This is actually a shortcut for the "hibernate.id.new_generator_mappings" property. When not specified will default to "true".

spring.jpa.mapping-resources

Mapping resources (equivalent to "mapping-file" entries in persistence.xml).

spring.jpa.open-in-view

true

Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.

spring.jpa.properties.*

Additional native properties to set on the JPA provider.

spring.jpa.show-sql

false

Whether to enable logging of SQL statements.

spring.ldap.anonymous-read-only

Whether read-only operations should use an anonymous environment. Disabled by default unless a username is set.

spring.ldap.base

Base suffix from which all operations should originate.

spring.ldap.base-environment.*

LDAP specification settings.

spring.ldap.embedded.base-dn

List of base DNs.

spring.ldap.embedded.credential.password

Embedded LDAP password.

spring.ldap.embedded.credential.username

Embedded LDAP username.

spring.ldap.embedded.ldif

classpath:schema.ldif

Schema (LDIF) script resource reference.

spring.ldap.embedded.port

0

Embedded LDAP port.

spring.ldap.embedded.validation.enabled

true

Whether to enable LDAP schema validation.

spring.ldap.embedded.validation.schema

Path to the custom schema.

spring.ldap.password

Login password of the server.

spring.ldap.template.ignore-name-not-found-exception

false

Whether NameNotFoundException should be ignored in searches via the LdapTemplate.

spring.ldap.template.ignore-partial-result-exception

false

Whether PartialResultException should be ignored in searches via the LdapTemplate.

spring.ldap.template.ignore-size-limit-exceeded-exception

true

Whether SizeLimitExceededException should be ignored in searches via the LdapTemplate.

spring.ldap.urls

LDAP URLs of the server.

spring.ldap.username

Login username of the server.

spring.mongodb.embedded.features

[sync_delay]

Comma-separated list of features to enable. Uses the defaults of the configured version by default.

spring.mongodb.embedded.storage.database-dir

Directory used for data storage.

spring.mongodb.embedded.storage.oplog-size

Maximum size of the oplog.

spring.mongodb.embedded.storage.repl-set-name

Name of the replica set.

spring.mongodb.embedded.version

3.5.5

Version of Mongo to use.

spring.neo4j.authentication.kerberos-ticket

Kerberos ticket for connecting to the database. Mutual exclusive with a given username.

spring.neo4j.authentication.password

Login password of the server.

spring.neo4j.authentication.realm

Realm to connect to.

spring.neo4j.authentication.username

Login user of the server.

spring.neo4j.connection-timeout

30s

Timeout for borrowing connections from the pool.

spring.neo4j.max-transaction-retry-time

30s

Maximum time transactions are allowed to retry.

spring.neo4j.pool.connection-acquisition-timeout

60s

Acquisition of new connections will be attempted for at most configured timeout.

spring.neo4j.pool.idle-time-before-connection-test

Pooled connections that have been idle in the pool for longer than this threshold will be tested before they are used again.

spring.neo4j.pool.log-leaked-sessions

false

Whether to log leaked sessions.

spring.neo4j.pool.max-connection-lifetime

1h

Pooled connections older than this threshold will be closed and removed from the pool.

spring.neo4j.pool.max-connection-pool-size

100

Maximum amount of connections in the connection pool towards a single database.

spring.neo4j.pool.metrics-enabled

false

Whether to enable metrics.

spring.neo4j.security.cert-file

Path to the file that holds the trusted certificates.

spring.neo4j.security.encrypted

false

Whether the driver should use encrypted traffic.

spring.neo4j.security.hostname-verification-enabled

true

Whether hostname verification is required.

spring.neo4j.security.trust-strategy

trust-system-ca-signed-certificates

Trust strategy to use.

spring.neo4j.uri

bolt://localhost:7687

URI used by the driver.

spring.r2dbc.generate-unique-name

false

Whether to generate a random database name. Ignore any configured name when enabled.

spring.r2dbc.name

Database name. Set if no name is specified in the url. Default to "testdb" when using an embedded database.

spring.r2dbc.password

Login password of the database. Set if no password is specified in the url.

spring.r2dbc.pool.enabled

Whether pooling is enabled. Enabled automatically if "r2dbc-pool" is on the classpath.

spring.r2dbc.pool.initial-size

10

Initial connection pool size.

spring.r2dbc.pool.max-acquire-time

Maximum time to acquire a connection from the pool. By default, wait indefinitely.

spring.r2dbc.pool.max-create-connection-time

Maximum time to wait to create a new connection. By default, wait indefinitely.

spring.r2dbc.pool.max-idle-time

30m

Maximum amount of time that a connection is allowed to sit idle in the pool.

spring.r2dbc.pool.max-life-time

Maximum lifetime of a connection in the pool. By default, connections have an infinite lifetime.

spring.r2dbc.pool.max-size

10

Maximal connection pool size.

spring.r2dbc.pool.validation-depth

local

Validation depth.

spring.r2dbc.pool.validation-query

Validation query.

spring.r2dbc.properties.*

Additional R2DBC options.

spring.r2dbc.url

R2DBC URL of the database. database name, username, password and pooling options specified in the url take precedence over individual options.

spring.r2dbc.username

Login username of the database. Set if no username is specified in the url.

spring.redis.client-name

Client name to be set on connections with CLIENT SETNAME.

spring.redis.client-type

Type of client to use. By default, auto-detected according to the classpath.

spring.redis.cluster.max-redirects

Maximum number of redirects to follow when executing commands across the cluster.

spring.redis.cluster.nodes

Comma-separated list of "host:port" pairs to bootstrap from. This represents an "initial" list of cluster nodes and is required to have at least one entry.

spring.redis.connect-timeout

Connection timeout.

spring.redis.database

0

Database index used by the connection factory.

spring.redis.host

localhost

Redis server host.

spring.redis.jedis.pool.max-active

8

Maximum number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.

spring.redis.jedis.pool.max-idle

8

Maximum number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.

spring.redis.jedis.pool.max-wait

-1ms

Maximum amount of time a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.

spring.redis.jedis.pool.min-idle

0

Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if both it and time between eviction runs are positive.

spring.redis.jedis.pool.time-between-eviction-runs

Time between runs of the idle object evictor thread. When positive, the idle object evictor thread starts, otherwise no idle object eviction is performed.

spring.redis.lettuce.cluster.refresh.adaptive

false

Whether adaptive topology refreshing using all available refresh triggers should be used.

spring.redis.lettuce.cluster.refresh.dynamic-refresh-sources

true

Whether to discover and query all cluster nodes for obtaining the cluster topology. When set to false, only the initial seed nodes are used as sources for topology discovery.

spring.redis.lettuce.cluster.refresh.period

Cluster topology refresh period.

spring.redis.lettuce.pool.max-active

8

Maximum number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.

spring.redis.lettuce.pool.max-idle

8

Maximum number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.

spring.redis.lettuce.pool.max-wait

-1ms

Maximum amount of time a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.

spring.redis.lettuce.pool.min-idle

0

Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if both it and time between eviction runs are positive.

spring.redis.lettuce.pool.time-between-eviction-runs

Time between runs of the idle object evictor thread. When positive, the idle object evictor thread starts, otherwise no idle object eviction is performed.

spring.redis.lettuce.shutdown-timeout

100ms

Shutdown timeout.

spring.redis.password

Login password of the redis server.

spring.redis.port

6379

Redis server port.

spring.redis.sentinel.master

Name of the Redis server.

spring.redis.sentinel.nodes

Comma-separated list of "host:port" pairs.

spring.redis.sentinel.password

Password for authenticating with sentinel(s).

spring.redis.ssl

false

Whether to enable SSL support.

spring.redis.timeout

Read timeout.

spring.redis.url

Connection URL. Overrides host, port, and password. User is ignored. Example: redis://user:password@example.com:6379

spring.redis.username

Login username of the redis server.

10.A.6. Transaction Properties
Key	Default Value	Description
spring.jta.atomikos.connectionfactory.borrow-connection-timeout

30

Timeout, in seconds, for borrowing connections from the pool.

spring.jta.atomikos.connectionfactory.ignore-session-transacted-flag

true

Whether to ignore the transacted flag when creating session.

spring.jta.atomikos.connectionfactory.local-transaction-mode

false

Whether local transactions are desired.

spring.jta.atomikos.connectionfactory.maintenance-interval

60

Time, in seconds, between runs of the pool's maintenance thread.

spring.jta.atomikos.connectionfactory.max-idle-time

60

Time, in seconds, after which connections are cleaned up from the pool.

spring.jta.atomikos.connectionfactory.max-lifetime

0

Time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.

spring.jta.atomikos.connectionfactory.max-pool-size

1

Maximum size of the pool.

spring.jta.atomikos.connectionfactory.min-pool-size

1

Minimum size of the pool.

spring.jta.atomikos.connectionfactory.reap-timeout

0

Reap timeout, in seconds, for borrowed connections. 0 denotes no limit.

spring.jta.atomikos.connectionfactory.unique-resource-name

jmsConnectionFactory

Unique name used to identify the resource during recovery.

spring.jta.atomikos.connectionfactory.xa-connection-factory-class-name

Vendor-specific implementation of XAConnectionFactory.

spring.jta.atomikos.connectionfactory.xa-properties

Vendor-specific XA properties.

spring.jta.atomikos.datasource.borrow-connection-timeout

30

Timeout, in seconds, for borrowing connections from the pool.

spring.jta.atomikos.datasource.concurrent-connection-validation

true

Whether to use concurrent connection validation.

spring.jta.atomikos.datasource.default-isolation-level

Default isolation level of connections provided by the pool.

spring.jta.atomikos.datasource.login-timeout

0

Timeout, in seconds, for establishing a database connection.

spring.jta.atomikos.datasource.maintenance-interval

60

Time, in seconds, between runs of the pool's maintenance thread.

spring.jta.atomikos.datasource.max-idle-time

60

Time, in seconds, after which connections are cleaned up from the pool.

spring.jta.atomikos.datasource.max-lifetime

0

Time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.

spring.jta.atomikos.datasource.max-pool-size

1

Maximum size of the pool.

spring.jta.atomikos.datasource.min-pool-size

1

Minimum size of the pool.

spring.jta.atomikos.datasource.reap-timeout

0

Reap timeout, in seconds, for borrowed connections. 0 denotes no limit.

spring.jta.atomikos.datasource.test-query

SQL query or statement used to validate a connection before returning it.

spring.jta.atomikos.datasource.unique-resource-name

dataSource

Unique name used to identify the resource during recovery.

spring.jta.atomikos.datasource.xa-data-source-class-name

Vendor-specific implementation of XAConnectionFactory.

spring.jta.atomikos.datasource.xa-properties

Vendor-specific XA properties.

spring.jta.atomikos.properties.allow-sub-transactions

true

Specify whether sub-transactions are allowed.

spring.jta.atomikos.properties.checkpoint-interval

500

Interval between checkpoints, expressed as the number of log writes between two checkpoints. A checkpoint reduces the log file size at the expense of adding some overhead in the runtime.

spring.jta.atomikos.properties.default-jta-timeout

10000ms

Default timeout for JTA transactions.

spring.jta.atomikos.properties.default-max-wait-time-on-shutdown

How long should normal shutdown (no-force) wait for transactions to complete.

spring.jta.atomikos.properties.enable-logging

true

Whether to enable disk logging.

spring.jta.atomikos.properties.force-shutdown-on-vm-exit

false

Whether a VM shutdown should trigger forced shutdown of the transaction core.

spring.jta.atomikos.properties.log-base-dir

Directory in which the log files should be stored. Defaults to the current working directory.

spring.jta.atomikos.properties.log-base-name

tmlog

Transactions log file base name.

spring.jta.atomikos.properties.max-actives

50

Maximum number of active transactions.

spring.jta.atomikos.properties.max-timeout

300000ms

Maximum timeout that can be allowed for transactions.

spring.jta.atomikos.properties.recovery.delay

10000ms

Delay between two recovery scans.

spring.jta.atomikos.properties.recovery.forget-orphaned-log-entries-delay

86400000ms

Delay after which recovery can cleanup pending ('orphaned') log entries.

spring.jta.atomikos.properties.recovery.max-retries

5

Number of retry attempts to commit the transaction before throwing an exception.

spring.jta.atomikos.properties.recovery.retry-interval

10000ms

Delay between retry attempts.

spring.jta.atomikos.properties.serial-jta-transactions

true

Whether sub-transactions should be joined when possible.

spring.jta.atomikos.properties.service

Transaction manager implementation that should be started.

spring.jta.atomikos.properties.threaded-two-phase-commit

false

Whether to use different (and concurrent) threads for two-phase commit on the participating resources.

spring.jta.atomikos.properties.transaction-manager-unique-name

The transaction manager's unique name. Defaults to the machine's IP address. If you plan to run more than one transaction manager against one database you must set this property to a unique value.

spring.jta.bitronix.connectionfactory.acquire-increment

1

Number of connections to create when growing the pool.

spring.jta.bitronix.connectionfactory.acquisition-interval

1

Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.

spring.jta.bitronix.connectionfactory.acquisition-timeout

30

Timeout, in seconds, for acquiring connections from the pool.

spring.jta.bitronix.connectionfactory.allow-local-transactions

false

Whether the transaction manager should allow mixing XA and non-XA transactions.

spring.jta.bitronix.connectionfactory.apply-transaction-timeout

false

Whether the transaction timeout should be set on the XAResource when it is enlisted.

spring.jta.bitronix.connectionfactory.automatic-enlisting-enabled

true

Whether resources should be enlisted and delisted automatically.

spring.jta.bitronix.connectionfactory.cache-producers-consumers

true

Whether producers and consumers should be cached.

spring.jta.bitronix.connectionfactory.class-name

Underlying implementation class name of the XA resource.

spring.jta.bitronix.connectionfactory.defer-connection-release

true

Whether the provider can run many transactions on the same connection and supports transaction interleaving.

spring.jta.bitronix.connectionfactory.disabled

false

Whether this resource is disabled, meaning it's temporarily forbidden to acquire a connection from its pool.

spring.jta.bitronix.connectionfactory.driver-properties

Properties that should be set on the underlying implementation.

spring.jta.bitronix.connectionfactory.failed

spring.jta.bitronix.connectionfactory.ignore-recovery-failures

false

Whether recovery failures should be ignored.

spring.jta.bitronix.connectionfactory.max-idle-time

60

Time, in seconds, after which connections are cleaned up from the pool.

spring.jta.bitronix.connectionfactory.max-pool-size

0

Maximum size of the pool. 0 denotes no limit.

spring.jta.bitronix.connectionfactory.min-pool-size

0

Minimum size of the pool.

spring.jta.bitronix.connectionfactory.password

Password to use to connect to the JMS provider.

spring.jta.bitronix.connectionfactory.share-transaction-connections

false

Whether connections in the ACCESSIBLE state can be shared within the context of a transaction.

spring.jta.bitronix.connectionfactory.test-connections

false

Whether connections should be tested when acquired from the pool.

spring.jta.bitronix.connectionfactory.two-pc-ordering-position

1

Position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).

spring.jta.bitronix.connectionfactory.unique-name

jmsConnectionFactory

Unique name used to identify the resource during recovery.

spring.jta.bitronix.connectionfactory.use-tm-join

true

Whether TMJOIN should be used when starting XAResources.

spring.jta.bitronix.connectionfactory.user

User to use to connect to the JMS provider.

spring.jta.bitronix.datasource.acquire-increment

1

Number of connections to create when growing the pool.

spring.jta.bitronix.datasource.acquisition-interval

1

Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.

spring.jta.bitronix.datasource.acquisition-timeout

30

Timeout, in seconds, for acquiring connections from the pool.

spring.jta.bitronix.datasource.allow-local-transactions

false

Whether the transaction manager should allow mixing XA and non-XA transactions.

spring.jta.bitronix.datasource.apply-transaction-timeout

false

Whether the transaction timeout should be set on the XAResource when it is enlisted.

spring.jta.bitronix.datasource.automatic-enlisting-enabled

true

Whether resources should be enlisted and delisted automatically.

spring.jta.bitronix.datasource.class-name

Underlying implementation class name of the XA resource.

spring.jta.bitronix.datasource.cursor-holdability

Default cursor holdability for connections.

spring.jta.bitronix.datasource.defer-connection-release

true

Whether the database can run many transactions on the same connection and supports transaction interleaving.

spring.jta.bitronix.datasource.disabled

false

Whether this resource is disabled, meaning it's temporarily forbidden to acquire a connection from its pool.

spring.jta.bitronix.datasource.driver-properties

Properties that should be set on the underlying implementation.

spring.jta.bitronix.datasource.enable-jdbc4-connection-test

false

Whether Connection.isValid() is called when acquiring a connection from the pool.

spring.jta.bitronix.datasource.failed

spring.jta.bitronix.datasource.ignore-recovery-failures

false

Whether recovery failures should be ignored.

spring.jta.bitronix.datasource.isolation-level

Default isolation level for connections.

spring.jta.bitronix.datasource.local-auto-commit

Default auto-commit mode for local transactions.

spring.jta.bitronix.datasource.login-timeout

Timeout, in seconds, for establishing a database connection.

spring.jta.bitronix.datasource.max-idle-time

60

Time, in seconds, after which connections are cleaned up from the pool.

spring.jta.bitronix.datasource.max-pool-size

0

Maximum size of the pool. 0 denotes no limit.

spring.jta.bitronix.datasource.min-pool-size

0

Minimum size of the pool.

spring.jta.bitronix.datasource.prepared-statement-cache-size

0

Target size of the prepared statement cache. 0 disables the cache.

spring.jta.bitronix.datasource.share-transaction-connections

false

Whether connections in the ACCESSIBLE state can be shared within the context of a transaction.

spring.jta.bitronix.datasource.test-query

SQL query or statement used to validate a connection before returning it.

spring.jta.bitronix.datasource.two-pc-ordering-position

1

Position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, and always last is Integer.MAX_VALUE).

spring.jta.bitronix.datasource.unique-name

dataSource

Unique name used to identify the resource during recovery.

spring.jta.bitronix.datasource.use-tm-join

true

Whether TMJOIN should be used when starting XAResources.

spring.jta.enabled

true

Whether to enable JTA support.

spring.jta.log-dir

Transaction logs directory.

spring.jta.transaction-manager-id

Transaction manager unique identifier.

spring.transaction.default-timeout

Default transaction timeout. If a duration suffix is not specified, seconds will be used.

spring.transaction.rollback-on-commit-failure

Whether to roll back on commit failures.

10.A.7. Data Migration Properties
Key	Default Value	Description
spring.flyway.baseline-description

<< Flyway Baseline >>

Description to tag an existing schema with when applying a baseline.

spring.flyway.baseline-on-migrate

false

Whether to automatically call baseline when migrating a non-empty schema.

spring.flyway.baseline-version

1

Version to tag an existing schema with when executing baseline.

spring.flyway.batch

Whether to batch SQL statements when executing them. Requires Flyway Teams.

spring.flyway.check-location

true

Whether to check that migration scripts location exists.

spring.flyway.cherry-pick

Migrations that Flyway should consider when migrating or undoing. When empty all available migrations are considered. Requires Flyway Teams.

spring.flyway.clean-disabled

false

Whether to disable cleaning of the database.

spring.flyway.clean-on-validation-error

false

Whether to automatically call clean when a validation error occurs.

spring.flyway.connect-retries

0

Maximum number of retries when attempting to connect to the database.

spring.flyway.create-schemas

true

Whether Flyway should attempt to create the schemas specified in the schemas property.

spring.flyway.default-schema

Default schema name managed by Flyway (case-sensitive).

spring.flyway.enabled

true

Whether to enable flyway.

spring.flyway.encoding

UTF-8

Encoding of SQL migrations.

spring.flyway.error-overrides

Rules for the built-in error handling to override specific SQL states and error codes. Requires Flyway Teams.

spring.flyway.group

false

Whether to group all pending migrations together in the same transaction when applying them.

spring.flyway.ignore-future-migrations

true

Whether to ignore future migrations when reading the schema history table.

spring.flyway.ignore-ignored-migrations

false

Whether to ignore ignored migrations when reading the schema history table.

spring.flyway.ignore-missing-migrations

false

Whether to ignore missing migrations when reading the schema history table.

spring.flyway.ignore-pending-migrations

false

Whether to ignore pending migrations when reading the schema history table.

spring.flyway.init-sqls

SQL statements to execute to initialize a connection immediately after obtaining it.

spring.flyway.installed-by

Username recorded in the schema history table as having applied the migration.

spring.flyway.jdbc-properties.*

Properties to pass to the JDBC driver. Requires Flyway Teams.

spring.flyway.license-key

Licence key for Flyway Teams.

spring.flyway.locations

[classpath:db/migration]

Locations of migrations scripts. Can contain the special "{vendor}" placeholder to use vendor-specific locations.

spring.flyway.lock-retry-count

50

Maximum number of retries when trying to obtain a lock.

spring.flyway.mixed

false

Whether to allow mixing transactional and non-transactional statements within the same migration.

spring.flyway.oracle-kerberos-cache-file

Path of the Oracle Kerberos cache file. Requires Flyway Teams.

spring.flyway.oracle-kerberos-config-file

Path of the Oracle Kerberos config file. Requires Flyway Teams.

spring.flyway.oracle-sqlplus

Whether to enable support for Oracle SQL*Plus commands. Requires Flyway Teams.

spring.flyway.oracle-sqlplus-warn

Whether to issue a warning rather than an error when a not-yet-supported Oracle SQL*Plus statement is encountered. Requires Flyway Teams.

spring.flyway.out-of-order

false

Whether to allow migrations to be run out of order.

spring.flyway.output-query-results

Whether Flyway should output a table with the results of queries when executing migrations. Requires Flyway Teams.

spring.flyway.password

Login password of the database to migrate.

spring.flyway.placeholder-prefix

${

Prefix of placeholders in migration scripts.

spring.flyway.placeholder-replacement

true

Perform placeholder replacement in migration scripts.

spring.flyway.placeholder-suffix

}

Suffix of placeholders in migration scripts.

spring.flyway.placeholders.*

Placeholders and their replacements to apply to sql migration scripts.

spring.flyway.repeatable-sql-migration-prefix

R

File name prefix for repeatable SQL migrations.

spring.flyway.schemas

Scheme names managed by Flyway (case-sensitive).

spring.flyway.skip-default-callbacks

false

Whether to skip default callbacks. If true, only custom callbacks are used.

spring.flyway.skip-default-resolvers

false

Whether to skip default resolvers. If true, only custom resolvers are used.

spring.flyway.skip-executing-migrations

Whether Flyway should skip executing the contents of the migrations and only update the schema history table. Requires Flyway teams.

spring.flyway.sql-migration-prefix

V

File name prefix for SQL migrations.

spring.flyway.sql-migration-separator

__

File name separator for SQL migrations.

spring.flyway.sql-migration-suffixes

[.sql]

File name suffix for SQL migrations.

spring.flyway.stream

Whether to stream SQL migrations when executing them. Requires Flyway Teams.

spring.flyway.table

flyway_schema_history

Name of the schema history table that will be used by Flyway.

spring.flyway.tablespace

Tablespace in which the schema history table is created. Ignored when using a database that does not support tablespaces. Defaults to the default tablespace of the connection used by Flyway.

spring.flyway.target

Target version up to which migrations should be considered.

spring.flyway.url

JDBC url of the database to migrate. If not set, the primary configured data source is used.

spring.flyway.user

Login user of the database to migrate.

spring.flyway.validate-migration-naming

false

Whether to validate migrations and callbacks whose scripts do not obey the correct naming convention.

spring.flyway.validate-on-migrate

true

Whether to automatically call validate when performing a migration.

spring.liquibase.change-log

classpath:/db/changelog/db.changelog-master.yaml

Change log configuration path.

spring.liquibase.clear-checksums

false

Whether to clear all checksums in the current changelog, so they will be recalculated upon the next update.

spring.liquibase.contexts

Comma-separated list of runtime contexts to use.

spring.liquibase.database-change-log-lock-table

DATABASECHANGELOGLOCK

Name of table to use for tracking concurrent Liquibase usage.

spring.liquibase.database-change-log-table

DATABASECHANGELOG

Name of table to use for tracking change history.

spring.liquibase.default-schema

Default database schema.

spring.liquibase.driver-class-name

Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.

spring.liquibase.drop-first

false

Whether to first drop the database schema.

spring.liquibase.enabled

true

Whether to enable Liquibase support.

spring.liquibase.labels

Comma-separated list of runtime labels to use.

spring.liquibase.liquibase-schema

Schema to use for Liquibase objects.

spring.liquibase.liquibase-tablespace

Tablespace to use for Liquibase objects.

spring.liquibase.parameters.*

Change log parameters.

spring.liquibase.password

Login password of the database to migrate.

spring.liquibase.rollback-file

File to which rollback SQL is written when an update is performed.

spring.liquibase.tag

Tag name to use when applying database changes. Can also be used with "rollbackFile" to generate a rollback script for all existing changes associated with that tag.

spring.liquibase.test-rollback-on-update

false

Whether rollback should be tested before update is performed.

spring.liquibase.url

JDBC URL of the database to migrate. If not set, the primary configured data source is used.

spring.liquibase.user

Login user of the database to migrate.

10.A.8. Integration Properties
Key	Default Value	Description
spring.activemq.broker-url

URL of the ActiveMQ broker. Auto-generated by default.

spring.activemq.close-timeout

15s

Time to wait before considering a close complete.

spring.activemq.in-memory

true

Whether the default broker URL should be in memory. Ignored if an explicit broker has been specified.

spring.activemq.non-blocking-redelivery

false

Whether to stop message delivery before re-delivering messages from a rolled back transaction. This implies that message order is not preserved when this is enabled.

spring.activemq.packages.trust-all

Whether to trust all packages.

spring.activemq.packages.trusted

Comma-separated list of specific packages to trust (when not trusting all packages).

spring.activemq.password

Login password of the broker.

spring.activemq.pool.block-if-full

true

Whether to block when a connection is requested and the pool is full. Set it to false to throw a "JMSException" instead.

spring.activemq.pool.block-if-full-timeout

-1ms

Blocking period before throwing an exception if the pool is still full.

spring.activemq.pool.enabled

false

Whether a JmsPoolConnectionFactory should be created, instead of a regular ConnectionFactory.

spring.activemq.pool.idle-timeout

30s

Connection idle timeout.

spring.activemq.pool.max-connections

1

Maximum number of pooled connections.

spring.activemq.pool.max-sessions-per-connection

500

Maximum number of pooled sessions per connection in the pool.

spring.activemq.pool.time-between-expiration-check

-1ms

Time to sleep between runs of the idle connection eviction thread. When negative, no idle connection eviction thread runs.

spring.activemq.pool.use-anonymous-producers

true

Whether to use only one anonymous "MessageProducer" instance. Set it to false to create one "MessageProducer" every time one is required.

spring.activemq.send-timeout

0ms

Time to wait on message sends for a response. Set it to 0 to wait forever.

spring.activemq.user

Login user of the broker.

spring.artemis.embedded.cluster-password

Cluster password. Randomly generated on startup by default.

spring.artemis.embedded.data-directory

Journal file directory. Not necessary if persistence is turned off.

spring.artemis.embedded.enabled

true

Whether to enable embedded mode if the Artemis server APIs are available.

spring.artemis.embedded.persistent

false

Whether to enable persistent store.

spring.artemis.embedded.queues

[]

Comma-separated list of queues to create on startup.

spring.artemis.embedded.server-id

0

Server ID. By default, an auto-incremented counter is used.

spring.artemis.embedded.topics

[]

Comma-separated list of topics to create on startup.

spring.artemis.host

localhost

Artemis broker host.

spring.artemis.mode

Artemis deployment mode, auto-detected by default.

spring.artemis.password

Login password of the broker.

spring.artemis.pool.block-if-full

true

Whether to block when a connection is requested and the pool is full. Set it to false to throw a "JMSException" instead.

spring.artemis.pool.block-if-full-timeout

-1ms

Blocking period before throwing an exception if the pool is still full.

spring.artemis.pool.enabled

false

Whether a JmsPoolConnectionFactory should be created, instead of a regular ConnectionFactory.

spring.artemis.pool.idle-timeout

30s

Connection idle timeout.

spring.artemis.pool.max-connections

1

Maximum number of pooled connections.

spring.artemis.pool.max-sessions-per-connection

500

Maximum number of pooled sessions per connection in the pool.

spring.artemis.pool.time-between-expiration-check

-1ms

Time to sleep between runs of the idle connection eviction thread. When negative, no idle connection eviction thread runs.

spring.artemis.pool.use-anonymous-producers

true

Whether to use only one anonymous "MessageProducer" instance. Set it to false to create one "MessageProducer" every time one is required.

spring.artemis.port

61616

Artemis broker port.

spring.artemis.user

Login user of the broker.

spring.batch.initialize-schema

embedded

Database schema initialization mode.

spring.batch.job.enabled

true

Execute all Spring Batch jobs in the context on startup.

spring.batch.job.names

Comma-separated list of job names to execute on startup (for instance, `job1,job2`). By default, all Jobs found in the context are executed.

spring.batch.schema

classpath:org/springframework/batch/core/schema-@@platform@@.sql

Path to the SQL file to use to initialize the database schema.

spring.batch.table-prefix

Table prefix for all the batch meta-data tables.

spring.hazelcast.config

The location of the configuration file to use to initialize Hazelcast.

spring.integration.jdbc.initialize-schema

embedded

Database schema initialization mode.

spring.integration.jdbc.schema

classpath:org/springframework/integration/jdbc/schema-@@platform@@.sql

Path to the SQL file to use to initialize the database schema.

spring.integration.rsocket.client.host

TCP RSocket server host to connect to.

spring.integration.rsocket.client.port

TCP RSocket server port to connect to.

spring.integration.rsocket.client.uri

WebSocket RSocket server uri to connect to.

spring.integration.rsocket.server.message-mapping-enabled

false

Whether to handle message mapping for RSocket via Spring Integration.

spring.jms.cache.consumers

false

Whether to cache message consumers.

spring.jms.cache.enabled

true

Whether to cache sessions.

spring.jms.cache.producers

true

Whether to cache message producers.

spring.jms.cache.session-cache-size

1

Size of the session cache (per JMS Session type).

spring.jms.jndi-name

Connection factory JNDI name. When set, takes precedence to others connection factory auto-configurations.

spring.jms.listener.acknowledge-mode

Acknowledge mode of the container. By default, the listener is transacted with automatic acknowledgment.

spring.jms.listener.auto-startup

true

Start the container automatically on startup.

spring.jms.listener.concurrency

Minimum number of concurrent consumers.

spring.jms.listener.max-concurrency

Maximum number of concurrent consumers.

spring.jms.listener.receive-timeout

1s

Timeout to use for receive calls. Use -1 for a no-wait receive or 0 for no timeout at all. The latter is only feasible if not running within a transaction manager and is generally discouraged since it prevents clean shutdown.

spring.jms.pub-sub-domain

false

Whether the default destination type is topic.

spring.jms.template.default-destination

Default destination to use on send and receive operations that do not have a destination parameter.

spring.jms.template.delivery-delay

Delivery delay to use for send calls.

spring.jms.template.delivery-mode

Delivery mode. Enables QoS (Quality of Service) when set.

spring.jms.template.priority

Priority of a message when sending. Enables QoS (Quality of Service) when set.

spring.jms.template.qos-enabled

Whether to enable explicit QoS (Quality of Service) when sending a message. When enabled, the delivery mode, priority and time-to-live properties will be used when sending a message. QoS is automatically enabled when at least one of those settings is customized.

spring.jms.template.receive-timeout

Timeout to use for receive calls.

spring.jms.template.time-to-live

Time-to-live of a message when sending. Enables QoS (Quality of Service) when set.

spring.kafka.admin.client-id

ID to pass to the server when making requests. Used for server-side logging.

spring.kafka.admin.fail-fast

false

Whether to fail fast if the broker is not available on startup.

spring.kafka.admin.properties.*

Additional admin-specific properties used to configure the client.

spring.kafka.admin.security.protocol

Security protocol used to communicate with brokers.

spring.kafka.admin.ssl.key-password

Password of the private key in the key store file.

spring.kafka.admin.ssl.key-store-location

Location of the key store file.

spring.kafka.admin.ssl.key-store-password

Store password for the key store file.

spring.kafka.admin.ssl.key-store-type

Type of the key store.

spring.kafka.admin.ssl.protocol

SSL protocol to use.

spring.kafka.admin.ssl.trust-store-location

Location of the trust store file.

spring.kafka.admin.ssl.trust-store-password

Store password for the trust store file.

spring.kafka.admin.ssl.trust-store-type

Type of the trust store.

spring.kafka.bootstrap-servers

Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Applies to all components unless overridden.

spring.kafka.client-id

ID to pass to the server when making requests. Used for server-side logging.

spring.kafka.consumer.auto-commit-interval

Frequency with which the consumer offsets are auto-committed to Kafka if 'enable.auto.commit' is set to true.

spring.kafka.consumer.auto-offset-reset

What to do when there is no initial offset in Kafka or if the current offset no longer exists on the server.

spring.kafka.consumer.bootstrap-servers

Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Overrides the global property, for consumers.

spring.kafka.consumer.client-id

ID to pass to the server when making requests. Used for server-side logging.

spring.kafka.consumer.enable-auto-commit

Whether the consumer's offset is periodically committed in the background.

spring.kafka.consumer.fetch-max-wait

Maximum amount of time the server blocks before answering the fetch request if there isn't sufficient data to immediately satisfy the requirement given by "fetch-min-size".

spring.kafka.consumer.fetch-min-size

Minimum amount of data the server should return for a fetch request.

spring.kafka.consumer.group-id

Unique string that identifies the consumer group to which this consumer belongs.

spring.kafka.consumer.heartbeat-interval

Expected time between heartbeats to the consumer coordinator.

spring.kafka.consumer.isolation-level

read-uncommitted

Isolation level for reading messages that have been written transactionally.

spring.kafka.consumer.key-deserializer

Deserializer class for keys.

spring.kafka.consumer.max-poll-records

Maximum number of records returned in a single call to poll().

spring.kafka.consumer.properties.*

Additional consumer-specific properties used to configure the client.

spring.kafka.consumer.security.protocol

Security protocol used to communicate with brokers.

spring.kafka.consumer.ssl.key-password

Password of the private key in the key store file.

spring.kafka.consumer.ssl.key-store-location

Location of the key store file.

spring.kafka.consumer.ssl.key-store-password

Store password for the key store file.

spring.kafka.consumer.ssl.key-store-type

Type of the key store.

spring.kafka.consumer.ssl.protocol

SSL protocol to use.

spring.kafka.consumer.ssl.trust-store-location

Location of the trust store file.

spring.kafka.consumer.ssl.trust-store-password

Store password for the trust store file.

spring.kafka.consumer.ssl.trust-store-type

Type of the trust store.

spring.kafka.consumer.value-deserializer

Deserializer class for values.

spring.kafka.jaas.control-flag

required

Control flag for login configuration.

spring.kafka.jaas.enabled

false

Whether to enable JAAS configuration.

spring.kafka.jaas.login-module

com.sun.security.auth.module.Krb5LoginModule

Login module.

spring.kafka.jaas.options.*

Additional JAAS options.

spring.kafka.listener.ack-count

Number of records between offset commits when ackMode is "COUNT" or "COUNT_TIME".

spring.kafka.listener.ack-mode

Listener AckMode. See the spring-kafka documentation.

spring.kafka.listener.ack-time

Time between offset commits when ackMode is "TIME" or "COUNT_TIME".

spring.kafka.listener.client-id

Prefix for the listener's consumer client.id property.

spring.kafka.listener.concurrency

Number of threads to run in the listener containers.

spring.kafka.listener.idle-between-polls

0

Sleep interval between Consumer.poll(Duration) calls.

spring.kafka.listener.idle-event-interval

Time between publishing idle consumer events (no data received).

spring.kafka.listener.log-container-config

Whether to log the container configuration during initialization (INFO level).

spring.kafka.listener.missing-topics-fatal

false

Whether the container should fail to start if at least one of the configured topics are not present on the broker.

spring.kafka.listener.monitor-interval

Time between checks for non-responsive consumers. If a duration suffix is not specified, seconds will be used.

spring.kafka.listener.no-poll-threshold

Multiplier applied to "pollTimeout" to determine if a consumer is non-responsive.

spring.kafka.listener.poll-timeout

Timeout to use when polling the consumer.

spring.kafka.listener.type

single

Listener type.

spring.kafka.producer.acks

Number of acknowledgments the producer requires the leader to have received before considering a request complete.

spring.kafka.producer.batch-size

Default batch size. A small batch size will make batching less common and may reduce throughput (a batch size of zero disables batching entirely).

spring.kafka.producer.bootstrap-servers

Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Overrides the global property, for producers.

spring.kafka.producer.buffer-memory

Total memory size the producer can use to buffer records waiting to be sent to the server.

spring.kafka.producer.client-id

ID to pass to the server when making requests. Used for server-side logging.

spring.kafka.producer.compression-type

Compression type for all data generated by the producer.

spring.kafka.producer.key-serializer

Serializer class for keys.

spring.kafka.producer.properties.*

Additional producer-specific properties used to configure the client.

spring.kafka.producer.retries

When greater than zero, enables retrying of failed sends.

spring.kafka.producer.security.protocol

Security protocol used to communicate with brokers.

spring.kafka.producer.ssl.key-password

Password of the private key in the key store file.

spring.kafka.producer.ssl.key-store-location

Location of the key store file.

spring.kafka.producer.ssl.key-store-password

Store password for the key store file.

spring.kafka.producer.ssl.key-store-type

Type of the key store.

spring.kafka.producer.ssl.protocol

SSL protocol to use.

spring.kafka.producer.ssl.trust-store-location

Location of the trust store file.

spring.kafka.producer.ssl.trust-store-password

Store password for the trust store file.

spring.kafka.producer.ssl.trust-store-type

Type of the trust store.

spring.kafka.producer.transaction-id-prefix

When non empty, enables transaction support for producer.

spring.kafka.producer.value-serializer

Serializer class for values.

spring.kafka.properties.*

Additional properties, common to producers and consumers, used to configure the client.

spring.kafka.security.protocol

Security protocol used to communicate with brokers.

spring.kafka.ssl.key-password

Password of the private key in the key store file.

spring.kafka.ssl.key-store-location

Location of the key store file.

spring.kafka.ssl.key-store-password

Store password for the key store file.

spring.kafka.ssl.key-store-type

Type of the key store.

spring.kafka.ssl.protocol

SSL protocol to use.

spring.kafka.ssl.trust-store-location

Location of the trust store file.

spring.kafka.ssl.trust-store-password

Store password for the trust store file.

spring.kafka.ssl.trust-store-type

Type of the trust store.

spring.kafka.streams.application-id

Kafka streams application.id property; default spring.application.name.

spring.kafka.streams.auto-startup

true

Whether or not to auto-start the streams factory bean.

spring.kafka.streams.bootstrap-servers

Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Overrides the global property, for streams.

spring.kafka.streams.cache-max-size-buffering

Maximum memory size to be used for buffering across all threads.

spring.kafka.streams.cleanup.on-shutdown

true

Cleanup the application’s local state directory on shutdown.

spring.kafka.streams.cleanup.on-startup

false

Cleanup the application’s local state directory on startup.

spring.kafka.streams.client-id

ID to pass to the server when making requests. Used for server-side logging.

spring.kafka.streams.properties.*

Additional Kafka properties used to configure the streams.

spring.kafka.streams.replication-factor

The replication factor for change log topics and repartition topics created by the stream processing application.

spring.kafka.streams.security.protocol

Security protocol used to communicate with brokers.

spring.kafka.streams.ssl.key-password

Password of the private key in the key store file.

spring.kafka.streams.ssl.key-store-location

Location of the key store file.

spring.kafka.streams.ssl.key-store-password

Store password for the key store file.

spring.kafka.streams.ssl.key-store-type

Type of the key store.

spring.kafka.streams.ssl.protocol

SSL protocol to use.

spring.kafka.streams.ssl.trust-store-location

Location of the trust store file.

spring.kafka.streams.ssl.trust-store-password

Store password for the trust store file.

spring.kafka.streams.ssl.trust-store-type

Type of the trust store.

spring.kafka.streams.state-dir

Directory location for the state store.

spring.kafka.template.default-topic

Default topic to which messages are sent.

spring.rabbitmq.address-shuffle-mode

none

Mode used to shuffle configured addresses.

spring.rabbitmq.addresses

Comma-separated list of addresses to which the client should connect. When set, the host and port are ignored.

spring.rabbitmq.cache.channel.checkout-timeout

Duration to wait to obtain a channel if the cache size has been reached. If 0, always create a new channel.

spring.rabbitmq.cache.channel.size

Number of channels to retain in the cache. When "check-timeout" > 0, max channels per connection.

spring.rabbitmq.cache.connection.mode

channel

Connection factory cache mode.

spring.rabbitmq.cache.connection.size

Number of connections to cache. Only applies when mode is CONNECTION.

spring.rabbitmq.channel-rpc-timeout

10m

Continuation timeout for RPC calls in channels. Set it to zero to wait forever.

spring.rabbitmq.connection-timeout

Connection timeout. Set it to zero to wait forever.

spring.rabbitmq.dynamic

true

Whether to create an AmqpAdmin bean.

spring.rabbitmq.host

localhost

RabbitMQ host. Ignored if an address is set.

spring.rabbitmq.listener.direct.acknowledge-mode

Acknowledge mode of container.

spring.rabbitmq.listener.direct.auto-startup

true

Whether to start the container automatically on startup.

spring.rabbitmq.listener.direct.consumers-per-queue

Number of consumers per queue.

spring.rabbitmq.listener.direct.de-batching-enabled

true

Whether the container should present batched messages as discrete messages or call the listener with the batch.

spring.rabbitmq.listener.direct.default-requeue-rejected

Whether rejected deliveries are re-queued by default.

spring.rabbitmq.listener.direct.idle-event-interval

How often idle container events should be published.

spring.rabbitmq.listener.direct.missing-queues-fatal

false

Whether to fail if the queues declared by the container are not available on the broker.

spring.rabbitmq.listener.direct.prefetch

Maximum number of unacknowledged messages that can be outstanding at each consumer.

spring.rabbitmq.listener.direct.retry.enabled

false

Whether publishing retries are enabled.

spring.rabbitmq.listener.direct.retry.initial-interval

1000ms

Duration between the first and second attempt to deliver a message.

spring.rabbitmq.listener.direct.retry.max-attempts

3

Maximum number of attempts to deliver a message.

spring.rabbitmq.listener.direct.retry.max-interval

10000ms

Maximum duration between attempts.

spring.rabbitmq.listener.direct.retry.multiplier

1

Multiplier to apply to the previous retry interval.

spring.rabbitmq.listener.direct.retry.stateless

true

Whether retries are stateless or stateful.

spring.rabbitmq.listener.simple.acknowledge-mode

Acknowledge mode of container.

spring.rabbitmq.listener.simple.auto-startup

true

Whether to start the container automatically on startup.

spring.rabbitmq.listener.simple.batch-size

Batch size, expressed as the number of physical messages, to be used by the container.

spring.rabbitmq.listener.simple.concurrency

Minimum number of listener invoker threads.

spring.rabbitmq.listener.simple.consumer-batch-enabled

false

Whether the container creates a batch of messages based on the 'receive-timeout' and 'batch-size'. Coerces 'de-batching-enabled' to true to include the contents of a producer created batch in the batch as discrete records.

spring.rabbitmq.listener.simple.de-batching-enabled

true

Whether the container should present batched messages as discrete messages or call the listener with the batch.

spring.rabbitmq.listener.simple.default-requeue-rejected

Whether rejected deliveries are re-queued by default.

spring.rabbitmq.listener.simple.idle-event-interval

How often idle container events should be published.

spring.rabbitmq.listener.simple.max-concurrency

Maximum number of listener invoker threads.

spring.rabbitmq.listener.simple.missing-queues-fatal

true

Whether to fail if the queues declared by the container are not available on the broker and/or whether to stop the container if one or more queues are deleted at runtime.

spring.rabbitmq.listener.simple.prefetch

Maximum number of unacknowledged messages that can be outstanding at each consumer.

spring.rabbitmq.listener.simple.retry.enabled

false

Whether publishing retries are enabled.

spring.rabbitmq.listener.simple.retry.initial-interval

1000ms

Duration between the first and second attempt to deliver a message.

spring.rabbitmq.listener.simple.retry.max-attempts

3

Maximum number of attempts to deliver a message.

spring.rabbitmq.listener.simple.retry.max-interval

10000ms

Maximum duration between attempts.

spring.rabbitmq.listener.simple.retry.multiplier

1

Multiplier to apply to the previous retry interval.

spring.rabbitmq.listener.simple.retry.stateless

true

Whether retries are stateless or stateful.

spring.rabbitmq.listener.type

simple

Listener container type.

spring.rabbitmq.password

guest

Login to authenticate against the broker.

spring.rabbitmq.port

RabbitMQ port. Ignored if an address is set. Default to 5672, or 5671 if SSL is enabled.

spring.rabbitmq.publisher-confirm-type

Type of publisher confirms to use.

spring.rabbitmq.publisher-returns

false

Whether to enable publisher returns.

spring.rabbitmq.requested-channel-max

2047

Number of channels per connection requested by the client. Use 0 for unlimited.

spring.rabbitmq.requested-heartbeat

Requested heartbeat timeout; zero for none. If a duration suffix is not specified, seconds will be used.

spring.rabbitmq.ssl.algorithm

SSL algorithm to use. By default, configured by the Rabbit client library.

spring.rabbitmq.ssl.enabled

Whether to enable SSL support. Determined automatically if an address is provided with the protocol (amqp:// vs. amqps://).

spring.rabbitmq.ssl.key-store

Path to the key store that holds the SSL certificate.

spring.rabbitmq.ssl.key-store-password

Password used to access the key store.

spring.rabbitmq.ssl.key-store-type

PKCS12

Key store type.

spring.rabbitmq.ssl.trust-store

Trust store that holds SSL certificates.

spring.rabbitmq.ssl.trust-store-password

Password used to access the trust store.

spring.rabbitmq.ssl.trust-store-type

JKS

Trust store type.

spring.rabbitmq.ssl.validate-server-certificate

true

Whether to enable server side certificate validation.

spring.rabbitmq.ssl.verify-hostname

true

Whether to enable hostname verification.

spring.rabbitmq.template.default-receive-queue

Name of the default queue to receive messages from when none is specified explicitly.

spring.rabbitmq.template.exchange

Name of the default exchange to use for send operations.

spring.rabbitmq.template.mandatory

Whether to enable mandatory messages.

spring.rabbitmq.template.receive-timeout

Timeout for `receive()` operations.

spring.rabbitmq.template.reply-timeout

Timeout for `sendAndReceive()` operations.

spring.rabbitmq.template.retry.enabled

false

Whether publishing retries are enabled.

spring.rabbitmq.template.retry.initial-interval

1000ms

Duration between the first and second attempt to deliver a message.

spring.rabbitmq.template.retry.max-attempts

3

Maximum number of attempts to deliver a message.

spring.rabbitmq.template.retry.max-interval

10000ms

Maximum duration between attempts.

spring.rabbitmq.template.retry.multiplier

1

Multiplier to apply to the previous retry interval.

spring.rabbitmq.template.routing-key

Value of a default routing key to use for send operations.

spring.rabbitmq.username

guest

Login user to authenticate to the broker.

spring.rabbitmq.virtual-host

Virtual host to use when connecting to the broker.

10.A.9. Web Properties
Key	Default Value	Description
spring.hateoas.use-hal-as-default-json-media-type

true

Whether application/hal+json responses should be sent to requests that accept application/json.

spring.jersey.application-path

Path that serves as the base URI for the application. If specified, overrides the value of "@ApplicationPath".

spring.jersey.filter.order

0

Jersey filter chain order.

spring.jersey.init.*

Init parameters to pass to Jersey through the servlet or filter.

spring.jersey.servlet.load-on-startup

-1

Load on startup priority of the Jersey servlet.

spring.jersey.type

servlet

Jersey integration type.

spring.mvc.async.request-timeout

Amount of time before asynchronous request handling times out. If this value is not set, the default timeout of the underlying implementation is used.

spring.mvc.contentnegotiation.favor-parameter

false

Whether a request parameter ("format" by default) should be used to determine the requested media type.

spring.mvc.contentnegotiation.media-types.*

Map file extensions to media types for content negotiation. For instance, yml to text/yaml.

spring.mvc.contentnegotiation.parameter-name

Query parameter name to use when "favor-parameter" is enabled.

spring.mvc.converters.preferred-json-mapper

Preferred JSON mapper to use for HTTP message conversion. By default, auto-detected according to the environment.

spring.mvc.dispatch-options-request

true

Whether to dispatch OPTIONS requests to the FrameworkServlet doService method.

spring.mvc.dispatch-trace-request

false

Whether to dispatch TRACE requests to the FrameworkServlet doService method.

spring.mvc.format.date

Date format to use, for example `dd/MM/yyyy`.

spring.mvc.format.date-time

Date-time format to use, for example `yyyy-MM-dd HH:mm:ss`.

spring.mvc.format.time

Time format to use, for example `HH:mm:ss`.

spring.mvc.formcontent.filter.enabled

true

Whether to enable Spring's FormContentFilter.

spring.mvc.hiddenmethod.filter.enabled

false

Whether to enable Spring's HiddenHttpMethodFilter.

spring.mvc.ignore-default-model-on-redirect

true

Whether the content of the "default" model should be ignored during redirect scenarios.

spring.mvc.log-request-details

false

Whether logging of (potentially sensitive) request details at DEBUG and TRACE level is allowed.

spring.mvc.log-resolved-exception

false

Whether to enable warn logging of exceptions resolved by a "HandlerExceptionResolver", except for "DefaultHandlerExceptionResolver".

spring.mvc.message-codes-resolver-format

Formatting strategy for message codes. For instance, `PREFIX_ERROR_CODE`.

spring.mvc.pathmatch.matching-strategy

ant-path-matcher

Choice of strategy for matching request paths against registered mappings.

spring.mvc.publish-request-handled-events

true

Whether to publish a ServletRequestHandledEvent at the end of each request.

spring.mvc.servlet.load-on-startup

-1

Load on startup priority of the dispatcher servlet.

spring.mvc.servlet.path

/

Path of the dispatcher servlet. Setting a custom value for this property is not compatible with the PathPatternParser matching strategy.

spring.mvc.static-path-pattern

/**

Path pattern used for static resources.

spring.mvc.throw-exception-if-no-handler-found

false

Whether a "NoHandlerFoundException" should be thrown if no Handler was found to process a request.

spring.mvc.view.prefix

Spring MVC view prefix.

spring.mvc.view.suffix

Spring MVC view suffix.

spring.servlet.multipart.enabled

true

Whether to enable support of multipart uploads.

spring.servlet.multipart.file-size-threshold

0B

Threshold after which files are written to disk.

spring.servlet.multipart.location

Intermediate location of uploaded files.

spring.servlet.multipart.max-file-size

1MB

Max file size.

spring.servlet.multipart.max-request-size

10MB

Max request size.

spring.servlet.multipart.resolve-lazily

false

Whether to resolve the multipart request lazily at the time of file or parameter access.

spring.session.hazelcast.flush-mode

on-save

Sessions flush mode. Determines when session changes are written to the session store.

spring.session.hazelcast.map-name

spring:session:sessions

Name of the map used to store sessions.

spring.session.hazelcast.save-mode

on-set-attribute

Sessions save mode. Determines how session changes are tracked and saved to the session store.

spring.session.jdbc.cleanup-cron

0 * * * * *

Cron expression for expired session cleanup job.

spring.session.jdbc.flush-mode

on-save

Sessions flush mode. Determines when session changes are written to the session store.

spring.session.jdbc.initialize-schema

embedded

Database schema initialization mode.

spring.session.jdbc.save-mode

on-set-attribute

Sessions save mode. Determines how session changes are tracked and saved to the session store.

spring.session.jdbc.schema

classpath:org/springframework/session/jdbc/schema-@@platform@@.sql

Path to the SQL file to use to initialize the database schema.

spring.session.jdbc.table-name

SPRING_SESSION

Name of the database table used to store sessions.

spring.session.mongodb.collection-name

sessions

Collection name used to store sessions.

spring.session.redis.cleanup-cron

0 * * * * *

Cron expression for expired session cleanup job.

spring.session.redis.configure-action

notify-keyspace-events

The configure action to apply when no user defined ConfigureRedisAction bean is present.

spring.session.redis.flush-mode

on-save

Sessions flush mode. Determines when session changes are written to the session store.

spring.session.redis.namespace

spring:session

Namespace for keys used to store sessions.

spring.session.redis.save-mode

on-set-attribute

Sessions save mode. Determines how session changes are tracked and saved to the session store.

spring.session.servlet.filter-dispatcher-types

[async, error, request]

Session repository filter dispatcher types.

spring.session.servlet.filter-order

Session repository filter order.

spring.session.store-type

Session store type.

spring.session.timeout

Session timeout. If a duration suffix is not specified, seconds will be used.

spring.web.locale

Locale to use. By default, this locale is overridden by the "Accept-Language" header.

spring.web.locale-resolver

accept-header

Define how the locale should be resolved.

spring.web.resources.add-mappings

true

Whether to enable default resource handling.

spring.web.resources.cache.cachecontrol.cache-private

Indicate that the response message is intended for a single user and must not be stored by a shared cache.

spring.web.resources.cache.cachecontrol.cache-public

Indicate that any cache may store the response.

spring.web.resources.cache.cachecontrol.max-age

Maximum time the response should be cached, in seconds if no duration suffix is not specified.

spring.web.resources.cache.cachecontrol.must-revalidate

Indicate that once it has become stale, a cache must not use the response without re-validating it with the server.

spring.web.resources.cache.cachecontrol.no-cache

Indicate that the cached response can be reused only if re-validated with the server.

spring.web.resources.cache.cachecontrol.no-store

Indicate to not cache the response in any case.

spring.web.resources.cache.cachecontrol.no-transform

Indicate intermediaries (caches and others) that they should not transform the response content.

spring.web.resources.cache.cachecontrol.proxy-revalidate

Same meaning as the "must-revalidate" directive, except that it does not apply to private caches.

spring.web.resources.cache.cachecontrol.s-max-age

Maximum time the response should be cached by shared caches, in seconds if no duration suffix is not specified.

spring.web.resources.cache.cachecontrol.stale-if-error

Maximum time the response may be used when errors are encountered, in seconds if no duration suffix is not specified.

spring.web.resources.cache.cachecontrol.stale-while-revalidate

Maximum time the response can be served after it becomes stale, in seconds if no duration suffix is not specified.

spring.web.resources.cache.period

Cache period for the resources served by the resource handler. If a duration suffix is not specified, seconds will be used. Can be overridden by the 'spring.web.resources.cache.cachecontrol' properties.

spring.web.resources.cache.use-last-modified

true

Whether we should use the "lastModified" metadata of the files in HTTP caching headers.

spring.web.resources.chain.cache

true

Whether to enable caching in the Resource chain.

spring.web.resources.chain.compressed

false

Whether to enable resolution of already compressed resources (gzip, brotli). Checks for a resource name with the '.gz' or '.br' file extensions.

spring.web.resources.chain.enabled

Whether to enable the Spring Resource Handling chain. By default, disabled unless at least one strategy has been enabled.

spring.web.resources.chain.strategy.content.enabled

false

Whether to enable the content Version Strategy.

spring.web.resources.chain.strategy.content.paths

[/**]

Comma-separated list of patterns to apply to the content Version Strategy.

spring.web.resources.chain.strategy.fixed.enabled

false

Whether to enable the fixed Version Strategy.

spring.web.resources.chain.strategy.fixed.paths

[/**]

Comma-separated list of patterns to apply to the fixed Version Strategy.

spring.web.resources.chain.strategy.fixed.version

Version string to use for the fixed Version Strategy.

spring.web.resources.static-locations

[classpath:/META-INF/resources/, classpath:/resources/, classpath:/static/, classpath:/public/]

Locations of static resources. Defaults to classpath:[/META-INF/resources/, /resources/, /static/, /public/].

spring.webflux.base-path

Base path for all web handlers.

spring.webflux.format.date

Date format to use, for example `dd/MM/yyyy`.

spring.webflux.format.date-time

Date-time format to use, for example `yyyy-MM-dd HH:mm:ss`.

spring.webflux.format.time

Time format to use, for example `HH:mm:ss`.

spring.webflux.hiddenmethod.filter.enabled

false

Whether to enable Spring's HiddenHttpMethodFilter.

spring.webflux.static-path-pattern

/**

Path pattern used for static resources.

spring.webservices.path

/services

Path that serves as the base URI for the services.

spring.webservices.servlet.init.*

Servlet init parameters to pass to Spring Web Services.

spring.webservices.servlet.load-on-startup

-1

Load on startup priority of the Spring Web Services servlet.

spring.webservices.wsdl-locations

Comma-separated list of locations of WSDLs and accompanying XSDs to be exposed as beans.

10.A.10. Templating Properties
Key	Default Value	Description
spring.freemarker.allow-request-override

false

Whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.

spring.freemarker.allow-session-override

false

Whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.

spring.freemarker.cache

false

Whether to enable template caching.

spring.freemarker.charset

UTF-8

Template encoding.

spring.freemarker.check-template-location

true

Whether to check that the templates location exists.

spring.freemarker.content-type

text/html

Content-Type value.

spring.freemarker.enabled

true

Whether to enable MVC view resolution for this technology.

spring.freemarker.expose-request-attributes

false

Whether all request attributes should be added to the model prior to merging with the template.

spring.freemarker.expose-session-attributes

false

Whether all HttpSession attributes should be added to the model prior to merging with the template.

spring.freemarker.expose-spring-macro-helpers

true

Whether to expose a RequestContext for use by Spring's macro library, under the name "springMacroRequestContext".

spring.freemarker.prefer-file-system-access

false

Whether to prefer file system access for template loading to enable hot detection of template changes. When a template path is detected as a directory, templates are loaded from the directory only and other matching classpath locations will not be considered.

spring.freemarker.prefix

Prefix that gets prepended to view names when building a URL.

spring.freemarker.request-context-attribute

Name of the RequestContext attribute for all views.

spring.freemarker.settings.*

Well-known FreeMarker keys which are passed to FreeMarker's Configuration.

spring.freemarker.suffix

.ftlh

Suffix that gets appended to view names when building a URL.

spring.freemarker.template-loader-path

[classpath:/templates/]

Comma-separated list of template paths.

spring.freemarker.view-names

View names that can be resolved.

spring.groovy.template.allow-request-override

false

Whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.

spring.groovy.template.allow-session-override

false

Whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.

spring.groovy.template.cache

false

Whether to enable template caching.

spring.groovy.template.charset

UTF-8

Template encoding.

spring.groovy.template.check-template-location

true

Whether to check that the templates location exists.

spring.groovy.template.configuration.auto-escape
spring.groovy.template.configuration.auto-indent
spring.groovy.template.configuration.auto-indent-string
spring.groovy.template.configuration.auto-new-line
spring.groovy.template.configuration.base-template-class
spring.groovy.template.configuration.cache-templates
spring.groovy.template.configuration.declaration-encoding
spring.groovy.template.configuration.expand-empty-elements
spring.groovy.template.configuration.locale
spring.groovy.template.configuration.new-line-string
spring.groovy.template.configuration.resource-loader-path
spring.groovy.template.configuration.use-double-quotes

See GroovyMarkupConfigurer

spring.groovy.template.content-type

text/html

Content-Type value.

spring.groovy.template.enabled

true

Whether to enable MVC view resolution for this technology.

spring.groovy.template.expose-request-attributes

false

Whether all request attributes should be added to the model prior to merging with the template.

spring.groovy.template.expose-session-attributes

false

Whether all HttpSession attributes should be added to the model prior to merging with the template.

spring.groovy.template.expose-spring-macro-helpers

true

Whether to expose a RequestContext for use by Spring's macro library, under the name "springMacroRequestContext".

spring.groovy.template.prefix

Prefix that gets prepended to view names when building a URL.

spring.groovy.template.request-context-attribute

Name of the RequestContext attribute for all views.

spring.groovy.template.resource-loader-path

classpath:/templates/

Template path.

spring.groovy.template.suffix

.tpl

Suffix that gets appended to view names when building a URL.

spring.groovy.template.view-names

View names that can be resolved.

spring.mustache.allow-request-override

false

Whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.

spring.mustache.allow-session-override

false

Whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.

spring.mustache.cache

false

Whether to enable template caching.

spring.mustache.charset

UTF-8

Template encoding.

spring.mustache.check-template-location

true

Whether to check that the templates location exists.

spring.mustache.content-type

text/html

Content-Type value.

spring.mustache.enabled

true

Whether to enable MVC view resolution for this technology.

spring.mustache.expose-request-attributes

false

Whether all request attributes should be added to the model prior to merging with the template.

spring.mustache.expose-session-attributes

false

Whether all HttpSession attributes should be added to the model prior to merging with the template.

spring.mustache.expose-spring-macro-helpers

true

Whether to expose a RequestContext for use by Spring's macro library, under the name "springMacroRequestContext".

spring.mustache.prefix

classpath:/templates/

Prefix to apply to template names.

spring.mustache.request-context-attribute

Name of the RequestContext attribute for all views.

spring.mustache.suffix

.mustache

Suffix to apply to template names.

spring.mustache.view-names

View names that can be resolved.

spring.thymeleaf.cache

true

Whether to enable template caching.

spring.thymeleaf.check-template

true

Whether to check that the template exists before rendering it.

spring.thymeleaf.check-template-location

true

Whether to check that the templates location exists.

spring.thymeleaf.enable-spring-el-compiler

false

Enable the SpringEL compiler in SpringEL expressions.

spring.thymeleaf.enabled

true

Whether to enable Thymeleaf view resolution for Web frameworks.

spring.thymeleaf.encoding

UTF-8

Template files encoding.

spring.thymeleaf.excluded-view-names

Comma-separated list of view names (patterns allowed) that should be excluded from resolution.

spring.thymeleaf.mode

HTML

Template mode to be applied to templates. See also Thymeleaf's TemplateMode enum.

spring.thymeleaf.prefix

classpath:/templates/

Prefix that gets prepended to view names when building a URL.

spring.thymeleaf.reactive.chunked-mode-view-names

Comma-separated list of view names (patterns allowed) that should be the only ones executed in CHUNKED mode when a max chunk size is set.

spring.thymeleaf.reactive.full-mode-view-names

Comma-separated list of view names (patterns allowed) that should be executed in FULL mode even if a max chunk size is set.

spring.thymeleaf.reactive.max-chunk-size

0B

Maximum size of data buffers used for writing to the response. Templates will execute in CHUNKED mode by default if this is set.

spring.thymeleaf.reactive.media-types

Media types supported by the view technology.

spring.thymeleaf.render-hidden-markers-before-checkboxes

false

Whether hidden form inputs acting as markers for checkboxes should be rendered before the checkbox element itself.

spring.thymeleaf.servlet.content-type

text/html

Content-Type value written to HTTP responses.

spring.thymeleaf.servlet.produce-partial-output-while-processing

true

Whether Thymeleaf should start writing partial output as soon as possible or buffer until template processing is finished.

spring.thymeleaf.suffix

.html

Suffix that gets appended to view names when building a URL.

spring.thymeleaf.template-resolver-order

Order of the template resolver in the chain. By default, the template resolver is first in the chain. Order start at 1 and should only be set if you have defined additional "TemplateResolver" beans.

spring.thymeleaf.view-names

Comma-separated list of view names (patterns allowed) that can be resolved.

10.A.11. Server Properties
Key	Default Value	Description
server.address

Network address to which the server should bind.

server.compression.enabled

false

Whether response compression is enabled.

server.compression.excluded-user-agents

Comma-separated list of user agents for which responses should not be compressed.

server.compression.mime-types

[text/html, text/xml, text/plain, text/css, text/javascript, application/javascript, application/json, application/xml]

Comma-separated list of MIME types that should be compressed.

server.compression.min-response-size

2KB

Minimum "Content-Length" value that is required for compression to be performed.

server.error.include-binding-errors

never

When to include "errors" attribute.

server.error.include-exception

false

Include the "exception" attribute.

server.error.include-message

never

When to include "message" attribute.

server.error.include-stacktrace

never

When to include the "trace" attribute.

server.error.path

/error

Path of the error controller.

server.error.whitelabel.enabled

true

Whether to enable the default error page displayed in browsers in case of a server error.

server.forward-headers-strategy

Strategy for handling X-Forwarded-* headers.

server.http2.enabled

false

Whether to enable HTTP/2 support, if the current environment supports it.

server.jetty.accesslog.append

false

Append to log.

server.jetty.accesslog.custom-format

Custom log format, see org.eclipse.jetty.server.CustomRequestLog. If defined, overrides the "format" configuration key.

server.jetty.accesslog.enabled

false

Enable access log.

server.jetty.accesslog.file-date-format

Date format to place in log file name.

server.jetty.accesslog.filename

Log filename. If not specified, logs redirect to "System.err".

server.jetty.accesslog.format

ncsa

Log format.

server.jetty.accesslog.ignore-paths

Request paths that should not be logged.

server.jetty.accesslog.retention-period

31

Number of days before rotated log files are deleted.

server.jetty.connection-idle-timeout

Time that the connection can be idle before it is closed.

server.jetty.max-http-form-post-size

200000B

Maximum size of the form content in any HTTP post request.

server.jetty.threads.acceptors

-1

Number of acceptor threads to use. When the value is -1, the default, the number of acceptors is derived from the operating environment.

server.jetty.threads.idle-timeout

60000ms

Maximum thread idle time.

server.jetty.threads.max

200

Maximum number of threads.

server.jetty.threads.max-queue-capacity

Maximum capacity of the thread pool's backing queue. A default is computed based on the threading configuration.

server.jetty.threads.min

8

Minimum number of threads.

server.jetty.threads.selectors

-1

Number of selector threads to use. When the value is -1, the default, the number of selectors is derived from the operating environment.

server.max-http-header-size

8KB

Maximum size of the HTTP message header.

server.netty.connection-timeout

Connection timeout of the Netty channel.

server.netty.h2c-max-content-length

0B

Maximum content length of an H2C upgrade request.

server.netty.initial-buffer-size

128B

Initial buffer size for HTTP request decoding.

server.netty.max-chunk-size

8KB

Maximum chunk size that can be decoded for an HTTP request.

server.netty.max-initial-line-length

4KB

Maximum length that can be decoded for an HTTP request's initial line.

server.netty.validate-headers

true

Whether to validate headers when decoding requests.

server.port

8080

Server HTTP port.

server.server-header

Value to use for the Server response header (if empty, no header is sent).

server.servlet.application-display-name

application

Display name of the application.

server.servlet.context-parameters.*

Servlet context init parameters.

server.servlet.context-path

Context path of the application.

server.servlet.encoding.charset

server.servlet.encoding.enabled

true

Whether to enable http encoding support.

server.servlet.encoding.force

server.servlet.encoding.force-request

server.servlet.encoding.force-response

server.servlet.encoding.mapping.*

server.servlet.jsp.class-name

org.apache.jasper.servlet.JspServlet

Class name of the servlet to use for JSPs. If registered is true and this class * is on the classpath then it will be registered.

server.servlet.jsp.init-parameters.*

Init parameters used to configure the JSP servlet.

server.servlet.jsp.registered

true

Whether the JSP servlet is registered.

server.servlet.register-default-servlet

false

Whether to register the default Servlet with the container.

server.servlet.session.cookie.comment

Comment for the session cookie.

server.servlet.session.cookie.domain

Domain for the session cookie.

server.servlet.session.cookie.http-only

Whether to use "HttpOnly" cookies for session cookies.

server.servlet.session.cookie.max-age

Maximum age of the session cookie. If a duration suffix is not specified, seconds will be used.

server.servlet.session.cookie.name

Session cookie name.

server.servlet.session.cookie.path

Path of the session cookie.

server.servlet.session.cookie.secure

Whether to always mark the session cookie as secure.

server.servlet.session.persistent

false

Whether to persist session data between restarts.

server.servlet.session.store-dir

Directory used to store session data.

server.servlet.session.timeout

30m

Session timeout. If a duration suffix is not specified, seconds will be used.

server.servlet.session.tracking-modes

Session tracking modes.

server.shutdown

immediate

Type of shutdown that the server will support.

server.ssl.ciphers

Supported SSL ciphers.

server.ssl.client-auth

Client authentication mode. Requires a trust store.

server.ssl.enabled

true

Whether to enable SSL support.

server.ssl.enabled-protocols

Enabled SSL protocols.

server.ssl.key-alias

Alias that identifies the key in the key store.

server.ssl.key-password

Password used to access the key in the key store.

server.ssl.key-store

Path to the key store that holds the SSL certificate (typically a jks file).

server.ssl.key-store-password

Password used to access the key store.

server.ssl.key-store-provider

Provider for the key store.

server.ssl.key-store-type

Type of the key store.

server.ssl.protocol

TLS

SSL protocol to use.

server.ssl.trust-store

Trust store that holds SSL certificates.

server.ssl.trust-store-password

Password used to access the trust store.

server.ssl.trust-store-provider

Provider for the trust store.

server.ssl.trust-store-type

Type of the trust store.

server.tomcat.accept-count

100

Maximum queue length for incoming connection requests when all possible request processing threads are in use.

server.tomcat.accesslog.buffered

true

Whether to buffer output such that it is flushed only periodically.

server.tomcat.accesslog.check-exists

false

Whether to check for log file existence so it can be recreated it if an external process has renamed it.

server.tomcat.accesslog.condition-if

Whether logging of the request will only be enabled if "ServletRequest.getAttribute(conditionIf)" does not yield null.

server.tomcat.accesslog.condition-unless

Whether logging of the request will only be enabled if "ServletRequest.getAttribute(conditionUnless)" yield null.

server.tomcat.accesslog.directory

logs

Directory in which log files are created. Can be absolute or relative to the Tomcat base dir.

server.tomcat.accesslog.enabled

false

Enable access log.

server.tomcat.accesslog.encoding

Character set used by the log file. Default to the system default character set.

server.tomcat.accesslog.file-date-format

.yyyy-MM-dd

Date format to place in the log file name.

server.tomcat.accesslog.ipv6-canonical

false

Whether to use IPv6 canonical representation format as defined by RFC 5952.

server.tomcat.accesslog.locale

Locale used to format timestamps in log entries and in log file name suffix. Default to the default locale of the Java process.

server.tomcat.accesslog.max-days

-1

Number of days to retain the access log files before they are removed.

server.tomcat.accesslog.pattern

common

Format pattern for access logs.

server.tomcat.accesslog.prefix

access_log

Log file name prefix.

server.tomcat.accesslog.rename-on-rotate

false

Whether to defer inclusion of the date stamp in the file name until rotate time.

server.tomcat.accesslog.request-attributes-enabled

false

Set request attributes for the IP address, Hostname, protocol, and port used for the request.

server.tomcat.accesslog.rotate

true

Whether to enable access log rotation.

server.tomcat.accesslog.suffix

.log

Log file name suffix.

server.tomcat.additional-tld-skip-patterns

Comma-separated list of additional patterns that match jars to ignore for TLD scanning. The special '?' and '*' characters can be used in the pattern to match one and only one character and zero or more characters respectively.

server.tomcat.background-processor-delay

10s

Delay between the invocation of backgroundProcess methods. If a duration suffix is not specified, seconds will be used.

server.tomcat.basedir

Tomcat base directory. If not specified, a temporary directory is used.

server.tomcat.connection-timeout

Amount of time the connector will wait, after accepting a connection, for the request URI line to be presented.

server.tomcat.max-connections

8192

Maximum number of connections that the server accepts and processes at any given time. Once the limit has been reached, the operating system may still accept connections based on the "acceptCount" property.

server.tomcat.max-http-form-post-size

2MB

Maximum size of the form content in any HTTP post request.

server.tomcat.max-swallow-size

2MB

Maximum amount of request body to swallow.

server.tomcat.mbeanregistry.enabled

false

Whether Tomcat's MBean Registry should be enabled.

server.tomcat.processor-cache

200

Maximum number of idle processors that will be retained in the cache and reused with a subsequent request. When set to -1 the cache will be unlimited with a theoretical maximum size equal to the maximum number of connections.

server.tomcat.redirect-context-root

true

Whether requests to the context root should be redirected by appending a / to the path. When using SSL terminated at a proxy, this property should be set to false.

server.tomcat.relaxed-path-chars

Comma-separated list of additional unencoded characters that should be allowed in URI paths. Only "< > [ \ ] ^ ` { | }" are allowed.

server.tomcat.relaxed-query-chars

Comma-separated list of additional unencoded characters that should be allowed in URI query strings. Only "< > [ \ ] ^ ` { | }" are allowed.

server.tomcat.remoteip.host-header

X-Forwarded-Host

Name of the HTTP header from which the remote host is extracted.

server.tomcat.remoteip.internal-proxies

10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|192\\.168\\.\\d{1,3}\\.\\d{1,3}|169\\.254\\.\\d{1,3}\\.\\d{1,3}|127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|172\\.1[6-9]{1}\\.\\d{1,3}\\.\\d{1,3}|172\\.2[0-9]{1}\\.\\d{1,3}\\.\\d{1,3}|172\\.3[0-1]{1}\\.\\d{1,3}\\.\\d{1,3}|0:0:0:0:0:0:0:1|::1

Regular expression that matches proxies that are to be trusted.

server.tomcat.remoteip.port-header

X-Forwarded-Port

Name of the HTTP header used to override the original port value.

server.tomcat.remoteip.protocol-header

Header that holds the incoming protocol, usually named "X-Forwarded-Proto".

server.tomcat.remoteip.protocol-header-https-value

https

Value of the protocol header indicating whether the incoming request uses SSL.

server.tomcat.remoteip.remote-ip-header

Name of the HTTP header from which the remote IP is extracted. For instance, `X-FORWARDED-FOR`.

server.tomcat.resource.allow-caching

true

Whether static resource caching is permitted for this web application.

server.tomcat.resource.cache-ttl

Time-to-live of the static resource cache.

server.tomcat.threads.max

200

Maximum amount of worker threads.

server.tomcat.threads.min-spare

10

Minimum amount of worker threads.

server.tomcat.uri-encoding

UTF-8

Character encoding to use to decode the URI.

server.tomcat.use-relative-redirects

false

Whether HTTP 1.1 and later location headers generated by a call to sendRedirect will use relative or absolute redirects.

server.undertow.accesslog.dir

Undertow access log directory.

server.undertow.accesslog.enabled

false

Whether to enable the access log.

server.undertow.accesslog.pattern

common

Format pattern for access logs.

server.undertow.accesslog.prefix

access_log.

Log file name prefix.

server.undertow.accesslog.rotate

true

Whether to enable access log rotation.

server.undertow.accesslog.suffix

log

Log file name suffix.

server.undertow.allow-encoded-slash

false

Whether the server should decode percent encoded slash characters. Enabling encoded slashes can have security implications due to different servers interpreting the slash differently. Only enable this if you have a legacy application that requires it.

server.undertow.always-set-keep-alive

true

Whether the 'Connection: keep-alive' header should be added to all responses, even if not required by the HTTP specification.

server.undertow.buffer-size

Size of each buffer. The default is derived from the maximum amount of memory that is available to the JVM.

server.undertow.decode-url

true

Whether the URL should be decoded. When disabled, percent-encoded characters in the URL will be left as-is.

server.undertow.direct-buffers

Whether to allocate buffers outside the Java heap. The default is derived from the maximum amount of memory that is available to the JVM.

server.undertow.eager-filter-init

true

Whether servlet filters should be initialized on startup.

server.undertow.max-cookies

200

Maximum number of cookies that are allowed. This limit exists to prevent hash collision based DOS attacks.

server.undertow.max-headers

Maximum number of headers that are allowed. This limit exists to prevent hash collision based DOS attacks.

server.undertow.max-http-post-size

-1B

Maximum size of the HTTP post content. When the value is -1, the default, the size is unlimited.

server.undertow.max-parameters

Maximum number of query or path parameters that are allowed. This limit exists to prevent hash collision based DOS attacks.

server.undertow.no-request-timeout

Amount of time a connection can sit idle without processing a request, before it is closed by the server.

server.undertow.options.server.*

server.undertow.options.socket.*

server.undertow.preserve-path-on-forward

false

Whether to preserve the path of a request when it is forwarded.

server.undertow.threads.io

Number of I/O threads to create for the worker. The default is derived from the number of available processors.

server.undertow.threads.worker

Number of worker threads. The default is 8 times the number of I/O threads.

server.undertow.url-charset

UTF-8

Charset used to decode URLs.

10.A.12. Security Properties
Key	Default Value	Description
spring.security.filter.dispatcher-types

[async, error, request]

Security filter chain dispatcher types.

spring.security.filter.order

-100

Security filter chain order.

spring.security.oauth2.client.provider.*

OAuth provider details.

spring.security.oauth2.client.registration.*

OAuth client registrations.

spring.security.oauth2.resourceserver.jwt.issuer-uri

URI that can either be an OpenID Connect discovery endpoint or an OAuth 2.0 Authorization Server Metadata endpoint defined by RFC 8414.

spring.security.oauth2.resourceserver.jwt.jwk-set-uri

JSON Web Key URI to use to verify the JWT token.

spring.security.oauth2.resourceserver.jwt.jws-algorithm

RS256

JSON Web Algorithm used for verifying the digital signatures.

spring.security.oauth2.resourceserver.jwt.public-key-location

Location of the file containing the public key used to verify a JWT.

spring.security.oauth2.resourceserver.opaquetoken.client-id

Client id used to authenticate with the token introspection endpoint.

spring.security.oauth2.resourceserver.opaquetoken.client-secret

Client secret used to authenticate with the token introspection endpoint.

spring.security.oauth2.resourceserver.opaquetoken.introspection-uri

OAuth 2.0 endpoint through which token introspection is accomplished.

spring.security.saml2.relyingparty.registration.*

SAML2 relying party registrations.

spring.security.user.name

user

Default user name.

spring.security.user.password

Password for the default user name.

spring.security.user.roles

Granted roles for the default user name.

10.A.13. RSocket Properties
Key	Default Value	Description
spring.rsocket.server.address

Network address to which the server should bind.

spring.rsocket.server.fragment-size

Maximum transmission unit. Frames larger than the specified value are fragmented.

spring.rsocket.server.mapping-path

Path under which RSocket handles requests (only works with websocket transport).

spring.rsocket.server.port

Server port.

spring.rsocket.server.ssl.ciphers

spring.rsocket.server.ssl.client-auth

spring.rsocket.server.ssl.enabled

spring.rsocket.server.ssl.enabled-protocols

spring.rsocket.server.ssl.key-alias

spring.rsocket.server.ssl.key-password

spring.rsocket.server.ssl.key-store

spring.rsocket.server.ssl.key-store-password

spring.rsocket.server.ssl.key-store-provider

spring.rsocket.server.ssl.key-store-type

spring.rsocket.server.ssl.protocol

spring.rsocket.server.ssl.trust-store

spring.rsocket.server.ssl.trust-store-password

spring.rsocket.server.ssl.trust-store-provider

spring.rsocket.server.ssl.trust-store-type

spring.rsocket.server.transport

tcp

RSocket transport protocol.

10.A.14. Actuator Properties
Key	Default Value	Description
management.auditevents.enabled

true

Whether to enable storage of audit events.

management.cloudfoundry.enabled

true

Whether to enable extended Cloud Foundry actuator endpoints.

management.cloudfoundry.skip-ssl-validation

false

Whether to skip SSL verification for Cloud Foundry actuator endpoint security calls.

management.endpoint.auditevents.cache.time-to-live

0ms

Maximum time that a response can be cached.

management.endpoint.auditevents.enabled

true

Whether to enable the auditevents endpoint.

management.endpoint.beans.cache.time-to-live

0ms

Maximum time that a response can be cached.

management.endpoint.beans.enabled

true

Whether to enable the beans endpoint.

management.endpoint.caches.cache.time-to-live

0ms

Maximum time that a response can be cached.

management.endpoint.caches.enabled

true

Whether to enable the caches endpoint.

management.endpoint.conditions.cache.time-to-live

0ms

Maximum time that a response can be cached.

management.endpoint.conditions.enabled

true

Whether to enable the conditions endpoint.

management.endpoint.configprops.cache.time-to-live

0ms

Maximum time that a response can be cached.

management.endpoint.configprops.enabled

true

Whether to enable the configprops endpoint.

management.endpoint.configprops.keys-to-sanitize

[password, secret, key, token, .*credentials.*, vcap_services, sun.java.command]

Keys that should be sanitized. Keys can be simple strings that the property ends with or regular expressions.

management.endpoint.env.cache.time-to-live

0ms

Maximum time that a response can be cached.

management.endpoint.env.enabled

true

Whether to enable the env endpoint.

management.endpoint.env.keys-to-sanitize

[password, secret, key, token, .*credentials.*, vcap_services, sun.java.command]

Keys that should be sanitized. Keys can be simple strings that the property ends with or regular expressions.

management.endpoint.flyway.cache.time-to-live

0ms

Maximum time that a response can be cached.

management.endpoint.flyway.enabled

true

Whether to enable the flyway endpoint.

management.endpoint.health.cache.time-to-live

0ms

Maximum time that a response can be cached.

management.endpoint.health.enabled

true

Whether to enable the health endpoint.

management.endpoint.health.group.*

Health endpoint groups.

management.endpoint.health.probes.enabled

false

Whether to enable liveness and readiness probes.

management.endpoint.health.roles

Roles used to determine whether or not a user is authorized to be shown details. When empty, all authenticated users are authorized.

management.endpoint.health.show-components

When to show components. If not specified the 'show-details' setting will be used.

management.endpoint.health.show-details

never

When to show full health details.

management.endpoint.health.status.http-mapping.*

Mapping of health statuses to HTTP status codes. By default, registered health statuses map to sensible defaults (for example, UP maps to 200).

management.endpoint.health.status.order

[DOWN, OUT_OF_SERVICE, UP, UNKNOWN]

Comma-separated list of health statuses in order of severity.

management.endpoint.heapdump.cache.time-to-live

0ms

Maximum time that a response can be cached.

management.endpoint.heapdump.enabled

true

Whether to enable the heapdump endpoint.

management.endpoint.httptrace.cache.time-to-live

0ms

Maximum time that a response can be cached.

management.endpoint.httptrace.enabled

true

Whether to enable the httptrace endpoint.

management.endpoint.info.cache.time-to-live

0ms

Maximum time that a response can be cached.

management.endpoint.info.enabled

true

Whether to enable the info endpoint.

management.endpoint.integrationgraph.cache.time-to-live

0ms

Maximum time that a response can be cached.

management.endpoint.integrationgraph.enabled

true

Whether to enable the integrationgraph endpoint.

management.endpoint.jolokia.config.*

Jolokia settings. Refer to the documentation of Jolokia for more details.

management.endpoint.jolokia.enabled

true

Whether to enable the jolokia endpoint.

management.endpoint.liquibase.cache.time-to-live

0ms

Maximum time that a response can be cached.

management.endpoint.liquibase.enabled

true

Whether to enable the liquibase endpoint.

management.endpoint.logfile.cache.time-to-live

0ms

Maximum time that a response can be cached.

management.endpoint.logfile.enabled

true

Whether to enable the logfile endpoint.

management.endpoint.logfile.external-file

External Logfile to be accessed. Can be used if the logfile is written by output redirect and not by the logging system itself.

management.endpoint.loggers.cache.time-to-live

0ms

Maximum time that a response can be cached.

management.endpoint.loggers.enabled

true

Whether to enable the loggers endpoint.

management.endpoint.mappings.cache.time-to-live

0ms

Maximum time that a response can be cached.

management.endpoint.mappings.enabled

true

Whether to enable the mappings endpoint.

management.endpoint.metrics.cache.time-to-live

0ms

Maximum time that a response can be cached.

management.endpoint.metrics.enabled

true

Whether to enable the metrics endpoint.

management.endpoint.prometheus.cache.time-to-live

0ms

Maximum time that a response can be cached.

management.endpoint.prometheus.enabled

true

Whether to enable the prometheus endpoint.

management.endpoint.scheduledtasks.cache.time-to-live

0ms

Maximum time that a response can be cached.

management.endpoint.scheduledtasks.enabled

true

Whether to enable the scheduledtasks endpoint.

management.endpoint.sessions.enabled

true

Whether to enable the sessions endpoint.

management.endpoint.shutdown.enabled

false

Whether to enable the shutdown endpoint.

management.endpoint.startup.enabled

true

Whether to enable the startup endpoint.

management.endpoint.threaddump.cache.time-to-live

0ms

Maximum time that a response can be cached.

management.endpoint.threaddump.enabled

true

Whether to enable the threaddump endpoint.

management.endpoints.enabled-by-default

Whether to enable or disable all endpoints by default.

management.endpoints.jmx.domain

org.springframework.boot

Endpoints JMX domain name. Fallback to 'spring.jmx.default-domain' if set.

management.endpoints.jmx.exposure.exclude

Endpoint IDs that should be excluded or '*' for all.

management.endpoints.jmx.exposure.include

*

Endpoint IDs that should be included or '*' for all.

management.endpoints.jmx.static-names

Additional static properties to append to all ObjectNames of MBeans representing Endpoints.

management.endpoints.migrate-legacy-ids

false

Whether to transparently migrate legacy endpoint IDs.

management.endpoints.web.base-path

/actuator

Base path for Web endpoints. Relative to the servlet context path (server.servlet.context-path) or WebFlux base path (spring.webflux.base-path) when the management server is sharing the main server port. Relative to the management server base path (management.server.base-path) when a separate management server port (management.server.port) is configured.

management.endpoints.web.cors.allow-credentials

Whether credentials are supported. When not set, credentials are not supported.

management.endpoints.web.cors.allowed-headers

Comma-separated list of headers to allow in a request. '*' allows all headers.

management.endpoints.web.cors.allowed-methods

Comma-separated list of methods to allow. '*' allows all methods. When not set, defaults to GET.

management.endpoints.web.cors.allowed-origins

Comma-separated list of origins to allow. '*' allows all origins. When not set, CORS support is disabled.

management.endpoints.web.cors.exposed-headers

Comma-separated list of headers to include in a response.

management.endpoints.web.cors.max-age

1800s

How long the response from a pre-flight request can be cached by clients. If a duration suffix is not specified, seconds will be used.

management.endpoints.web.exposure.exclude

Endpoint IDs that should be excluded or '*' for all.

management.endpoints.web.exposure.include

[health, info]

Endpoint IDs that should be included or '*' for all.

management.endpoints.web.path-mapping.*

Mapping between endpoint IDs and the path that should expose them.

management.health.cassandra.enabled

true

Whether to enable Cassandra health check.

management.health.couchbase.enabled

true

Whether to enable Couchbase health check.

management.health.db.enabled

true

Whether to enable database health check.

management.health.db.ignore-routing-data-sources

false

Whether to ignore AbstractRoutingDataSources when creating database health indicators.

management.health.defaults.enabled

true

Whether to enable default health indicators.

management.health.diskspace.enabled

true

Whether to enable disk space health check.

management.health.diskspace.path

Path used to compute the available disk space.

management.health.diskspace.threshold

10MB

Minimum disk space that should be available.

management.health.elasticsearch.enabled

true

Whether to enable Elasticsearch health check.

management.health.influxdb.enabled

true

Whether to enable InfluxDB health check.

management.health.jms.enabled

true

Whether to enable JMS health check.

management.health.ldap.enabled

true

Whether to enable LDAP health check.

management.health.livenessstate.enabled

false

Whether to enable liveness state health check.

management.health.mail.enabled

true

Whether to enable Mail health check.

management.health.mongo.enabled

true

Whether to enable MongoDB health check.

management.health.neo4j.enabled

true

Whether to enable Neo4j health check.

management.health.ping.enabled

true

Whether to enable ping health check.

management.health.rabbit.enabled

true

Whether to enable RabbitMQ health check.

management.health.readinessstate.enabled

false

Whether to enable readiness state health check.

management.health.redis.enabled

true

Whether to enable Redis health check.

management.health.solr.enabled

true

Whether to enable Solr health check.

management.health.status.order

[DOWN, OUT_OF_SERVICE, UP, UNKNOWN]

management.info.build.enabled

true

Whether to enable build info.

management.info.defaults.enabled

true

Whether to enable default info contributors.

management.info.env.enabled

true

Whether to enable environment info.

management.info.git.enabled

true

Whether to enable git info.

management.info.git.mode

simple

Mode to use to expose git information.

management.metrics.distribution.maximum-expected-value.*

Maximum value that meter IDs starting with the specified name are expected to observe. The longest match wins. Values can be specified as a long or as a Duration value (for timer meters, defaulting to ms if no unit specified).

management.metrics.distribution.minimum-expected-value.*

Minimum value that meter IDs starting with the specified name are expected to observe. The longest match wins. Values can be specified as a long or as a Duration value (for timer meters, defaulting to ms if no unit specified).

management.metrics.distribution.percentiles-histogram.*

Whether meter IDs starting with the specified name should publish percentile histograms. For monitoring systems that support aggregable percentile calculation based on a histogram, this can be set to true. For other systems, this has no effect. The longest match wins, the key `all` can also be used to configure all meters.

management.metrics.distribution.percentiles.*

Specific computed non-aggregable percentiles to ship to the backend for meter IDs starting-with the specified name. The longest match wins, the key `all` can also be used to configure all meters.

management.metrics.distribution.slo.*

Specific service-level objective boundaries for meter IDs starting with the specified name. The longest match wins. Counters will be published for each specified boundary. Values can be specified as a long or as a Duration value (for timer meters, defaulting to ms if no unit specified).

management.metrics.enable.*

Whether meter IDs starting with the specified name should be enabled. The longest match wins, the key `all` can also be used to configure all meters.

management.metrics.export.appoptics.api-token

AppOptics API token.

management.metrics.export.appoptics.batch-size

500

Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.

management.metrics.export.appoptics.connect-timeout

5s

Connection timeout for requests to this backend.

management.metrics.export.appoptics.enabled

true

Whether exporting of metrics to this backend is enabled.

management.metrics.export.appoptics.floor-times

false

Whether to ship a floored time, useful when sending measurements from multiple hosts to align them on a given time boundary.

management.metrics.export.appoptics.host-tag

instance

Tag that will be mapped to "@host" when shipping metrics to AppOptics.

management.metrics.export.appoptics.read-timeout

10s

Read timeout for requests to this backend.

management.metrics.export.appoptics.step

1m

Step size (i.e. reporting frequency) to use.

management.metrics.export.appoptics.uri

https://api.appoptics.com/v1/measurements

URI to ship metrics to.

management.metrics.export.atlas.batch-size

10000

Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.

management.metrics.export.atlas.config-refresh-frequency

10s

Frequency for refreshing config settings from the LWC service.

management.metrics.export.atlas.config-time-to-live

150s

Time to live for subscriptions from the LWC service.

management.metrics.export.atlas.config-uri

http://localhost:7101/lwc/api/v1/expressions/local-dev

URI for the Atlas LWC endpoint to retrieve current subscriptions.

management.metrics.export.atlas.connect-timeout

1s

Connection timeout for requests to this backend.

management.metrics.export.atlas.enabled

true

Whether exporting of metrics to this backend is enabled.

management.metrics.export.atlas.eval-uri

http://localhost:7101/lwc/api/v1/evaluate

URI for the Atlas LWC endpoint to evaluate the data for a subscription.

management.metrics.export.atlas.lwc-enabled

false

Whether to enable streaming to Atlas LWC.

management.metrics.export.atlas.meter-time-to-live

15m

Time to live for meters that do not have any activity. After this period the meter will be considered expired and will not get reported.

management.metrics.export.atlas.num-threads

4

Number of threads to use with the metrics publishing scheduler.

management.metrics.export.atlas.read-timeout

10s

Read timeout for requests to this backend.

management.metrics.export.atlas.step

1m

Step size (i.e. reporting frequency) to use.

management.metrics.export.atlas.uri

http://localhost:7101/api/v1/publish

URI of the Atlas server.

management.metrics.export.datadog.api-key

Datadog API key.

management.metrics.export.datadog.application-key

Datadog application key. Not strictly required, but improves the Datadog experience by sending meter descriptions, types, and base units to Datadog.

management.metrics.export.datadog.batch-size

10000

Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.

management.metrics.export.datadog.connect-timeout

1s

Connection timeout for requests to this backend.

management.metrics.export.datadog.descriptions

true

Whether to publish descriptions metadata to Datadog. Turn this off to minimize the amount of metadata sent.

management.metrics.export.datadog.enabled

true

Whether exporting of metrics to this backend is enabled.

management.metrics.export.datadog.host-tag

instance

Tag that will be mapped to "host" when shipping metrics to Datadog.

management.metrics.export.datadog.read-timeout

10s

Read timeout for requests to this backend.

management.metrics.export.datadog.step

1m

Step size (i.e. reporting frequency) to use.

management.metrics.export.datadog.uri

https://api.datadoghq.com

URI to ship metrics to. If you need to publish metrics to an internal proxy en-route to Datadog, you can define the location of the proxy with this.

management.metrics.export.defaults.enabled

true

Whether to enable default metrics exporters.

management.metrics.export.dynatrace.api-token

Dynatrace authentication token.

management.metrics.export.dynatrace.batch-size

10000

Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.

management.metrics.export.dynatrace.connect-timeout

1s

Connection timeout for requests to this backend.

management.metrics.export.dynatrace.device-id

ID of the custom device that is exporting metrics to Dynatrace.

management.metrics.export.dynatrace.enabled

true

Whether exporting of metrics to this backend is enabled.

management.metrics.export.dynatrace.group

Group for exported metrics. Used to specify custom device group name in the Dynatrace UI.

management.metrics.export.dynatrace.read-timeout

10s

Read timeout for requests to this backend.

management.metrics.export.dynatrace.step

1m

Step size (i.e. reporting frequency) to use.

management.metrics.export.dynatrace.technology-type

java

Technology type for exported metrics. Used to group metrics under a logical technology name in the Dynatrace UI.

management.metrics.export.dynatrace.uri

URI to ship metrics to. Should be used for SaaS, self managed instances or to en-route through an internal proxy.

management.metrics.export.elastic.auto-create-index

true

Whether to create the index automatically if it does not exist.

management.metrics.export.elastic.batch-size

10000

Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.

management.metrics.export.elastic.connect-timeout

1s

Connection timeout for requests to this backend.

management.metrics.export.elastic.enabled

true

Whether exporting of metrics to this backend is enabled.

management.metrics.export.elastic.host

http://localhost:9200

Host to export metrics to.

management.metrics.export.elastic.index

micrometer-metrics

Index to export metrics to.

management.metrics.export.elastic.index-date-format

yyyy-MM

Index date format used for rolling indices. Appended to the index name.

management.metrics.export.elastic.index-date-separator

-

Prefix to separate the index name from the date format used for rolling indices.

management.metrics.export.elastic.password

Login password of the Elastic server.

management.metrics.export.elastic.pipeline

Ingest pipeline name. By default, events are not pre-processed.

management.metrics.export.elastic.read-timeout

10s

Read timeout for requests to this backend.

management.metrics.export.elastic.step

1m

Step size (i.e. reporting frequency) to use.

management.metrics.export.elastic.timestamp-field-name

@timestamp

Name of the timestamp field.

management.metrics.export.elastic.user-name

Login user of the Elastic server.

management.metrics.export.ganglia.addressing-mode

multicast

UDP addressing mode, either unicast or multicast.

management.metrics.export.ganglia.duration-units

milliseconds

Base time unit used to report durations.

management.metrics.export.ganglia.enabled

true

Whether exporting of metrics to Ganglia is enabled.

management.metrics.export.ganglia.host

localhost

Host of the Ganglia server to receive exported metrics.

management.metrics.export.ganglia.port

8649

Port of the Ganglia server to receive exported metrics.

management.metrics.export.ganglia.step

1m

Step size (i.e. reporting frequency) to use.

management.metrics.export.ganglia.time-to-live

1

Time to live for metrics on Ganglia. Set the multi-cast Time-To-Live to be one greater than the number of hops (routers) between the hosts.

management.metrics.export.graphite.duration-units

milliseconds

Base time unit used to report durations.

management.metrics.export.graphite.enabled

true

Whether exporting of metrics to Graphite is enabled.

management.metrics.export.graphite.graphite-tags-enabled

Whether Graphite tags should be used, as opposed to a hierarchical naming convention. Enabled by default unless "tagsAsPrefix" is set.

management.metrics.export.graphite.host

localhost

Host of the Graphite server to receive exported metrics.

management.metrics.export.graphite.port

2004

Port of the Graphite server to receive exported metrics.

management.metrics.export.graphite.protocol

pickled

Protocol to use while shipping data to Graphite.

management.metrics.export.graphite.rate-units

seconds

Base time unit used to report rates.

management.metrics.export.graphite.step

1m

Step size (i.e. reporting frequency) to use.

management.metrics.export.graphite.tags-as-prefix

[]

For the hierarchical naming convention, turn the specified tag keys into part of the metric prefix. Ignored if "graphiteTagsEnabled" is true.

management.metrics.export.humio.api-token

Humio API token.

management.metrics.export.humio.batch-size

10000

Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.

management.metrics.export.humio.connect-timeout

5s

Connection timeout for requests to this backend.

management.metrics.export.humio.enabled

true

Whether exporting of metrics to this backend is enabled.

management.metrics.export.humio.read-timeout

10s

Read timeout for requests to this backend.

management.metrics.export.humio.step

1m

Step size (i.e. reporting frequency) to use.

management.metrics.export.humio.tags.*

Humio tags describing the data source in which metrics will be stored. Humio tags are a distinct concept from Micrometer's tags. Micrometer's tags are used to divide metrics along dimensional boundaries.

management.metrics.export.humio.uri

https://cloud.humio.com

URI to ship metrics to. If you need to publish metrics to an internal proxy en-route to Humio, you can define the location of the proxy with this.

management.metrics.export.influx.auto-create-db

true

Whether to create the Influx database if it does not exist before attempting to publish metrics to it.

management.metrics.export.influx.batch-size

10000

Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.

management.metrics.export.influx.compressed

true

Whether to enable GZIP compression of metrics batches published to Influx.

management.metrics.export.influx.connect-timeout

1s

Connection timeout for requests to this backend.

management.metrics.export.influx.consistency

one

Write consistency for each point.

management.metrics.export.influx.db

mydb

Database to send metrics to.

management.metrics.export.influx.enabled

true

Whether exporting of metrics to this backend is enabled.

management.metrics.export.influx.password

Login password of the Influx server.

management.metrics.export.influx.read-timeout

10s

Read timeout for requests to this backend.

management.metrics.export.influx.retention-duration

Time period for which Influx should retain data in the current database. For instance 7d, check the influx documentation for more details on the duration format.

management.metrics.export.influx.retention-policy

Retention policy to use (Influx writes to the DEFAULT retention policy if one is not specified).

management.metrics.export.influx.retention-replication-factor

How many copies of the data are stored in the cluster. Must be 1 for a single node instance.

management.metrics.export.influx.retention-shard-duration

Time range covered by a shard group. For instance 2w, check the influx documentation for more details on the duration format.

management.metrics.export.influx.step

1m

Step size (i.e. reporting frequency) to use.

management.metrics.export.influx.uri

http://localhost:8086

URI of the Influx server.

management.metrics.export.influx.user-name

Login user of the Influx server.

management.metrics.export.jmx.domain

metrics

Metrics JMX domain name.

management.metrics.export.jmx.enabled

true

Whether exporting of metrics to JMX is enabled.

management.metrics.export.jmx.step

1m

Step size (i.e. reporting frequency) to use.

management.metrics.export.kairos.batch-size

10000

Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.

management.metrics.export.kairos.connect-timeout

1s

Connection timeout for requests to this backend.

management.metrics.export.kairos.enabled

true

Whether exporting of metrics to this backend is enabled.

management.metrics.export.kairos.password

Login password of the KairosDB server.

management.metrics.export.kairos.read-timeout

10s

Read timeout for requests to this backend.

management.metrics.export.kairos.step

1m

Step size (i.e. reporting frequency) to use.

management.metrics.export.kairos.uri

http://localhost:8080/api/v1/datapoints

URI of the KairosDB server.

management.metrics.export.kairos.user-name

Login user of the KairosDB server.

management.metrics.export.newrelic.account-id

New Relic account ID.

management.metrics.export.newrelic.api-key

New Relic API key.

management.metrics.export.newrelic.batch-size

10000

Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.

management.metrics.export.newrelic.client-provider-type

Client provider type to use.

management.metrics.export.newrelic.connect-timeout

1s

Connection timeout for requests to this backend.

management.metrics.export.newrelic.enabled

true

Whether exporting of metrics to this backend is enabled.

management.metrics.export.newrelic.event-type

SpringBootSample

The event type that should be published. This property will be ignored if 'meter-name-event-type-enabled' is set to 'true'.

management.metrics.export.newrelic.meter-name-event-type-enabled

false

Whether to send the meter name as the event type instead of using the 'event-type' configuration property value. Can be set to 'true' if New Relic guidelines are not being followed or event types consistent with previous Spring Boot releases are required.

management.metrics.export.newrelic.read-timeout

10s

Read timeout for requests to this backend.

management.metrics.export.newrelic.step

1m

Step size (i.e. reporting frequency) to use.

management.metrics.export.newrelic.uri

https://insights-collector.newrelic.com

URI to ship metrics to.

management.metrics.export.prometheus.descriptions

true

Whether to enable publishing descriptions as part of the scrape payload to Prometheus. Turn this off to minimize the amount of data sent on each scrape.

management.metrics.export.prometheus.enabled

true

Whether exporting of metrics to Prometheus is enabled.

management.metrics.export.prometheus.histogram-flavor

prometheus

Histogram type for backing DistributionSummary and Timer.

management.metrics.export.prometheus.pushgateway.base-url

http://localhost:9091

Base URL for the Pushgateway.

management.metrics.export.prometheus.pushgateway.enabled

false

Enable publishing via a Prometheus Pushgateway.

management.metrics.export.prometheus.pushgateway.grouping-key.*

Grouping key for the pushed metrics.

management.metrics.export.prometheus.pushgateway.job

Job identifier for this application instance.

management.metrics.export.prometheus.pushgateway.password

Login password of the Prometheus Pushgateway.

management.metrics.export.prometheus.pushgateway.push-rate

1m

Frequency with which to push metrics.

management.metrics.export.prometheus.pushgateway.shutdown-operation

none

Operation that should be performed on shutdown.

management.metrics.export.prometheus.pushgateway.username

Login user of the Prometheus Pushgateway.

management.metrics.export.prometheus.step

1m

Step size (i.e. reporting frequency) to use.

management.metrics.export.signalfx.access-token

SignalFX access token.

management.metrics.export.signalfx.batch-size

10000

Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.

management.metrics.export.signalfx.connect-timeout

1s

Connection timeout for requests to this backend.

management.metrics.export.signalfx.enabled

true

Whether exporting of metrics to this backend is enabled.

management.metrics.export.signalfx.read-timeout

10s

Read timeout for requests to this backend.

management.metrics.export.signalfx.source

Uniquely identifies the app instance that is publishing metrics to SignalFx. Defaults to the local host name.

management.metrics.export.signalfx.step

10s

Step size (i.e. reporting frequency) to use.

management.metrics.export.signalfx.uri

https://ingest.signalfx.com

URI to ship metrics to.

management.metrics.export.simple.enabled

true

Whether, in the absence of any other exporter, exporting of metrics to an in-memory backend is enabled.

management.metrics.export.simple.mode

cumulative

Counting mode.

management.metrics.export.simple.step

1m

Step size (i.e. reporting frequency) to use.

management.metrics.export.stackdriver.batch-size

10000

Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.

management.metrics.export.stackdriver.connect-timeout

1s

Connection timeout for requests to this backend.

management.metrics.export.stackdriver.enabled

true

Whether exporting of metrics to this backend is enabled.

management.metrics.export.stackdriver.project-id

Identifier of the Google Cloud project to monitor.

management.metrics.export.stackdriver.read-timeout

10s

Read timeout for requests to this backend.

management.metrics.export.stackdriver.resource-type

global

Monitored resource type.

management.metrics.export.stackdriver.step

1m

Step size (i.e. reporting frequency) to use.

management.metrics.export.statsd.enabled

true

Whether exporting of metrics to StatsD is enabled.

management.metrics.export.statsd.flavor

datadog

StatsD line protocol to use.

management.metrics.export.statsd.host

localhost

Host of the StatsD server to receive exported metrics.

management.metrics.export.statsd.max-packet-length

1400

Total length of a single payload should be kept within your network's MTU.

management.metrics.export.statsd.polling-frequency

10s

How often gauges will be polled. When a gauge is polled, its value is recalculated and if the value has changed (or publishUnchangedMeters is true), it is sent to the StatsD server.

management.metrics.export.statsd.port

8125

Port of the StatsD server to receive exported metrics.

management.metrics.export.statsd.protocol

udp

Protocol of the StatsD server to receive exported metrics.

management.metrics.export.statsd.publish-unchanged-meters

true

Whether to send unchanged meters to the StatsD server.

management.metrics.export.wavefront.api-token

API token used when publishing metrics directly to the Wavefront API host.

management.metrics.export.wavefront.batch-size

10000

Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.

management.metrics.export.wavefront.enabled

true

Whether exporting of metrics to this backend is enabled.

management.metrics.export.wavefront.global-prefix

Global prefix to separate metrics originating from this app's white box instrumentation from those originating from other Wavefront integrations when viewed in the Wavefront UI.

management.metrics.export.wavefront.sender.flush-interval

1s

management.metrics.export.wavefront.sender.max-queue-size

50000

management.metrics.export.wavefront.sender.message-size

management.metrics.export.wavefront.source

Unique identifier for the app instance that is the source of metrics being published to Wavefront. Defaults to the local host name.

management.metrics.export.wavefront.step

1m

Step size (i.e. reporting frequency) to use.

management.metrics.export.wavefront.uri

https://longboard.wavefront.com

URI to ship metrics to.

management.metrics.tags.*

Common tags that are applied to every meter.

management.metrics.use-global-registry

true

Whether auto-configured MeterRegistry implementations should be bound to the global static registry on Metrics. For testing, set this to 'false' to maximize test independence.

management.metrics.web.client.max-uri-tags

100

Maximum number of unique URI tag values allowed. After the max number of tag values is reached, metrics with additional tag values are denied by filter.

management.metrics.web.client.request.autotime.enabled

true

Whether to automatically time web client requests.

management.metrics.web.client.request.autotime.percentiles

Computed non-aggregable percentiles to publish.

management.metrics.web.client.request.autotime.percentiles-histogram

false

Whether percentile histograms should be published.

management.metrics.web.client.request.metric-name

http.client.requests

Name of the metric for sent requests.

management.metrics.web.server.max-uri-tags

100

Maximum number of unique URI tag values allowed. After the max number of tag values is reached, metrics with additional tag values are denied by filter.

management.metrics.web.server.request.autotime.enabled

true

Whether to automatically time web server requests.

management.metrics.web.server.request.autotime.percentiles

Computed non-aggregable percentiles to publish.

management.metrics.web.server.request.autotime.percentiles-histogram

false

Whether percentile histograms should be published.

management.metrics.web.server.request.ignore-trailing-slash

true

Whether the trailing slash should be ignored when recording metrics.

management.metrics.web.server.request.metric-name

http.server.requests

Name of the metric for received requests.

management.server.add-application-context-header

false

Add the "X-Application-Context" HTTP header in each response.

management.server.address

Network address to which the management endpoints should bind. Requires a custom management.server.port.

management.server.base-path

Management endpoint base path (for instance, `/management`). Requires a custom management.server.port.

management.server.port

Management endpoint HTTP port (uses the same port as the application by default). Configure a different port to use management-specific SSL.

management.server.ssl.ciphers

Supported SSL ciphers.

management.server.ssl.client-auth

Client authentication mode. Requires a trust store.

management.server.ssl.enabled

true

Whether to enable SSL support.

management.server.ssl.enabled-protocols

Enabled SSL protocols.

management.server.ssl.key-alias

Alias that identifies the key in the key store.

management.server.ssl.key-password

Password used to access the key in the key store.

management.server.ssl.key-store

Path to the key store that holds the SSL certificate (typically a jks file).

management.server.ssl.key-store-password

Password used to access the key store.

management.server.ssl.key-store-provider

Provider for the key store.

management.server.ssl.key-store-type

Type of the key store.

management.server.ssl.protocol

TLS

SSL protocol to use.

management.server.ssl.trust-store

Trust store that holds SSL certificates.

management.server.ssl.trust-store-password

Password used to access the trust store.

management.server.ssl.trust-store-provider

Provider for the trust store.

management.server.ssl.trust-store-type

Type of the trust store.

management.trace.http.enabled

true

Whether to enable HTTP request-response tracing.

management.trace.http.include

[request-headers, response-headers, errors]

Items to be included in the trace. Defaults to request headers (excluding Authorization and Cookie), response headers (excluding Set-Cookie), and time taken.

10.A.15. Devtools Properties
Key	Default Value	Description
spring.devtools.add-properties

true

Whether to enable development property defaults.

spring.devtools.livereload.enabled

true

Whether to enable a livereload.com-compatible server.

spring.devtools.livereload.port

35729

Server port.

spring.devtools.remote.context-path

/.~~spring-boot!~

Context path used to handle the remote connection.

spring.devtools.remote.proxy.host

The host of the proxy to use to connect to the remote application.

spring.devtools.remote.proxy.port

The port of the proxy to use to connect to the remote application.

spring.devtools.remote.restart.enabled

true

Whether to enable remote restart.

spring.devtools.remote.secret

A shared secret required to establish a connection (required to enable remote support).

spring.devtools.remote.secret-header-name

X-AUTH-TOKEN

HTTP header used to transfer the shared secret.

spring.devtools.restart.additional-exclude

Additional patterns that should be excluded from triggering a full restart.

spring.devtools.restart.additional-paths

Additional paths to watch for changes.

spring.devtools.restart.enabled

true

Whether to enable automatic restart.

spring.devtools.restart.exclude

META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Tests.class,git.properties,META-INF/build-info.properties

Patterns that should be excluded from triggering a full restart.

spring.devtools.restart.log-condition-evaluation-delta

true

Whether to log the condition evaluation delta upon restart.

spring.devtools.restart.poll-interval

1s

Amount of time to wait between polling for classpath changes.

spring.devtools.restart.quiet-period

400ms

Amount of quiet time required without any classpath changes before a restart is triggered.

spring.devtools.restart.trigger-file

Name of a specific file that, when changed, triggers the restart check. Must be a simple name (without any path) of a file that appears on your classpath. If not specified, any classpath file change triggers the restart.

10.A.16. Testing Properties
Key	Default Value	Description
spring.test.database.replace

any

Type of existing DataSource to replace.

spring.test.mockmvc.print

default

MVC Print option.

Appendix B: Configuration Metadata
Spring Boot jars include metadata files that provide details of all supported configuration properties. The files are designed to let IDE developers offer contextual help and “code completion” as users are working with application.properties or application.yml files.

The majority of the metadata file is generated automatically at compile time by processing all items annotated with @ConfigurationProperties. However, it is possible to write part of the metadata manually for corner cases or more advanced use cases.

10.B.1. Metadata Format
Configuration metadata files are located inside jars under META-INF/spring-configuration-metadata.json. They use a JSON format with items categorized under either “groups” or “properties” and additional values hints categorized under "hints", as shown in the following example:

{"groups": [
    {
        "name": "server",
        "type": "org.springframework.boot.autoconfigure.web.ServerProperties",
        "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
        "name": "spring.jpa.hibernate",
        "type": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate",
        "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
        "sourceMethod": "getHibernate()"
    }
    ...
],"properties": [
    {
        "name": "server.port",
        "type": "java.lang.Integer",
        "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
        "name": "server.address",
        "type": "java.net.InetAddress",
        "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
          "name": "spring.jpa.hibernate.ddl-auto",
          "type": "java.lang.String",
          "description": "DDL mode. This is actually a shortcut for the \"hibernate.hbm2ddl.auto\" property.",
          "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate"
    }
    ...
],"hints": [
    {
        "name": "spring.jpa.hibernate.ddl-auto",
        "values": [
            {
                "value": "none",
                "description": "Disable DDL handling."
            },
            {
                "value": "validate",
                "description": "Validate the schema, make no changes to the database."
            },
            {
                "value": "update",
                "description": "Update the schema if necessary."
            },
            {
                "value": "create",
                "description": "Create the schema and destroy previous data."
            },
            {
                "value": "create-drop",
                "description": "Create and then destroy the schema at the end of the session."
            }
        ]
    }
]}
Each “property” is a configuration item that the user specifies with a given value. For example, server.port and server.address might be specified in application.properties, as follows:

server.port=9090
server.address=127.0.0.1
The “groups” are higher level items that do not themselves specify a value but instead provide a contextual grouping for properties. For example, the server.port and server.address properties are part of the server group.

It is not required that every “property” has a “group”. Some properties might exist in their own right.
Finally, “hints” are additional information used to assist the user in configuring a given property. For example, when a developer is configuring the spring.jpa.hibernate.ddl-auto property, a tool can use the hints to offer some auto-completion help for the none, validate, update, create, and create-drop values.

Group Attributes
The JSON object contained in the groups array can contain the attributes shown in the following table:

Name	Type	Purpose
name

String

The full name of the group. This attribute is mandatory.

type

String

The class name of the data type of the group. For example, if the group were based on a class annotated with @ConfigurationProperties, the attribute would contain the fully qualified name of that class. If it were based on a @Bean method, it would be the return type of that method. If the type is not known, the attribute may be omitted.

description

String

A short description of the group that can be displayed to users. If no description is available, it may be omitted. It is recommended that descriptions be short paragraphs, with the first line providing a concise summary. The last line in the description should end with a period (.).

sourceType

String

The class name of the source that contributed this group. For example, if the group were based on a @Bean method annotated with @ConfigurationProperties, this attribute would contain the fully qualified name of the @Configuration class that contains the method. If the source type is not known, the attribute may be omitted.

sourceMethod

String

The full name of the method (include parenthesis and argument types) that contributed this group (for example, the name of a @ConfigurationProperties annotated @Bean method). If the source method is not known, it may be omitted.

Property Attributes
The JSON object contained in the properties array can contain the attributes described in the following table:

Name	Type	Purpose
name

String

The full name of the property. Names are in lower-case period-separated form (for example, server.address). This attribute is mandatory.

type

String

The full signature of the data type of the property (for example, java.lang.String) but also a full generic type (such as java.util.Map<java.lang.String,acme.MyEnum>). You can use this attribute to guide the user as to the types of values that they can enter. For consistency, the type of a primitive is specified by using its wrapper counterpart (for example, boolean becomes java.lang.Boolean). Note that this class may be a complex type that gets converted from a String as values are bound. If the type is not known, it may be omitted.

description

String

A short description of the property that can be displayed to users. If no description is available, it may be omitted. It is recommended that descriptions be short paragraphs, with the first line providing a concise summary. The last line in the description should end with a period (.).

sourceType

String

The class name of the source that contributed this property. For example, if the property were from a class annotated with @ConfigurationProperties, this attribute would contain the fully qualified name of that class. If the source type is unknown, it may be omitted.

defaultValue

Object

The default value, which is used if the property is not specified. If the type of the property is an array, it can be an array of value(s). If the default value is unknown, it may be omitted.

deprecation

Deprecation

Specify whether the property is deprecated. If the field is not deprecated or if that information is not known, it may be omitted. The next table offers more detail about the deprecation attribute.

The JSON object contained in the deprecation attribute of each properties element can contain the following attributes:

Name	Type	Purpose
level

String

The level of deprecation, which can be either warning (the default) or error. When a property has a warning deprecation level, it should still be bound in the environment. However, when it has an error deprecation level, the property is no longer managed and is not bound.

reason

String

A short description of the reason why the property was deprecated. If no reason is available, it may be omitted. It is recommended that descriptions be short paragraphs, with the first line providing a concise summary. The last line in the description should end with a period (.).

replacement

String

The full name of the property that replaces this deprecated property. If there is no replacement for this property, it may be omitted.

Prior to Spring Boot 1.3, a single deprecated boolean attribute can be used instead of the deprecation element. This is still supported in a deprecated fashion and should no longer be used. If no reason and replacement are available, an empty deprecation object should be set.
Deprecation can also be specified declaratively in code by adding the @DeprecatedConfigurationProperty annotation to the getter exposing the deprecated property. For instance, assume that the app.acme.target property was confusing and was renamed to app.acme.name. The following example shows how to handle that situation:

@ConfigurationProperties("app.acme")
public class AcmeProperties {

    private String name;

    public String getName() { ... }

    public void setName(String name) { ... }

    @DeprecatedConfigurationProperty(replacement = "app.acme.name")
    @Deprecated
    public String getTarget() {
        return getName();
    }

    @Deprecated
    public void setTarget(String target) {
        setName(target);
    }
}
There is no way to set a level. warning is always assumed, since code is still handling the property.
The preceding code makes sure that the deprecated property still works (delegating to the name property behind the scenes). Once the getTarget and setTarget methods can be removed from your public API, the automatic deprecation hint in the metadata goes away as well. If you want to keep a hint, adding manual metadata with an error deprecation level ensures that users are still informed about that property. Doing so is particularly useful when a replacement is provided.

Hint Attributes
The JSON object contained in the hints array can contain the attributes shown in the following table:

Name	Type	Purpose
name

String

The full name of the property to which this hint refers. Names are in lower-case period-separated form (such as spring.mvc.servlet.path). If the property refers to a map (such as system.contexts), the hint either applies to the keys of the map (system.contexts.keys) or the values (system.contexts.values) of the map. This attribute is mandatory.

values

ValueHint[]

A list of valid values as defined by the ValueHint object (described in the next table). Each entry defines the value and may have a description.

providers

ValueProvider[]

A list of providers as defined by the ValueProvider object (described later in this document). Each entry defines the name of the provider and its parameters, if any.

The JSON object contained in the values attribute of each hint element can contain the attributes described in the following table:

Name	Type	Purpose
value

Object

A valid value for the element to which the hint refers. If the type of the property is an array, it can also be an array of value(s). This attribute is mandatory.

description

String

A short description of the value that can be displayed to users. If no description is available, it may be omitted. It is recommended that descriptions be short paragraphs, with the first line providing a concise summary. The last line in the description should end with a period (.).

The JSON object contained in the providers attribute of each hint element can contain the attributes described in the following table:

Name	Type	Purpose
name

String

The name of the provider to use to offer additional content assistance for the element to which the hint refers.

parameters

JSON object

Any additional parameter that the provider supports (check the documentation of the provider for more details).

Repeated Metadata Items
Objects with the same “property” and “group” name can appear multiple times within a metadata file. For example, you could bind two separate classes to the same prefix, with each having potentially overlapping property names. While the same names appearing in the metadata multiple times should not be common, consumers of metadata should take care to ensure that they support it.

10.B.2. Providing Manual Hints
To improve the user experience and further assist the user in configuring a given property, you can provide additional metadata that:

Describes the list of potential values for a property.

Associates a provider, to attach a well defined semantic to a property, so that a tool can discover the list of potential values based on the project’s context.

Value Hint
The name attribute of each hint refers to the name of a property. In the initial example shown earlier, we provide five values for the spring.jpa.hibernate.ddl-auto property: none, validate, update, create, and create-drop. Each value may have a description as well.

If your property is of type Map, you can provide hints for both the keys and the values (but not for the map itself). The special .keys and .values suffixes must refer to the keys and the values, respectively.

Assume a sample.contexts maps magic String values to an integer, as shown in the following example:

@ConfigurationProperties("sample")
public class SampleProperties {

    private Map<String,Integer> contexts;
    // getters and setters
}
The magic values are (in this example) are sample1 and sample2. In order to offer additional content assistance for the keys, you could add the following JSON to the manual metadata of the module:

{"hints": [
    {
        "name": "sample.contexts.keys",
        "values": [
            {
                "value": "sample1"
            },
            {
                "value": "sample2"
            }
        ]
    }
]}
We recommend that you use an Enum for those two values instead. If your IDE supports it, this is by far the most effective approach to auto-completion.
Value Providers
Providers are a powerful way to attach semantics to a property. In this section, we define the official providers that you can use for your own hints. However, your favorite IDE may implement some of these or none of them. Also, it could eventually provide its own.

As this is a new feature, IDE vendors must catch up with how it works. Adoption times naturally vary.
The following table summarizes the list of supported providers:

Name	Description
any

Permits any additional value to be provided.

class-reference

Auto-completes the classes available in the project. Usually constrained by a base class that is specified by the target parameter.

handle-as

Handles the property as if it were defined by the type defined by the mandatory target parameter.

logger-name

Auto-completes valid logger names and logger groups. Typically, package and class names available in the current project can be auto-completed as well as defined groups.

spring-bean-reference

Auto-completes the available bean names in the current project. Usually constrained by a base class that is specified by the target parameter.

spring-profile-name

Auto-completes the available Spring profile names in the project.

Only one provider can be active for a given property, but you can specify several providers if they can all manage the property in some way. Make sure to place the most powerful provider first, as the IDE must use the first one in the JSON section that it can handle. If no provider for a given property is supported, no special content assistance is provided, either.
Any
The special any provider value permits any additional values to be provided. Regular value validation based on the property type should be applied if this is supported.

This provider is typically used if you have a list of values and any extra values should still be considered as valid.

The following example offers on and off as auto-completion values for system.state:

{"hints": [
    {
        "name": "system.state",
        "values": [
            {
                "value": "on"
            },
            {
                "value": "off"
            }
        ],
        "providers": [
            {
                "name": "any"
            }
        ]
    }
]}
Note that, in the preceding example, any other value is also allowed.

Class Reference
The class-reference provider auto-completes classes available in the project. This provider supports the following parameters:

Parameter	Type	Default value	Description
target

String (Class)

none

The fully qualified name of the class that should be assignable to the chosen value. Typically used to filter out-non candidate classes. Note that this information can be provided by the type itself by exposing a class with the appropriate upper bound.

concrete

boolean

true

Specify whether only concrete classes are to be considered as valid candidates.

The following metadata snippet corresponds to the standard server.servlet.jsp.class-name property that defines the JspServlet class name to use:

{"hints": [
    {
        "name": "server.servlet.jsp.class-name",
        "providers": [
            {
                "name": "class-reference",
                "parameters": {
                    "target": "javax.servlet.http.HttpServlet"
                }
            }
        ]
    }
]}
Handle As
The handle-as provider lets you substitute the type of the property to a more high-level type. This typically happens when the property has a java.lang.String type, because you do not want your configuration classes to rely on classes that may not be on the classpath. This provider supports the following parameters:

Parameter	Type	Default value	Description
target

String (Class)

none

The fully qualified name of the type to consider for the property. This parameter is mandatory.

The following types can be used:

Any java.lang.Enum: Lists the possible values for the property. (We recommend defining the property with the Enum type, as no further hint should be required for the IDE to auto-complete the values)

java.nio.charset.Charset: Supports auto-completion of charset/encoding values (such as UTF-8)

java.util.Locale: auto-completion of locales (such as en_US)

org.springframework.util.MimeType: Supports auto-completion of content type values (such as text/plain)

org.springframework.core.io.Resource: Supports auto-completion of Spring’s Resource abstraction to refer to a file on the filesystem or on the classpath (such as classpath:/sample.properties)

If multiple values can be provided, use a Collection or Array type to teach the IDE about it.
The following metadata snippet corresponds to the standard spring.liquibase.change-log property that defines the path to the changelog to use. It is actually used internally as a org.springframework.core.io.Resource but cannot be exposed as such, because we need to keep the original String value to pass it to the Liquibase API.

{"hints": [
    {
        "name": "spring.liquibase.change-log",
        "providers": [
            {
                "name": "handle-as",
                "parameters": {
                    "target": "org.springframework.core.io.Resource"
                }
            }
        ]
    }
]}
Logger Name
The logger-name provider auto-completes valid logger names and logger groups. Typically, package and class names available in the current project can be auto-completed. If groups are enabled (default) and if a custom logger group is identified in the configuration, auto-completion for it should be provided. Specific frameworks may have extra magic logger names that can be supported as well.

This provider supports the following parameters:

Parameter	Type	Default value	Description
group

boolean

true

Specify whether known groups should be considered.

Since a logger name can be any arbitrary name, this provider should allow any value but could highlight valid package and class names that are not available in the project’s classpath.

The following metadata snippet corresponds to the standard logging.level property. Keys are logger names, and values correspond to the standard log levels or any custom level. As Spring Boot defines a few logger groups out-of-the-box, dedicated value hints have been added for those.

{"hints": [
    {
        "name": "logging.level.keys",
        "values": [
            {
                "value": "root",
                "description": "Root logger used to assign the default logging level."
            },
            {
                "value": "sql",
                "description": "SQL logging group including Hibernate SQL logger."
            },
            {
                "value": "web",
                "description": "Web logging group including codecs."
            }
        ],
        "providers": [
            {
                "name": "logger-name"
            }
        ]
    },
    {
        "name": "logging.level.values",
        "values": [
            {
                "value": "trace"
            },
            {
                "value": "debug"
            },
            {
                "value": "info"
            },
            {
                "value": "warn"
            },
            {
                "value": "error"
            },
            {
                "value": "fatal"
            },
            {
                "value": "off"
            }

        ],
        "providers": [
            {
                "name": "any"
            }
        ]
    }
]}
Spring Bean Reference
The spring-bean-reference provider auto-completes the beans that are defined in the configuration of the current project. This provider supports the following parameters:

Parameter	Type	Default value	Description
target

String (Class)

none

The fully qualified name of the bean class that should be assignable to the candidate. Typically used to filter out non-candidate beans.

The following metadata snippet corresponds to the standard spring.jmx.server property that defines the name of the MBeanServer bean to use:

{"hints": [
    {
        "name": "spring.jmx.server",
        "providers": [
            {
                "name": "spring-bean-reference",
                "parameters": {
                    "target": "javax.management.MBeanServer"
                }
            }
        ]
    }
]}
The binder is not aware of the metadata. If you provide that hint, you still need to transform the bean name into an actual Bean reference using by the ApplicationContext.
Spring Profile Name
The spring-profile-name provider auto-completes the Spring profiles that are defined in the configuration of the current project.

The following metadata snippet corresponds to the standard spring.profiles.active property that defines the name of the Spring profile(s) to enable:

{"hints": [
    {
        "name": "spring.profiles.active",
        "providers": [
            {
                "name": "spring-profile-name"
            }
        ]
    }
]}
10.B.3. Generating Your Own Metadata by Using the Annotation Processor
You can easily generate your own configuration metadata file from items annotated with @ConfigurationProperties by using the spring-boot-configuration-processor jar. The jar includes a Java annotation processor which is invoked as your project is compiled.

Configuring the Annotation Processor
To use the processor, include a dependency on spring-boot-configuration-processor.

With Maven the dependency should be declared as optional, as shown in the following example:

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-configuration-processor</artifactId>
    <optional>true</optional>
</dependency>
With Gradle, the dependency should be declared in the annotationProcessor configuration, as shown in the following example:

dependencies {
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}
If you are using an additional-spring-configuration-metadata.json file, the compileJava task should be configured to depend on the processResources task, as shown in the following example:

compileJava.inputs.files(processResources)
This dependency ensures that the additional metadata is available when the annotation processor runs during compilation.

If you are using AspectJ in your project, you need to make sure that the annotation processor runs only once. There are several ways to do this. With Maven, you can configure the maven-apt-plugin explicitly and add the dependency to the annotation processor only there. You could also let the AspectJ plugin run all the processing and disable annotation processing in the maven-compiler-plugin configuration, as follows:

<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <configuration>
        <proc>none</proc>
    </configuration>
</plugin>
Automatic Metadata Generation
The processor picks up both classes and methods that are annotated with @ConfigurationProperties.

If the class is also annotated with @ConstructorBinding, a single constructor is expected and one property is created per constructor parameter. Otherwise, properties are discovered through the presence of standard getters and setters with special handling for collection and map types (that is detected even if only a getter is present). The annotation processor also supports the use of the @Data, @Getter, and @Setter lombok annotations.

Consider the following example:

@ConfigurationProperties(prefix="server")
public class ServerProperties {

    /**
    * Name of the server.
    */
    private String name;

    /**
     * IP address to listen to.
     */
    private String ip = "127.0.0.1";

    /**
    * Port to listener to.
    */
    private int port = 9797;

    // ... getter and setters

}
This exposes three properties where server.name has no default and server.ip and server.port defaults to "127.0.0.1" and 9797 respectively. The Javadoc on fields is used to populate the description attribute. For instance, the description of server.ip is "IP address to listen to.".

You should only use plain text with @ConfigurationProperties field Javadoc, since they are not processed before being added to the JSON.
The annotation processor applies a number of heuristics to extract the default value from the source model. Default values have to be provided statically. In particular, do not refer to a constant defined in another class. Also, the annotation processor cannot auto-detect default values for Enums and Collectionss.

For cases where the default value could not be detected, manual metadata should be provided. Consider the following example:

@ConfigurationProperties(prefix = "acme.messaging")
public class MessagingProperties {

    private List<String> addresses = new ArrayList<>(Arrays.asList("a", "b"));

    private ContainerType containerType = ContainerType.SIMPLE;

    // ... getter and setters

    public enum ContainerType {

        SIMPLE,
        DIRECT

    }

}
In order to document default values for properties in the class above, you could add the following content to the manual metadata of the module:

{"properties": [
    {
        "name": "acme.messaging.addresses",
        "defaultValue": ["a", "b"]
    },
    {
        "name": "acme.messaging.container-type",
        "defaultValue": "simple"
    }
]}
Only the name of the property is required to document additional metadata for existing properties.
Nested Properties
The annotation processor automatically considers inner classes as nested properties. Rather than documenting the ip and port at the root of the namespace, we could create a sub-namespace for it. Consider the updated example:

@ConfigurationProperties(prefix="server")
public class ServerProperties {

    private String name;

    private Host host;

    // ... getter and setters

    public static class Host {

        private String ip;

        private int port;

        // ... getter and setters

    }

}
The preceding example produces metadata information for server.name, server.host.ip, and server.host.port properties. You can use the @NestedConfigurationProperty annotation on a field to indicate that a regular (non-inner) class should be treated as if it were nested.

This has no effect on collections and maps, as those types are automatically identified, and a single metadata property is generated for each of them.
Adding Additional Metadata
Spring Boot’s configuration file handling is quite flexible, and it is often the case that properties may exist that are not bound to a @ConfigurationProperties bean. You may also need to tune some attributes of an existing key. To support such cases and let you provide custom "hints", the annotation processor automatically merges items from META-INF/additional-spring-configuration-metadata.json into the main metadata file.

If you refer to a property that has been detected automatically, the description, default value, and deprecation information are overridden, if specified. If the manual property declaration is not identified in the current module, it is added as a new property.

The format of the additional-spring-configuration-metadata.json file is exactly the same as the regular spring-configuration-metadata.json. The additional properties file is optional. If you do not have any additional properties, do not add the file.

Appendix C: Auto-configuration Classes
This appendix contains details of all of the auto-configuration classes provided by Spring Boot, with links to documentation and source code. Remember to also look at the conditions report in your application for more details of which features are switched on. (To do so, start the app with --debug or -Ddebug or, in an Actuator application, use the conditions endpoint).

10.C.1. spring-boot-autoconfigure
The following auto-configuration classes are from the spring-boot-autoconfigure module:

Configuration Class	Links
ActiveMQAutoConfiguration

javadoc

AopAutoConfiguration

javadoc

ApplicationAvailabilityAutoConfiguration

javadoc

ArtemisAutoConfiguration

javadoc

BatchAutoConfiguration

javadoc

CacheAutoConfiguration

javadoc

CassandraAutoConfiguration

javadoc

CassandraDataAutoConfiguration

javadoc

CassandraReactiveDataAutoConfiguration

javadoc

CassandraReactiveRepositoriesAutoConfiguration

javadoc

CassandraRepositoriesAutoConfiguration

javadoc

ClientHttpConnectorAutoConfiguration

javadoc

CodecsAutoConfiguration

javadoc

ConfigurationPropertiesAutoConfiguration

javadoc

CouchbaseAutoConfiguration

javadoc

CouchbaseDataAutoConfiguration

javadoc

CouchbaseReactiveDataAutoConfiguration

javadoc

CouchbaseReactiveRepositoriesAutoConfiguration

javadoc

CouchbaseRepositoriesAutoConfiguration

javadoc

DataSourceAutoConfiguration

javadoc

DataSourceTransactionManagerAutoConfiguration

javadoc

DispatcherServletAutoConfiguration

javadoc

ElasticsearchDataAutoConfiguration

javadoc

ElasticsearchRepositoriesAutoConfiguration

javadoc

ElasticsearchRestClientAutoConfiguration

javadoc

EmbeddedLdapAutoConfiguration

javadoc

EmbeddedMongoAutoConfiguration

javadoc

EmbeddedWebServerFactoryCustomizerAutoConfiguration

javadoc

ErrorMvcAutoConfiguration

javadoc

ErrorWebFluxAutoConfiguration

javadoc

FlywayAutoConfiguration

javadoc

FreeMarkerAutoConfiguration

javadoc

GroovyTemplateAutoConfiguration

javadoc

GsonAutoConfiguration

javadoc

H2ConsoleAutoConfiguration

javadoc

HazelcastAutoConfiguration

javadoc

HazelcastJpaDependencyAutoConfiguration

javadoc

HibernateJpaAutoConfiguration

javadoc

HttpEncodingAutoConfiguration

javadoc

HttpHandlerAutoConfiguration

javadoc

HttpMessageConvertersAutoConfiguration

javadoc

HypermediaAutoConfiguration

javadoc

InfluxDbAutoConfiguration

javadoc

IntegrationAutoConfiguration

javadoc

JacksonAutoConfiguration

javadoc

JdbcRepositoriesAutoConfiguration

javadoc

JdbcTemplateAutoConfiguration

javadoc

JerseyAutoConfiguration

javadoc

JmsAutoConfiguration

javadoc

JmxAutoConfiguration

javadoc

JndiConnectionFactoryAutoConfiguration

javadoc

JndiDataSourceAutoConfiguration

javadoc

JooqAutoConfiguration

javadoc

JpaRepositoriesAutoConfiguration

javadoc

JsonbAutoConfiguration

javadoc

JtaAutoConfiguration

javadoc

KafkaAutoConfiguration

javadoc

LdapAutoConfiguration

javadoc

LdapRepositoriesAutoConfiguration

javadoc

LifecycleAutoConfiguration

javadoc

LiquibaseAutoConfiguration

javadoc

MailSenderAutoConfiguration

javadoc

MailSenderValidatorAutoConfiguration

javadoc

MessageSourceAutoConfiguration

javadoc

MongoAutoConfiguration

javadoc

MongoDataAutoConfiguration

javadoc

MongoReactiveAutoConfiguration

javadoc

MongoReactiveDataAutoConfiguration

javadoc

MongoReactiveRepositoriesAutoConfiguration

javadoc

MongoRepositoriesAutoConfiguration

javadoc

MultipartAutoConfiguration

javadoc

MustacheAutoConfiguration

javadoc

Neo4jAutoConfiguration

javadoc

Neo4jDataAutoConfiguration

javadoc

Neo4jReactiveDataAutoConfiguration

javadoc

Neo4jReactiveRepositoriesAutoConfiguration

javadoc

Neo4jRepositoriesAutoConfiguration

javadoc

OAuth2ClientAutoConfiguration

javadoc

OAuth2ResourceServerAutoConfiguration

javadoc

PersistenceExceptionTranslationAutoConfiguration

javadoc

ProjectInfoAutoConfiguration

javadoc

PropertyPlaceholderAutoConfiguration

javadoc

QuartzAutoConfiguration

javadoc

R2dbcAutoConfiguration

javadoc

R2dbcDataAutoConfiguration

javadoc

R2dbcRepositoriesAutoConfiguration

javadoc

R2dbcTransactionManagerAutoConfiguration

javadoc

RSocketMessagingAutoConfiguration

javadoc

RSocketRequesterAutoConfiguration

javadoc

RSocketSecurityAutoConfiguration

javadoc

RSocketServerAutoConfiguration

javadoc

RSocketStrategiesAutoConfiguration

javadoc

RabbitAutoConfiguration

javadoc

ReactiveElasticsearchRepositoriesAutoConfiguration

javadoc

ReactiveElasticsearchRestClientAutoConfiguration

javadoc

ReactiveOAuth2ClientAutoConfiguration

javadoc

ReactiveOAuth2ResourceServerAutoConfiguration

javadoc

ReactiveSecurityAutoConfiguration

javadoc

ReactiveUserDetailsServiceAutoConfiguration

javadoc

ReactiveWebServerFactoryAutoConfiguration

javadoc

RedisAutoConfiguration

javadoc

RedisReactiveAutoConfiguration

javadoc

RedisRepositoriesAutoConfiguration

javadoc

RepositoryRestMvcAutoConfiguration

javadoc

RestTemplateAutoConfiguration

javadoc

Saml2RelyingPartyAutoConfiguration

javadoc

SecurityAutoConfiguration

javadoc

SecurityFilterAutoConfiguration

javadoc

SendGridAutoConfiguration

javadoc

ServletWebServerFactoryAutoConfiguration

javadoc

SessionAutoConfiguration

javadoc

SolrAutoConfiguration

javadoc

SolrRepositoriesAutoConfiguration

javadoc

SpringApplicationAdminJmxAutoConfiguration

javadoc

SpringDataWebAutoConfiguration

javadoc

TaskExecutionAutoConfiguration

javadoc

TaskSchedulingAutoConfiguration

javadoc

ThymeleafAutoConfiguration

javadoc

TransactionAutoConfiguration

javadoc

UserDetailsServiceAutoConfiguration

javadoc

ValidationAutoConfiguration

javadoc

WebClientAutoConfiguration

javadoc

WebFluxAutoConfiguration

javadoc

WebMvcAutoConfiguration

javadoc

WebServiceTemplateAutoConfiguration

javadoc

WebServicesAutoConfiguration

javadoc

WebSocketMessagingAutoConfiguration

javadoc

WebSocketReactiveAutoConfiguration

javadoc

WebSocketServletAutoConfiguration

javadoc

XADataSourceAutoConfiguration

javadoc

10.C.2. spring-boot-actuator-autoconfigure
The following auto-configuration classes are from the spring-boot-actuator-autoconfigure module:

Configuration Class	Links
AppOpticsMetricsExportAutoConfiguration

javadoc

AtlasMetricsExportAutoConfiguration

javadoc

AuditAutoConfiguration

javadoc

AuditEventsEndpointAutoConfiguration

javadoc

AvailabilityHealthContributorAutoConfiguration

javadoc

AvailabilityProbesAutoConfiguration

javadoc

BeansEndpointAutoConfiguration

javadoc

CacheMetricsAutoConfiguration

javadoc

CachesEndpointAutoConfiguration

javadoc

CassandraHealthContributorAutoConfiguration

javadoc

CassandraReactiveHealthContributorAutoConfiguration

javadoc

CloudFoundryActuatorAutoConfiguration

javadoc

CompositeMeterRegistryAutoConfiguration

javadoc

ConditionsReportEndpointAutoConfiguration

javadoc

ConfigurationPropertiesReportEndpointAutoConfiguration

javadoc

ConnectionFactoryHealthContributorAutoConfiguration

javadoc

ConnectionPoolMetricsAutoConfiguration

javadoc

CouchbaseHealthContributorAutoConfiguration

javadoc

CouchbaseReactiveHealthContributorAutoConfiguration

javadoc

DataSourceHealthContributorAutoConfiguration

javadoc

DataSourcePoolMetricsAutoConfiguration

javadoc

DatadogMetricsExportAutoConfiguration

javadoc

DiskSpaceHealthContributorAutoConfiguration

javadoc

DynatraceMetricsExportAutoConfiguration

javadoc

ElasticMetricsExportAutoConfiguration

javadoc

ElasticSearchReactiveHealthContributorAutoConfiguration

javadoc

ElasticSearchRestHealthContributorAutoConfiguration

javadoc

EndpointAutoConfiguration

javadoc

EnvironmentEndpointAutoConfiguration

javadoc

FlywayEndpointAutoConfiguration

javadoc

GangliaMetricsExportAutoConfiguration

javadoc

GraphiteMetricsExportAutoConfiguration

javadoc

HazelcastHealthContributorAutoConfiguration

javadoc

HealthContributorAutoConfiguration

javadoc

HealthEndpointAutoConfiguration

javadoc

HeapDumpWebEndpointAutoConfiguration

javadoc

HibernateMetricsAutoConfiguration

javadoc

HttpClientMetricsAutoConfiguration

javadoc

HttpTraceAutoConfiguration

javadoc

HttpTraceEndpointAutoConfiguration

javadoc

HumioMetricsExportAutoConfiguration

javadoc

InfluxDbHealthContributorAutoConfiguration

javadoc

InfluxMetricsExportAutoConfiguration

javadoc

InfoContributorAutoConfiguration

javadoc

InfoEndpointAutoConfiguration

javadoc

IntegrationGraphEndpointAutoConfiguration

javadoc

JerseyServerMetricsAutoConfiguration

javadoc

JettyMetricsAutoConfiguration

javadoc

JmsHealthContributorAutoConfiguration

javadoc

JmxEndpointAutoConfiguration

javadoc

JmxMetricsExportAutoConfiguration

javadoc

JolokiaEndpointAutoConfiguration

javadoc

JvmMetricsAutoConfiguration

javadoc

KafkaMetricsAutoConfiguration

javadoc

KairosMetricsExportAutoConfiguration

javadoc

LdapHealthContributorAutoConfiguration

javadoc

LiquibaseEndpointAutoConfiguration

javadoc

Log4J2MetricsAutoConfiguration

javadoc

LogFileWebEndpointAutoConfiguration

javadoc

LogbackMetricsAutoConfiguration

javadoc

LoggersEndpointAutoConfiguration

javadoc

MailHealthContributorAutoConfiguration

javadoc

ManagementContextAutoConfiguration

javadoc

ManagementWebSecurityAutoConfiguration

javadoc

MappingsEndpointAutoConfiguration

javadoc

MetricsAutoConfiguration

javadoc

MetricsEndpointAutoConfiguration

javadoc

MongoHealthContributorAutoConfiguration

javadoc

MongoReactiveHealthContributorAutoConfiguration

javadoc

Neo4jHealthContributorAutoConfiguration

javadoc

NewRelicMetricsExportAutoConfiguration

javadoc

PrometheusMetricsExportAutoConfiguration

javadoc

RabbitHealthContributorAutoConfiguration

javadoc

RabbitMetricsAutoConfiguration

javadoc

ReactiveCloudFoundryActuatorAutoConfiguration

javadoc

ReactiveManagementContextAutoConfiguration

javadoc

ReactiveManagementWebSecurityAutoConfiguration

javadoc

RedisHealthContributorAutoConfiguration

javadoc

RedisReactiveHealthContributorAutoConfiguration

javadoc

ScheduledTasksEndpointAutoConfiguration

javadoc

ServletManagementContextAutoConfiguration

javadoc

SessionsEndpointAutoConfiguration

javadoc

ShutdownEndpointAutoConfiguration

javadoc

SignalFxMetricsExportAutoConfiguration

javadoc

SimpleMetricsExportAutoConfiguration

javadoc

SolrHealthContributorAutoConfiguration

javadoc

StackdriverMetricsExportAutoConfiguration

javadoc

StartupEndpointAutoConfiguration

javadoc

StatsdMetricsExportAutoConfiguration

javadoc

SystemMetricsAutoConfiguration

javadoc

ThreadDumpEndpointAutoConfiguration

javadoc

TomcatMetricsAutoConfiguration

javadoc

WavefrontMetricsExportAutoConfiguration

javadoc

WebEndpointAutoConfiguration

javadoc

WebFluxMetricsAutoConfiguration

javadoc

WebMvcMetricsAutoConfiguration

javadoc

Appendix D: Test Auto-configuration Annotations
This appendix describes the @…Test auto-configuration annotations that Spring Boot provides to test slices of your application.

10.D.1. Test Slices
The following table lists the various @…Test annotations that can be used to test slices of your application and the auto-configuration that they import by default:

Test slice	Imported auto-configuration
@DataCassandraTest

org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration

@DataJdbcTest

org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfiguration

@DataJpaTest

org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfiguration org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManagerAutoConfiguration

@DataLdapTest

org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration

@DataMongoTest

org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration

@DataNeo4jTest

org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration org.springframework.boot.autoconfigure.data.neo4j.Neo4jReactiveDataAutoConfiguration org.springframework.boot.autoconfigure.data.neo4j.Neo4jReactiveRepositoriesAutoConfiguration org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration org.springframework.boot.autoconfigure.neo4j.Neo4jAutoConfiguration org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration

@DataR2dbcTest

org.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration org.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration org.springframework.boot.autoconfigure.r2dbc.R2dbcTransactionManagerAutoConfiguration org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration

@DataRedisTest

org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration

@JdbcTest

org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfiguration

@JooqTest

org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration

@JsonTest

org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration org.springframework.boot.test.autoconfigure.json.JsonTestersAutoConfiguration

@RestClientTest

org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerAutoConfiguration org.springframework.boot.test.autoconfigure.web.client.WebClientRestTemplateAutoConfiguration

@WebFluxTest

org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration org.springframework.boot.test.autoconfigure.web.reactive.WebTestClientAutoConfiguration

@WebMvcTest

org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration org.springframework.boot.test.autoconfigure.web.servlet.MockMvcAutoConfiguration org.springframework.boot.test.autoconfigure.web.servlet.MockMvcSecurityConfiguration org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebClientAutoConfiguration org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebDriverAutoConfiguration

@WebServiceClientTest

org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerAutoConfiguration org.springframework.boot.test.autoconfigure.webservices.client.WebServiceClientTemplateAutoConfiguration

Appendix E: The Executable Jar Format
The spring-boot-loader modules lets Spring Boot support executable jar and war files. If you use the Maven plugin or the Gradle plugin, executable jars are automatically generated, and you generally do not need to know the details of how they work.

If you need to create executable jars from a different build system or if you are just curious about the underlying technology, this appendix provides some background.

10.E.1. Nested JARs
Java does not provide any standard way to load nested jar files (that is, jar files that are themselves contained within a jar). This can be problematic if you need to distribute a self-contained application that can be run from the command line without unpacking.

To solve this problem, many developers use “shaded” jars. A shaded jar packages all classes, from all jars, into a single “uber jar”. The problem with shaded jars is that it becomes hard to see which libraries are actually in your application. It can also be problematic if the same filename is used (but with different content) in multiple jars. Spring Boot takes a different approach and lets you actually nest jars directly.

The Executable Jar File Structure
Spring Boot Loader-compatible jar files should be structured in the following way:

example.jar
 |
 +-META-INF
 |  +-MANIFEST.MF
 +-org
 |  +-springframework
 |     +-boot
 |        +-loader
 |           +-<spring boot loader classes>
 +-BOOT-INF
    +-classes
    |  +-mycompany
    |     +-project
    |        +-YourClasses.class
    +-lib
       +-dependency1.jar
       +-dependency2.jar
Application classes should be placed in a nested BOOT-INF/classes directory. Dependencies should be placed in a nested BOOT-INF/lib directory.

The Executable War File Structure
Spring Boot Loader-compatible war files should be structured in the following way:

example.war
 |
 +-META-INF
 |  +-MANIFEST.MF
 +-org
 |  +-springframework
 |     +-boot
 |        +-loader
 |           +-<spring boot loader classes>
 +-WEB-INF
    +-classes
    |  +-com
    |     +-mycompany
    |        +-project
    |           +-YourClasses.class
    +-lib
    |  +-dependency1.jar
    |  +-dependency2.jar
    +-lib-provided
       +-servlet-api.jar
       +-dependency3.jar
Dependencies should be placed in a nested WEB-INF/lib directory. Any dependencies that are required when running embedded but are not required when deploying to a traditional web container should be placed in WEB-INF/lib-provided.

Index Files
Spring Boot Loader-compatible jar and war archives can include additional index files under the BOOT-INF/ directory. A classpath.idx file can be provided for both jars and wars, and it provides the ordering that jars should be added to the classpath. The layers.idx file can be used only for jars, and it allows a jar to be split into logical layers for Docker/OCI image creation.

Index files follow a YAML compatible syntax so that they can be easily parsed by third-party tools. These files, however, are not parsed internally as YAML and they must be written in exactly the formats described below in order to be used.

Classpath Index
The classpath index file can be provided in BOOT-INF/classpath.idx. It provides a list of jar names (including the directory) in the order that they should be added to the classpath. Each line must start with dash space ("-·") and names must be in double quotes.

For example, given the following jar:

example.jar
 |
 +-META-INF
 |  +-...
 +-BOOT-INF
    +-classes
    |  +...
    +-lib
       +-dependency1.jar
       +-dependency2.jar
The index file would look like this:

- "BOOT-INF/lib/dependency2.jar"
- "BOOT-INF/lib/dependency1.jar"
Layer Index
The layers index file can be provided in BOOT-INF/layers.idx. It provides a list of layers and the parts of the jar that should be contained within them. Layers are written in the order that they should be added to the Docker/OCI image. Layers names are written as quoted strings prefixed with dash space ("-·") and with a colon (":") suffix. Layer content is either a file or directory name written as a quoted string prefixed by space space dash space ("··-·"). A directory name ends with /, a file name does not. When a directory name is used it means that all files inside that directory are in the same layer.

A typical example of a layers index would be:

- "dependencies":
  - "BOOT-INF/lib/dependency1.jar"
  - "BOOT-INF/lib/dependency2.jar"
- "application":
  - "BOOT-INF/classes/"
  - "META-INF/"
10.E.2. Spring Boot’s “JarFile” Class
The core class used to support loading nested jars is org.springframework.boot.loader.jar.JarFile. It lets you load jar content from a standard jar file or from nested child jar data. When first loaded, the location of each JarEntry is mapped to a physical file offset of the outer jar, as shown in the following example:

myapp.jar
+-------------------+-------------------------+
| /BOOT-INF/classes | /BOOT-INF/lib/mylib.jar |
|+-----------------+||+-----------+----------+|
||     A.class      |||  B.class  |  C.class ||
|+-----------------+||+-----------+----------+|
+-------------------+-------------------------+
 ^                    ^           ^
 0063                 3452        3980
The preceding example shows how A.class can be found in /BOOT-INF/classes in myapp.jar at position 0063. B.class from the nested jar can actually be found in myapp.jar at position 3452, and C.class is at position 3980.

Armed with this information, we can load specific nested entries by seeking to the appropriate part of the outer jar. We do not need to unpack the archive, and we do not need to read all entry data into memory.

Compatibility with the Standard Java “JarFile”
Spring Boot Loader strives to remain compatible with existing code and libraries. org.springframework.boot.loader.jar.JarFile extends from java.util.jar.JarFile and should work as a drop-in replacement. The getURL() method returns a URL that opens a connection compatible with java.net.JarURLConnection and can be used with Java’s URLClassLoader.

10.E.3. Launching Executable Jars
The org.springframework.boot.loader.Launcher class is a special bootstrap class that is used as an executable jar’s main entry point. It is the actual Main-Class in your jar file, and it is used to setup an appropriate URLClassLoader and ultimately call your main() method.

There are three launcher subclasses (JarLauncher, WarLauncher, and PropertiesLauncher). Their purpose is to load resources (.class files and so on) from nested jar files or war files in directories (as opposed to those explicitly on the classpath). In the case of JarLauncher and WarLauncher, the nested paths are fixed. JarLauncher looks in BOOT-INF/lib/, and WarLauncher looks in WEB-INF/lib/ and WEB-INF/lib-provided/. You can add extra jars in those locations if you want more. The PropertiesLauncher looks in BOOT-INF/lib/ in your application archive by default. You can add additional locations by setting an environment variable called LOADER_PATH or loader.path in loader.properties (which is a comma-separated list of directories, archives, or directories within archives).

Launcher Manifest
You need to specify an appropriate Launcher as the Main-Class attribute of META-INF/MANIFEST.MF. The actual class that you want to launch (that is, the class that contains a main method) should be specified in the Start-Class attribute.

The following example shows a typical MANIFEST.MF for an executable jar file:

Main-Class: org.springframework.boot.loader.JarLauncher
Start-Class: com.mycompany.project.MyApplication
For a war file, it would be as follows:

Main-Class: org.springframework.boot.loader.WarLauncher
Start-Class: com.mycompany.project.MyApplication
You need not specify Class-Path entries in your manifest file. The classpath is deduced from the nested jars.
10.E.4. PropertiesLauncher Features
PropertiesLauncher has a few special features that can be enabled with external properties (System properties, environment variables, manifest entries, or loader.properties). The following table describes these properties:

Key	Purpose
loader.path

Comma-separated Classpath, such as lib,${HOME}/app/lib. Earlier entries take precedence, like a regular -classpath on the javac command line.

loader.home

Used to resolve relative paths in loader.path. For example, given loader.path=lib, then ${loader.home}/lib is a classpath location (along with all jar files in that directory). This property is also used to locate a loader.properties file, as in the following example /opt/app It defaults to ${user.dir}.

loader.args

Default arguments for the main method (space separated).

loader.main

Name of main class to launch (for example, com.app.Application).

loader.config.name

Name of properties file (for example, launcher). It defaults to loader.

loader.config.location

Path to properties file (for example, classpath:loader.properties). It defaults to loader.properties.

loader.system

Boolean flag to indicate that all properties should be added to System properties. It defaults to false.

When specified as environment variables or manifest entries, the following names should be used:

Key	Manifest entry	Environment variable
loader.path

Loader-Path

LOADER_PATH

loader.home

Loader-Home

LOADER_HOME

loader.args

Loader-Args

LOADER_ARGS

loader.main

Start-Class

LOADER_MAIN

loader.config.location

Loader-Config-Location

LOADER_CONFIG_LOCATION

loader.system

Loader-System

LOADER_SYSTEM

Build plugins automatically move the Main-Class attribute to Start-Class when the fat jar is built. If you use that, specify the name of the class to launch by using the Main-Class attribute and leaving out Start-Class.
The following rules apply to working with PropertiesLauncher:

loader.properties is searched for in loader.home, then in the root of the classpath, and then in classpath:/BOOT-INF/classes. The first location where a file with that name exists is used.

loader.home is the directory location of an additional properties file (overriding the default) only when loader.config.location is not specified.

loader.path can contain directories (which are scanned recursively for jar and zip files), archive paths, a directory within an archive that is scanned for jar files (for example, dependencies.jar!/lib), or wildcard patterns (for the default JVM behavior). Archive paths can be relative to loader.home or anywhere in the file system with a jar:file: prefix.

loader.path (if empty) defaults to BOOT-INF/lib (meaning a local directory or a nested one if running from an archive). Because of this, PropertiesLauncher behaves the same as JarLauncher when no additional configuration is provided.

loader.path can not be used to configure the location of loader.properties (the classpath used to search for the latter is the JVM classpath when PropertiesLauncher is launched).

Placeholder replacement is done from System and environment variables plus the properties file itself on all values before use.

The search order for properties (where it makes sense to look in more than one place) is environment variables, system properties, loader.properties, the exploded archive manifest, and the archive manifest.

10.E.5. Executable Jar Restrictions
You need to consider the following restrictions when working with a Spring Boot Loader packaged application:

Zip entry compression: The ZipEntry for a nested jar must be saved by using the ZipEntry.STORED method. This is required so that we can seek directly to individual content within the nested jar. The content of the nested jar file itself can still be compressed, as can any other entries in the outer jar.

System classLoader: Launched applications should use Thread.getContextClassLoader() when loading classes (most libraries and frameworks do so by default). Trying to load nested jar classes with ClassLoader.getSystemClassLoader() fails. java.util.Logging always uses the system classloader. For this reason, you should consider a different logging implementation.

10.E.6. Alternative Single Jar Solutions
If the preceding restrictions mean that you cannot use Spring Boot Loader, consider the following alternatives:

Maven Shade Plugin

JarClassLoader

OneJar

Gradle Shadow Plugin

Appendix F: Dependency versions
This appendix provides details of the dependencies that are managed by Spring Boot.

10.F.1. Managed Dependency Coordinates
The following table provides details of all of the dependency versions that are provided by Spring Boot in its CLI (Command Line Interface), Maven dependency management, and Gradle plugin. When you declare a dependency on one of these artifacts without declaring a version, the version listed in the table is used.

Group ID	Artifact ID	Version
antlr

antlr

2.7.7

ch.qos.logback

logback-access

1.2.3

ch.qos.logback

logback-classic

1.2.3

ch.qos.logback

logback-core

1.2.3

com.atomikos

transactions-jdbc

4.0.6

com.atomikos

transactions-jms

4.0.6

com.atomikos

transactions-jta

4.0.6

com.couchbase.client

java-client

3.0.10

com.datastax.oss

java-driver-core

4.9.0

com.datastax.oss

java-driver-core-shaded

4.9.0

com.datastax.oss

java-driver-mapper-processor

4.9.0

com.datastax.oss

java-driver-mapper-runtime

4.9.0

com.datastax.oss

java-driver-metrics-micrometer

4.9.0

com.datastax.oss

java-driver-metrics-microprofile

4.9.0

com.datastax.oss

java-driver-query-builder

4.9.0

com.datastax.oss

java-driver-shaded-guava

25.1-jre-graal-sub-1

com.datastax.oss

java-driver-test-infra

4.9.0

com.datastax.oss

native-protocol

1.4.11

com.fasterxml

classmate

1.5.1

com.fasterxml.jackson.core

jackson-annotations

2.11.4

com.fasterxml.jackson.core

jackson-core

2.11.4

com.fasterxml.jackson.core

jackson-databind

2.11.4

com.fasterxml.jackson.dataformat

jackson-dataformat-avro

2.11.4

com.fasterxml.jackson.dataformat

jackson-dataformat-cbor

2.11.4

com.fasterxml.jackson.dataformat

jackson-dataformat-csv

2.11.4

com.fasterxml.jackson.dataformat

jackson-dataformat-ion

2.11.4

com.fasterxml.jackson.dataformat

jackson-dataformat-properties

2.11.4

com.fasterxml.jackson.dataformat

jackson-dataformat-protobuf

2.11.4

com.fasterxml.jackson.dataformat

jackson-dataformat-smile

2.11.4

com.fasterxml.jackson.dataformat

jackson-dataformat-xml

2.11.4

com.fasterxml.jackson.dataformat

jackson-dataformat-yaml

2.11.4

com.fasterxml.jackson.datatype

jackson-datatype-eclipse-collections

2.11.4

com.fasterxml.jackson.datatype

jackson-datatype-guava

2.11.4

com.fasterxml.jackson.datatype

jackson-datatype-hibernate3

2.11.4

com.fasterxml.jackson.datatype

jackson-datatype-hibernate4

2.11.4

com.fasterxml.jackson.datatype

jackson-datatype-hibernate5

2.11.4

com.fasterxml.jackson.datatype

jackson-datatype-hppc

2.11.4

com.fasterxml.jackson.datatype

jackson-datatype-jaxrs

2.11.4

com.fasterxml.jackson.datatype

jackson-datatype-jdk8

2.11.4

com.fasterxml.jackson.datatype

jackson-datatype-joda

2.11.4

com.fasterxml.jackson.datatype

jackson-datatype-joda-money

2.11.4

com.fasterxml.jackson.datatype

jackson-datatype-json-org

2.11.4

com.fasterxml.jackson.datatype

jackson-datatype-jsr310

2.11.4

com.fasterxml.jackson.datatype

jackson-datatype-jsr353

2.11.4

com.fasterxml.jackson.datatype

jackson-datatype-pcollections

2.11.4

com.fasterxml.jackson.jaxrs

jackson-jaxrs-base

2.11.4

com.fasterxml.jackson.jaxrs

jackson-jaxrs-cbor-provider

2.11.4

com.fasterxml.jackson.jaxrs

jackson-jaxrs-json-provider

2.11.4

com.fasterxml.jackson.jaxrs

jackson-jaxrs-smile-provider

2.11.4

com.fasterxml.jackson.jaxrs

jackson-jaxrs-xml-provider

2.11.4

com.fasterxml.jackson.jaxrs

jackson-jaxrs-yaml-provider

2.11.4

com.fasterxml.jackson.jr

jackson-jr-all

2.11.4

com.fasterxml.jackson.jr

jackson-jr-annotation-support

2.11.4

com.fasterxml.jackson.jr

jackson-jr-objects

2.11.4

com.fasterxml.jackson.jr

jackson-jr-retrofit2

2.11.4

com.fasterxml.jackson.jr

jackson-jr-stree

2.11.4

com.fasterxml.jackson.module

jackson-module-afterburner

2.11.4

com.fasterxml.jackson.module

jackson-module-guice

2.11.4

com.fasterxml.jackson.module

jackson-module-jaxb-annotations

2.11.4

com.fasterxml.jackson.module

jackson-module-jsonSchema

2.11.4

com.fasterxml.jackson.module

jackson-module-kotlin

2.11.4

com.fasterxml.jackson.module

jackson-module-mrbean

2.11.4

com.fasterxml.jackson.module

jackson-module-osgi

2.11.4

com.fasterxml.jackson.module

jackson-module-parameter-names

2.11.4

com.fasterxml.jackson.module

jackson-module-paranamer

2.11.4

com.fasterxml.jackson.module

jackson-module-scala_2.10

2.11.4

com.fasterxml.jackson.module

jackson-module-scala_2.11

2.11.4

com.fasterxml.jackson.module

jackson-module-scala_2.12

2.11.4

com.fasterxml.jackson.module

jackson-module-scala_2.13

2.11.4

com.github.ben-manes.caffeine

caffeine

2.8.8

com.github.ben-manes.caffeine

guava

2.8.8

com.github.ben-manes.caffeine

jcache

2.8.8

com.github.ben-manes.caffeine

simulator

2.8.8

com.github.mxab.thymeleaf.extras

thymeleaf-extras-data-attribute

2.0.1

com.google.appengine

appengine-api-1.0-sdk

1.9.88

com.google.cloud

cloud-spanner-r2dbc

0.3.0

com.google.code.gson

gson

2.8.6

com.h2database

h2

1.4.200

com.hazelcast

hazelcast

4.0.3

com.hazelcast

hazelcast-hibernate52

2.1.1

com.hazelcast

hazelcast-hibernate53

2.1.1

com.hazelcast

hazelcast-spring

4.0.3

com.ibm.db2

jcc

11.5.5.0

com.jayway.jsonpath

json-path

2.4.0

com.jayway.jsonpath

json-path-assert

2.4.0

com.microsoft.sqlserver

mssql-jdbc

8.4.1.jre8

com.nimbusds

nimbus-jose-jwt

8.20.2

com.nimbusds

oauth2-oidc-sdk

8.36.1

com.oracle.database.debug

ojdbc10_g

19.8.0.0

com.oracle.database.debug

ojdbc10dms_g

19.8.0.0

com.oracle.database.debug

ojdbc8_g

19.8.0.0

com.oracle.database.debug

ojdbc8dms_g

19.8.0.0

com.oracle.database.ha

ons

19.8.0.0

com.oracle.database.ha

simplefan

19.8.0.0

com.oracle.database.jdbc

ojdbc10

19.8.0.0

com.oracle.database.jdbc

ojdbc10-production

19.8.0.0

com.oracle.database.jdbc

ojdbc8

19.8.0.0

com.oracle.database.jdbc

ojdbc8-production

19.8.0.0

com.oracle.database.jdbc

ucp

19.8.0.0

com.oracle.database.jdbc.debug

ojdbc10-debug

19.8.0.0

com.oracle.database.jdbc.debug

ojdbc10-observability-debug

19.8.0.0

com.oracle.database.jdbc.debug

ojdbc8-debug

19.8.0.0

com.oracle.database.jdbc.debug

ojdbc8-observability-debug

19.8.0.0

com.oracle.database.nls

orai18n

19.8.0.0

com.oracle.database.observability

dms

19.8.0.0

com.oracle.database.observability

ojdbc10-observability

19.8.0.0

com.oracle.database.observability

ojdbc10dms

19.8.0.0

com.oracle.database.observability

ojdbc8-observability

19.8.0.0

com.oracle.database.observability

ojdbc8dms

19.8.0.0

com.oracle.database.security

oraclepki

19.8.0.0

com.oracle.database.security

osdt_cert

19.8.0.0

com.oracle.database.security

osdt_core

19.8.0.0

com.oracle.database.xml

xdb

19.8.0.0

com.oracle.database.xml

xmlparserv2

19.8.0.0

com.oracle.ojdbc

dms

19.3.0.0

com.oracle.ojdbc

ojdbc10

19.3.0.0

com.oracle.ojdbc

ojdbc10_g

19.3.0.0

com.oracle.ojdbc

ojdbc10dms

19.3.0.0

com.oracle.ojdbc

ojdbc10dms_g

19.3.0.0

com.oracle.ojdbc

ojdbc8

19.3.0.0

com.oracle.ojdbc

ojdbc8_g

19.3.0.0

com.oracle.ojdbc

ojdbc8dms

19.3.0.0

com.oracle.ojdbc

ojdbc8dms_g

19.3.0.0

com.oracle.ojdbc

ons

19.3.0.0

com.oracle.ojdbc

oraclepki

19.3.0.0

com.oracle.ojdbc

orai18n

19.3.0.0

com.oracle.ojdbc

osdt_cert

19.3.0.0

com.oracle.ojdbc

osdt_core

19.3.0.0

com.oracle.ojdbc

simplefan

19.3.0.0

com.oracle.ojdbc

ucp

19.3.0.0

com.oracle.ojdbc

xdb

19.3.0.0

com.oracle.ojdbc

xmlparserv2

19.3.0.0

com.querydsl

querydsl-apt

4.4.0

com.querydsl

querydsl-collections

4.4.0

com.querydsl

querydsl-core

4.4.0

com.querydsl

querydsl-jpa

4.4.0

com.querydsl

querydsl-mongodb

4.4.0

com.rabbitmq

amqp-client

5.10.0

com.samskivert

jmustache

1.15

com.sendgrid

sendgrid-java

4.6.8

com.squareup.okhttp3

logging-interceptor

3.14.9

com.squareup.okhttp3

mockwebserver

3.14.9

com.squareup.okhttp3

okcurl

3.14.9

com.squareup.okhttp3

okhttp

3.14.9

com.squareup.okhttp3

okhttp-dnsoverhttps

3.14.9

com.squareup.okhttp3

okhttp-sse

3.14.9

com.squareup.okhttp3

okhttp-testing-support

3.14.9

com.squareup.okhttp3

okhttp-tls

3.14.9

com.squareup.okhttp3

okhttp-urlconnection

3.14.9

com.sun.activation

jakarta.activation

1.2.2

com.sun.mail

jakarta.mail

1.6.7

com.sun.xml.messaging.saaj

saaj-impl

1.5.3

com.unboundid

unboundid-ldapsdk

4.0.14

com.zaxxer

HikariCP

3.4.5

commons-codec

commons-codec

1.15

commons-pool

commons-pool

1.6

de.flapdoodle.embed

de.flapdoodle.embed.mongo

2.2.0

dev.miku

r2dbc-mysql

0.8.2.RELEASE

io.dropwizard.metrics

metrics-annotation

4.1.19

io.dropwizard.metrics

metrics-caffeine

4.1.19

io.dropwizard.metrics

metrics-collectd

4.1.19

io.dropwizard.metrics

metrics-core

4.1.19

io.dropwizard.metrics

metrics-ehcache

4.1.19

io.dropwizard.metrics

metrics-graphite

4.1.19

io.dropwizard.metrics

metrics-healthchecks

4.1.19

io.dropwizard.metrics

metrics-httpasyncclient

4.1.19

io.dropwizard.metrics

metrics-httpclient

4.1.19

io.dropwizard.metrics

metrics-jcache

4.1.19

io.dropwizard.metrics

metrics-jdbi

4.1.19

io.dropwizard.metrics

metrics-jdbi3

4.1.19

io.dropwizard.metrics

metrics-jersey2

4.1.19

io.dropwizard.metrics

metrics-jetty9

4.1.19

io.dropwizard.metrics

metrics-jmx

4.1.19

io.dropwizard.metrics

metrics-json

4.1.19

io.dropwizard.metrics

metrics-jvm

4.1.19

io.dropwizard.metrics

metrics-log4j2

4.1.19

io.dropwizard.metrics

metrics-logback

4.1.19

io.dropwizard.metrics

metrics-servlet

4.1.19

io.dropwizard.metrics

metrics-servlets

4.1.19

io.lettuce

lettuce-core

6.0.4.RELEASE

io.micrometer

micrometer-core

1.6.6

io.micrometer

micrometer-jersey2

1.6.6

io.micrometer

micrometer-registry-appoptics

1.6.6

io.micrometer

micrometer-registry-atlas

1.6.6

io.micrometer

micrometer-registry-azure-monitor

1.6.6

io.micrometer

micrometer-registry-cloudwatch

1.6.6

io.micrometer

micrometer-registry-cloudwatch2

1.6.6

io.micrometer

micrometer-registry-datadog

1.6.6

io.micrometer

micrometer-registry-dynatrace

1.6.6

io.micrometer

micrometer-registry-elastic

1.6.6

io.micrometer

micrometer-registry-ganglia

1.6.6

io.micrometer

micrometer-registry-graphite

1.6.6

io.micrometer

micrometer-registry-health

1.6.6

io.micrometer

micrometer-registry-humio

1.6.6

io.micrometer

micrometer-registry-influx

1.6.6

io.micrometer

micrometer-registry-jmx

1.6.6

io.micrometer

micrometer-registry-kairos

1.6.6

io.micrometer

micrometer-registry-new-relic

1.6.6

io.micrometer

micrometer-registry-opentsdb

1.6.6

io.micrometer

micrometer-registry-prometheus

1.6.6

io.micrometer

micrometer-registry-signalfx

1.6.6

io.micrometer

micrometer-registry-stackdriver

1.6.6

io.micrometer

micrometer-registry-statsd

1.6.6

io.micrometer

micrometer-registry-wavefront

1.6.6

io.micrometer

micrometer-test

1.6.6

io.netty

netty-all

4.1.63.Final

io.netty

netty-buffer

4.1.63.Final

io.netty

netty-codec

4.1.63.Final

io.netty

netty-codec-dns

4.1.63.Final

io.netty

netty-codec-haproxy

4.1.63.Final

io.netty

netty-codec-http

4.1.63.Final

io.netty

netty-codec-http2

4.1.63.Final

io.netty

netty-codec-memcache

4.1.63.Final

io.netty

netty-codec-mqtt

4.1.63.Final

io.netty

netty-codec-redis

4.1.63.Final

io.netty

netty-codec-smtp

4.1.63.Final

io.netty

netty-codec-socks

4.1.63.Final

io.netty

netty-codec-stomp

4.1.63.Final

io.netty

netty-codec-xml

4.1.63.Final

io.netty

netty-common

4.1.63.Final

io.netty

netty-dev-tools

4.1.63.Final

io.netty

netty-example

4.1.63.Final

io.netty

netty-handler

4.1.63.Final

io.netty

netty-handler-proxy

4.1.63.Final

io.netty

netty-resolver

4.1.63.Final

io.netty

netty-resolver-dns

4.1.63.Final

io.netty

netty-resolver-dns-native-macos

4.1.63.Final

io.netty

netty-tcnative

2.0.38.Final

io.netty

netty-tcnative-boringssl-static

2.0.38.Final

io.netty

netty-transport

4.1.63.Final

io.netty

netty-transport-native-epoll

4.1.63.Final

io.netty

netty-transport-native-kqueue

4.1.63.Final

io.netty

netty-transport-native-unix-common

4.1.63.Final

io.netty

netty-transport-rxtx

4.1.63.Final

io.netty

netty-transport-sctp

4.1.63.Final

io.netty

netty-transport-udt

4.1.63.Final

io.projectreactor

reactor-core

3.4.5

io.projectreactor

reactor-test

3.4.5

io.projectreactor

reactor-tools

3.4.5

io.projectreactor.addons

reactor-adapter

3.4.3

io.projectreactor.addons

reactor-extra

3.4.3

io.projectreactor.addons

reactor-pool

0.2.4

io.projectreactor.kafka

reactor-kafka

1.3.3

io.projectreactor.kotlin

reactor-kotlin-extensions

1.1.3

io.projectreactor.netty

reactor-netty

1.0.6

io.projectreactor.netty

reactor-netty-core

1.0.6

io.projectreactor.netty

reactor-netty-http

1.0.6

io.projectreactor.netty

reactor-netty-http-brave

1.0.6

io.projectreactor.rabbitmq

reactor-rabbitmq

1.5.2

io.prometheus

simpleclient_pushgateway

0.9.0

io.r2dbc

r2dbc-h2

0.8.4.RELEASE

io.r2dbc

r2dbc-mssql

0.8.5.RELEASE

io.r2dbc

r2dbc-pool

0.8.6.RELEASE

io.r2dbc

r2dbc-postgresql

0.8.7.RELEASE

io.r2dbc

r2dbc-proxy

0.8.5.RELEASE

io.r2dbc

r2dbc-spi

0.8.4.RELEASE

io.reactivex

rxjava

1.3.8

io.reactivex

rxjava-reactive-streams

1.2.1

io.reactivex.rxjava2

rxjava

2.2.21

io.rest-assured

json-path

3.3.0

io.rest-assured

json-schema-validator

3.3.0

io.rest-assured

rest-assured

3.3.0

io.rest-assured

scala-support

3.3.0

io.rest-assured

spring-mock-mvc

3.3.0

io.rest-assured

spring-web-test-client

3.3.0

io.rest-assured

xml-path

3.3.0

io.rsocket

rsocket-core

1.1.0

io.rsocket

rsocket-load-balancer

1.1.0

io.rsocket

rsocket-micrometer

1.1.0

io.rsocket

rsocket-test

1.1.0

io.rsocket

rsocket-transport-local

1.1.0

io.rsocket

rsocket-transport-netty

1.1.0

io.spring.gradle

dependency-management-plugin

1.0.11.RELEASE

io.undertow

undertow-core

2.2.7.Final

io.undertow

undertow-servlet

2.2.7.Final

io.undertow

undertow-websockets-jsr

2.2.7.Final

jakarta.activation

jakarta.activation-api

1.2.2

jakarta.annotation

jakarta.annotation-api

1.3.5

jakarta.jms

jakarta.jms-api

2.0.3

jakarta.json

jakarta.json-api

1.1.6

jakarta.json.bind

jakarta.json.bind-api

1.0.2

jakarta.mail

jakarta.mail-api

1.6.7

jakarta.persistence

jakarta.persistence-api

2.2.3

jakarta.servlet

jakarta.servlet-api

4.0.4

jakarta.servlet.jsp.jstl

jakarta.servlet.jsp.jstl-api

1.2.7

jakarta.transaction

jakarta.transaction-api

1.3.3

jakarta.validation

jakarta.validation-api

2.0.2

jakarta.websocket

jakarta.websocket-api

1.1.2

jakarta.ws.rs

jakarta.ws.rs-api

2.1.6

jakarta.xml.bind

jakarta.xml.bind-api

2.3.3

jakarta.xml.soap

jakarta.xml.soap-api

1.4.2

jakarta.xml.ws

jakarta.xml.ws-api

2.3.3

javax.activation

javax.activation-api

1.2.0

javax.annotation

javax.annotation-api

1.3.2

javax.cache

cache-api

1.1.1

javax.jms

javax.jms-api

2.0.1

javax.json

javax.json-api

1.1.4

javax.json.bind

javax.json.bind-api

1.0

javax.mail

javax.mail-api

1.6.2

javax.money

money-api

1.1

javax.persistence

javax.persistence-api

2.2

javax.servlet

javax.servlet-api

4.0.1

javax.servlet

jstl

1.2

javax.transaction

javax.transaction-api

1.3

javax.validation

validation-api

2.0.1.Final

javax.websocket

javax.websocket-api

1.1

javax.xml.bind

jaxb-api

2.3.1

javax.xml.ws

jaxws-api

2.3.1

jaxen

jaxen

1.2.0

junit

junit

4.12

mysql

mysql-connector-java

8.0.23

net.bytebuddy

byte-buddy

1.10.22

net.bytebuddy

byte-buddy-agent

1.10.22

net.minidev

json-smart

2.3

net.sf.ehcache

ehcache

2.10.6

net.sourceforge.htmlunit

htmlunit

2.44.0

net.sourceforge.jtds

jtds

1.3.1

net.sourceforge.nekohtml

nekohtml

1.9.22

nz.net.ultraq.thymeleaf

thymeleaf-layout-dialect

2.5.2

org.apache.activemq

activemq-amqp

5.16.1

org.apache.activemq

activemq-blueprint

5.16.1

org.apache.activemq

activemq-broker

5.16.1

org.apache.activemq

activemq-camel

5.16.1

org.apache.activemq

activemq-client

5.16.1

org.apache.activemq

activemq-console

5.16.1

org.apache.activemq

activemq-http

5.16.1

org.apache.activemq

activemq-jaas

5.16.1

org.apache.activemq

activemq-jdbc-store

5.16.1

org.apache.activemq

activemq-jms-pool

5.16.1

org.apache.activemq

activemq-kahadb-store

5.16.1

org.apache.activemq

activemq-karaf

5.16.1

org.apache.activemq

activemq-leveldb-store

5.16.1

org.apache.activemq

activemq-log4j-appender

5.16.1

org.apache.activemq

activemq-mqtt

5.16.1

org.apache.activemq

activemq-openwire-generator

5.16.1

org.apache.activemq

activemq-openwire-legacy

5.16.1

org.apache.activemq

activemq-osgi

5.16.1

org.apache.activemq

activemq-partition

5.16.1

org.apache.activemq

activemq-pool

5.16.1

org.apache.activemq

activemq-ra

5.16.1

org.apache.activemq

activemq-run

5.16.1

org.apache.activemq

activemq-runtime-config

5.16.1

org.apache.activemq

activemq-shiro

5.16.1

org.apache.activemq

activemq-spring

5.16.1

org.apache.activemq

activemq-stomp

5.16.1

org.apache.activemq

activemq-web

5.16.1

org.apache.activemq

artemis-amqp-protocol

2.15.0

org.apache.activemq

artemis-commons

2.15.0

org.apache.activemq

artemis-core-client

2.15.0

org.apache.activemq

artemis-jms-client

2.15.0

org.apache.activemq

artemis-jms-server

2.15.0

org.apache.activemq

artemis-journal

2.15.0

org.apache.activemq

artemis-selector

2.15.0

org.apache.activemq

artemis-server

2.15.0

org.apache.activemq

artemis-service-extensions

2.15.0

org.apache.commons

commons-dbcp2

2.8.0

org.apache.commons

commons-lang3

3.11

org.apache.commons

commons-pool2

2.9.0

org.apache.derby

derby

10.14.2.0

org.apache.derby

derbyclient

10.14.2.0

org.apache.httpcomponents

fluent-hc

4.5.13

org.apache.httpcomponents

httpasyncclient

4.1.4

org.apache.httpcomponents

httpclient

4.5.13

org.apache.httpcomponents

httpclient-cache

4.5.13

org.apache.httpcomponents

httpclient-osgi

4.5.13

org.apache.httpcomponents

httpclient-win

4.5.13

org.apache.httpcomponents

httpcore

4.4.14

org.apache.httpcomponents

httpcore-nio

4.4.14

org.apache.httpcomponents

httpmime

4.5.13

org.apache.johnzon

johnzon-core

1.2.10

org.apache.johnzon

johnzon-jaxrs

1.2.10

org.apache.johnzon

johnzon-jsonb

1.2.10

org.apache.johnzon

johnzon-jsonb-extras

1.2.10

org.apache.johnzon

johnzon-jsonschema

1.2.10

org.apache.johnzon

johnzon-mapper

1.2.10

org.apache.johnzon

johnzon-websocket

1.2.10

org.apache.kafka

connect-api

2.6.0

org.apache.kafka

connect-basic-auth-extension

2.6.0

org.apache.kafka

connect-file

2.6.0

org.apache.kafka

connect-json

2.6.0

org.apache.kafka

connect-runtime

2.6.0

org.apache.kafka

connect-transforms

2.6.0

org.apache.kafka

kafka-clients

2.6.0

org.apache.kafka

kafka-log4j-appender

2.6.0

org.apache.kafka

kafka-streams

2.6.0

org.apache.kafka

kafka-streams-scala_2.12

2.6.0

org.apache.kafka

kafka-streams-scala_2.13

2.6.0

org.apache.kafka

kafka-streams-test-utils

2.6.0

org.apache.kafka

kafka-tools

2.6.0

org.apache.kafka

kafka_2.12

2.6.0

org.apache.kafka

kafka_2.13

2.6.0

org.apache.logging.log4j

log4j-1.2-api

2.13.3

org.apache.logging.log4j

log4j-api

2.13.3

org.apache.logging.log4j

log4j-appserver

2.13.3

org.apache.logging.log4j

log4j-cassandra

2.13.3

org.apache.logging.log4j

log4j-core

2.13.3

org.apache.logging.log4j

log4j-couchdb

2.13.3

org.apache.logging.log4j

log4j-docker

2.13.3

org.apache.logging.log4j

log4j-flume-ng

2.13.3

org.apache.logging.log4j

log4j-iostreams

2.13.3

org.apache.logging.log4j

log4j-jcl

2.13.3

org.apache.logging.log4j

log4j-jmx-gui

2.13.3

org.apache.logging.log4j

log4j-jpa

2.13.3

org.apache.logging.log4j

log4j-jpl

2.13.3

org.apache.logging.log4j

log4j-jul

2.13.3

org.apache.logging.log4j

log4j-kubernetes

2.13.3

org.apache.logging.log4j

log4j-liquibase

2.13.3

org.apache.logging.log4j

log4j-mongodb2

2.13.3

org.apache.logging.log4j

log4j-mongodb3

2.13.3

org.apache.logging.log4j

log4j-slf4j-impl

2.13.3

org.apache.logging.log4j

log4j-slf4j18-impl

2.13.3

org.apache.logging.log4j

log4j-spring-cloud-config-client

2.13.3

org.apache.logging.log4j

log4j-taglib

2.13.3

org.apache.logging.log4j

log4j-to-slf4j

2.13.3

org.apache.logging.log4j

log4j-web

2.13.3

org.apache.solr

solr-analysis-extras

8.5.2

org.apache.solr

solr-analytics

8.5.2

org.apache.solr

solr-cell

8.5.2

org.apache.solr

solr-clustering

8.5.2

org.apache.solr

solr-core

8.5.2

org.apache.solr

solr-dataimporthandler

8.5.2

org.apache.solr

solr-dataimporthandler-extras

8.5.2

org.apache.solr

solr-langid

8.5.2

org.apache.solr

solr-ltr

8.5.2

org.apache.solr

solr-solrj

8.5.2

org.apache.solr

solr-test-framework

8.5.2

org.apache.solr

solr-velocity

8.5.2

org.apache.tomcat

tomcat-annotations-api

9.0.45

org.apache.tomcat

tomcat-jdbc

9.0.45

org.apache.tomcat

tomcat-jsp-api

9.0.45

org.apache.tomcat.embed

tomcat-embed-core

9.0.45

org.apache.tomcat.embed

tomcat-embed-el

9.0.45

org.apache.tomcat.embed

tomcat-embed-jasper

9.0.45

org.apache.tomcat.embed

tomcat-embed-websocket

9.0.45

org.aspectj

aspectjrt

1.9.6

org.aspectj

aspectjtools

1.9.6

org.aspectj

aspectjweaver

1.9.6

org.assertj

assertj-core

3.18.1

org.awaitility

awaitility

4.0.3

org.awaitility

awaitility-groovy

4.0.3

org.awaitility

awaitility-kotlin

4.0.3

org.awaitility

awaitility-scala

4.0.3

org.codehaus.btm

btm

2.1.4

org.codehaus.groovy

groovy

2.5.14

org.codehaus.groovy

groovy-ant

2.5.14

org.codehaus.groovy

groovy-bsf

2.5.14

org.codehaus.groovy

groovy-cli-commons

2.5.14

org.codehaus.groovy

groovy-cli-picocli

2.5.14

org.codehaus.groovy

groovy-console

2.5.14

org.codehaus.groovy

groovy-datetime

2.5.14

org.codehaus.groovy

groovy-dateutil

2.5.14

org.codehaus.groovy

groovy-docgenerator

2.5.14

org.codehaus.groovy

groovy-groovydoc

2.5.14

org.codehaus.groovy

groovy-groovysh

2.5.14

org.codehaus.groovy

groovy-jaxb

2.5.14

org.codehaus.groovy

groovy-jmx

2.5.14

org.codehaus.groovy

groovy-json

2.5.14

org.codehaus.groovy

groovy-json-direct

2.5.14

org.codehaus.groovy

groovy-jsr223

2.5.14

org.codehaus.groovy

groovy-macro

2.5.14

org.codehaus.groovy

groovy-nio

2.5.14

org.codehaus.groovy

groovy-servlet

2.5.14

org.codehaus.groovy

groovy-sql

2.5.14

org.codehaus.groovy

groovy-swing

2.5.14

org.codehaus.groovy

groovy-templates

2.5.14

org.codehaus.groovy

groovy-test

2.5.14

org.codehaus.groovy

groovy-test-junit5

2.5.14

org.codehaus.groovy

groovy-testng

2.5.14

org.codehaus.groovy

groovy-xml

2.5.14

org.codehaus.janino

commons-compiler

3.1.3

org.codehaus.janino

commons-compiler-jdk

3.1.3

org.codehaus.janino

janino

3.1.3

org.eclipse.jetty

apache-jsp

9.4.39.v20210325

org.eclipse.jetty

apache-jstl

9.4.39.v20210325

org.eclipse.jetty

infinispan-common

9.4.39.v20210325

org.eclipse.jetty

infinispan-embedded-query

9.4.39.v20210325

org.eclipse.jetty

infinispan-remote-query

9.4.39.v20210325

org.eclipse.jetty

jetty-alpn-client

9.4.39.v20210325

org.eclipse.jetty

jetty-alpn-conscrypt-client

9.4.39.v20210325

org.eclipse.jetty

jetty-alpn-conscrypt-server

9.4.39.v20210325

org.eclipse.jetty

jetty-alpn-java-client

9.4.39.v20210325

org.eclipse.jetty

jetty-alpn-java-server

9.4.39.v20210325

org.eclipse.jetty

jetty-alpn-openjdk8-client

9.4.39.v20210325

org.eclipse.jetty

jetty-alpn-openjdk8-server

9.4.39.v20210325

org.eclipse.jetty

jetty-alpn-server

9.4.39.v20210325

org.eclipse.jetty

jetty-annotations

9.4.39.v20210325

org.eclipse.jetty

jetty-ant

9.4.39.v20210325

org.eclipse.jetty

jetty-client

9.4.39.v20210325

org.eclipse.jetty

jetty-continuation

9.4.39.v20210325

org.eclipse.jetty

jetty-deploy

9.4.39.v20210325

org.eclipse.jetty

jetty-distribution

9.4.39.v20210325

org.eclipse.jetty

jetty-hazelcast

9.4.39.v20210325

org.eclipse.jetty

jetty-home

9.4.39.v20210325

org.eclipse.jetty

jetty-http

9.4.39.v20210325

org.eclipse.jetty

jetty-http-spi

9.4.39.v20210325

org.eclipse.jetty

jetty-io

9.4.39.v20210325

org.eclipse.jetty

jetty-jaas

9.4.39.v20210325

org.eclipse.jetty

jetty-jaspi

9.4.39.v20210325

org.eclipse.jetty

jetty-jmx

9.4.39.v20210325

org.eclipse.jetty

jetty-jndi

9.4.39.v20210325

org.eclipse.jetty

jetty-nosql

9.4.39.v20210325

org.eclipse.jetty

jetty-openid

9.4.39.v20210325

org.eclipse.jetty

jetty-plus

9.4.39.v20210325

org.eclipse.jetty

jetty-proxy

9.4.39.v20210325

org.eclipse.jetty

jetty-quickstart

9.4.39.v20210325

org.eclipse.jetty

jetty-reactive-httpclient

1.1.7

org.eclipse.jetty

jetty-rewrite

9.4.39.v20210325

org.eclipse.jetty

jetty-security

9.4.39.v20210325

org.eclipse.jetty

jetty-server

9.4.39.v20210325

org.eclipse.jetty

jetty-servlet

9.4.39.v20210325

org.eclipse.jetty

jetty-servlets

9.4.39.v20210325

org.eclipse.jetty

jetty-spring

9.4.39.v20210325

org.eclipse.jetty

jetty-unixsocket

9.4.39.v20210325

org.eclipse.jetty

jetty-util

9.4.39.v20210325

org.eclipse.jetty

jetty-util-ajax

9.4.39.v20210325

org.eclipse.jetty

jetty-webapp

9.4.39.v20210325

org.eclipse.jetty

jetty-xml

9.4.39.v20210325

org.eclipse.jetty.fcgi

fcgi-client

9.4.39.v20210325

org.eclipse.jetty.fcgi

fcgi-server

9.4.39.v20210325

org.eclipse.jetty.gcloud

jetty-gcloud-session-manager

9.4.39.v20210325

org.eclipse.jetty.http2

http2-client

9.4.39.v20210325

org.eclipse.jetty.http2

http2-common

9.4.39.v20210325

org.eclipse.jetty.http2

http2-hpack

9.4.39.v20210325

org.eclipse.jetty.http2

http2-http-client-transport

9.4.39.v20210325

org.eclipse.jetty.http2

http2-server

9.4.39.v20210325

org.eclipse.jetty.memcached

jetty-memcached-sessions

9.4.39.v20210325

org.eclipse.jetty.orbit

javax.servlet.jsp

2.2.0.v201112011158

org.eclipse.jetty.osgi

jetty-httpservice

9.4.39.v20210325

org.eclipse.jetty.osgi

jetty-osgi-boot

9.4.39.v20210325

org.eclipse.jetty.osgi

jetty-osgi-boot-jsp

9.4.39.v20210325

org.eclipse.jetty.osgi

jetty-osgi-boot-warurl

9.4.39.v20210325

org.eclipse.jetty.websocket

javax-websocket-client-impl

9.4.39.v20210325

org.eclipse.jetty.websocket

javax-websocket-server-impl

9.4.39.v20210325

org.eclipse.jetty.websocket

websocket-api

9.4.39.v20210325

org.eclipse.jetty.websocket

websocket-client

9.4.39.v20210325

org.eclipse.jetty.websocket

websocket-common

9.4.39.v20210325

org.eclipse.jetty.websocket

websocket-server

9.4.39.v20210325

org.eclipse.jetty.websocket

websocket-servlet

9.4.39.v20210325

org.ehcache

ehcache

3.9.2

org.ehcache

ehcache-clustered

3.9.2

org.ehcache

ehcache-transactions

3.9.2

org.elasticsearch

elasticsearch

7.9.3

org.elasticsearch.client

elasticsearch-rest-client

7.9.3

org.elasticsearch.client

elasticsearch-rest-client-sniffer

7.9.3

org.elasticsearch.client

elasticsearch-rest-high-level-client

7.9.3

org.elasticsearch.client

transport

7.9.3

org.elasticsearch.distribution.integ-test-zip

elasticsearch

7.9.3

org.elasticsearch.plugin

transport-netty4-client

7.9.3

org.firebirdsql.jdbc

jaybird-jdk17

3.0.11

org.firebirdsql.jdbc

jaybird-jdk18

3.0.11

org.flywaydb

flyway-core

7.1.1

org.freemarker

freemarker

2.3.31

org.glassfish

jakarta.el

3.0.3

org.glassfish.jaxb

codemodel

2.3.4

org.glassfish.jaxb

codemodel-annotation-compiler

2.3.4

org.glassfish.jaxb

jaxb-jxc

2.3.4

org.glassfish.jaxb

jaxb-runtime

2.3.4

org.glassfish.jaxb

jaxb-xjc

2.3.4

org.glassfish.jaxb

txw2

2.3.4

org.glassfish.jaxb

txwc2

2.3.4

org.glassfish.jaxb

xsom

2.3.4

org.glassfish.jersey.bundles

jaxrs-ri

2.32

org.glassfish.jersey.connectors

jersey-apache-connector

2.32

org.glassfish.jersey.connectors

jersey-grizzly-connector

2.32

org.glassfish.jersey.connectors

jersey-helidon-connector

2.32

org.glassfish.jersey.connectors

jersey-jdk-connector

2.32

org.glassfish.jersey.connectors

jersey-jetty-connector

2.32

org.glassfish.jersey.connectors

jersey-netty-connector

2.32

org.glassfish.jersey.containers

jersey-container-grizzly2-http

2.32

org.glassfish.jersey.containers

jersey-container-grizzly2-servlet

2.32

org.glassfish.jersey.containers

jersey-container-jdk-http

2.32

org.glassfish.jersey.containers

jersey-container-jetty-http

2.32

org.glassfish.jersey.containers

jersey-container-jetty-servlet

2.32

org.glassfish.jersey.containers

jersey-container-netty-http

2.32

org.glassfish.jersey.containers

jersey-container-servlet

2.32

org.glassfish.jersey.containers

jersey-container-servlet-core

2.32

org.glassfish.jersey.containers

jersey-container-simple-http

2.32

org.glassfish.jersey.containers.glassfish

jersey-gf-ejb

2.32

org.glassfish.jersey.core

jersey-client

2.32

org.glassfish.jersey.core

jersey-common

2.32

org.glassfish.jersey.core

jersey-server

2.32

org.glassfish.jersey.ext

jersey-bean-validation

2.32

org.glassfish.jersey.ext

jersey-declarative-linking

2.32

org.glassfish.jersey.ext

jersey-entity-filtering

2.32

org.glassfish.jersey.ext

jersey-metainf-services

2.32

org.glassfish.jersey.ext

jersey-mvc

2.32

org.glassfish.jersey.ext

jersey-mvc-bean-validation

2.32

org.glassfish.jersey.ext

jersey-mvc-freemarker

2.32

org.glassfish.jersey.ext

jersey-mvc-jsp

2.32

org.glassfish.jersey.ext

jersey-mvc-mustache

2.32

org.glassfish.jersey.ext

jersey-proxy-client

2.32

org.glassfish.jersey.ext

jersey-servlet-portability

2.32

org.glassfish.jersey.ext

jersey-spring4

2.32

org.glassfish.jersey.ext

jersey-spring5

2.32

org.glassfish.jersey.ext

jersey-wadl-doclet

2.32

org.glassfish.jersey.ext.cdi

jersey-cdi1x

2.32

org.glassfish.jersey.ext.cdi

jersey-cdi1x-ban-custom-hk2-binding

2.32

org.glassfish.jersey.ext.cdi

jersey-cdi1x-servlet

2.32

org.glassfish.jersey.ext.cdi

jersey-cdi1x-transaction

2.32

org.glassfish.jersey.ext.cdi

jersey-cdi1x-validation

2.32

org.glassfish.jersey.ext.cdi

jersey-weld2-se

2.32

org.glassfish.jersey.ext.microprofile

jersey-mp-config

2.32

org.glassfish.jersey.ext.microprofile

jersey-mp-rest-client

2.32

org.glassfish.jersey.ext.rx

jersey-rx-client-guava

2.32

org.glassfish.jersey.ext.rx

jersey-rx-client-rxjava

2.32

org.glassfish.jersey.ext.rx

jersey-rx-client-rxjava2

2.32

org.glassfish.jersey.inject

jersey-cdi2-se

2.32

org.glassfish.jersey.inject

jersey-hk2

2.32

org.glassfish.jersey.media

jersey-media-jaxb

2.32

org.glassfish.jersey.media

jersey-media-json-binding

2.32

org.glassfish.jersey.media

jersey-media-json-jackson

2.32

org.glassfish.jersey.media

jersey-media-json-jettison

2.32

org.glassfish.jersey.media

jersey-media-json-processing

2.32

org.glassfish.jersey.media

jersey-media-kryo

2.32

org.glassfish.jersey.media

jersey-media-moxy

2.32

org.glassfish.jersey.media

jersey-media-multipart

2.32

org.glassfish.jersey.media

jersey-media-sse

2.32

org.glassfish.jersey.security

oauth1-client

2.32

org.glassfish.jersey.security

oauth1-server

2.32

org.glassfish.jersey.security

oauth1-signature

2.32

org.glassfish.jersey.security

oauth2-client

2.32

org.glassfish.jersey.test-framework

jersey-test-framework-core

2.32

org.glassfish.jersey.test-framework

jersey-test-framework-util

2.32

org.glassfish.jersey.test-framework.providers

jersey-test-framework-provider-bundle

2.32

org.glassfish.jersey.test-framework.providers

jersey-test-framework-provider-external

2.32

org.glassfish.jersey.test-framework.providers

jersey-test-framework-provider-grizzly2

2.32

org.glassfish.jersey.test-framework.providers

jersey-test-framework-provider-inmemory

2.32

org.glassfish.jersey.test-framework.providers

jersey-test-framework-provider-jdk-http

2.32

org.glassfish.jersey.test-framework.providers

jersey-test-framework-provider-jetty

2.32

org.glassfish.jersey.test-framework.providers

jersey-test-framework-provider-simple

2.32

org.hamcrest

hamcrest

2.2

org.hamcrest

hamcrest-core

2.2

org.hamcrest

hamcrest-library

2.2

org.hibernate

hibernate-c3p0

5.4.30.Final

org.hibernate

hibernate-core

5.4.30.Final

org.hibernate

hibernate-ehcache

5.4.30.Final

org.hibernate

hibernate-entitymanager

5.4.30.Final

org.hibernate

hibernate-envers

5.4.30.Final

org.hibernate

hibernate-hikaricp

5.4.30.Final

org.hibernate

hibernate-java8

5.4.30.Final

org.hibernate

hibernate-jcache

5.4.30.Final

org.hibernate

hibernate-jpamodelgen

5.4.30.Final

org.hibernate

hibernate-micrometer

5.4.30.Final

org.hibernate

hibernate-proxool

5.4.30.Final

org.hibernate

hibernate-spatial

5.4.30.Final

org.hibernate

hibernate-testing

5.4.30.Final

org.hibernate

hibernate-vibur

5.4.30.Final

org.hibernate.validator

hibernate-validator

6.1.7.Final

org.hibernate.validator

hibernate-validator-annotation-processor

6.1.7.Final

org.hsqldb

hsqldb

2.5.2

org.infinispan

infinispan-anchored-keys

11.0.10.Final

org.infinispan

infinispan-api

11.0.10.Final

org.infinispan

infinispan-cachestore-jdbc

11.0.10.Final

org.infinispan

infinispan-cachestore-jpa

11.0.10.Final

org.infinispan

infinispan-cachestore-remote

11.0.10.Final

org.infinispan

infinispan-cachestore-rest

11.0.10.Final

org.infinispan

infinispan-cachestore-rocksdb

11.0.10.Final

org.infinispan

infinispan-cdi-common

11.0.10.Final

org.infinispan

infinispan-cdi-embedded

11.0.10.Final

org.infinispan

infinispan-cdi-remote

11.0.10.Final

org.infinispan

infinispan-checkstyle

11.0.10.Final

org.infinispan

infinispan-cli-client

11.0.10.Final

org.infinispan

infinispan-client-hotrod

11.0.10.Final

org.infinispan

infinispan-client-rest

11.0.10.Final

org.infinispan

infinispan-clustered-counter

11.0.10.Final

org.infinispan

infinispan-clustered-lock

11.0.10.Final

org.infinispan

infinispan-commons

11.0.10.Final

org.infinispan

infinispan-commons-test

11.0.10.Final

org.infinispan

infinispan-component-annotations

11.0.10.Final

org.infinispan

infinispan-component-processor

11.0.10.Final

org.infinispan

infinispan-console

0.7.2.Final

org.infinispan

infinispan-core

11.0.10.Final

org.infinispan

infinispan-extended-statistics

11.0.10.Final

org.infinispan

infinispan-hibernate-cache-commons

11.0.10.Final

org.infinispan

infinispan-hibernate-cache-spi

11.0.10.Final

org.infinispan

infinispan-hibernate-cache-v51

11.0.10.Final

org.infinispan

infinispan-hibernate-cache-v53

11.0.10.Final

org.infinispan

infinispan-jboss-marshalling

11.0.10.Final

org.infinispan

infinispan-jcache

11.0.10.Final

org.infinispan

infinispan-jcache-commons

11.0.10.Final

org.infinispan

infinispan-jcache-remote

11.0.10.Final

org.infinispan

infinispan-key-value-store-client

11.0.10.Final

org.infinispan

infinispan-marshaller-kryo

11.0.10.Final

org.infinispan

infinispan-marshaller-kryo-bundle

11.0.10.Final

org.infinispan

infinispan-marshaller-protostuff

11.0.10.Final

org.infinispan

infinispan-marshaller-protostuff-bundle

11.0.10.Final

org.infinispan

infinispan-multimap

11.0.10.Final

org.infinispan

infinispan-objectfilter

11.0.10.Final

org.infinispan

infinispan-osgi

11.0.10.Final

org.infinispan

infinispan-persistence-soft-index

11.0.10.Final

org.infinispan

infinispan-query

11.0.10.Final

org.infinispan

infinispan-query-core

11.0.10.Final

org.infinispan

infinispan-query-dsl

11.0.10.Final

org.infinispan

infinispan-remote-query-client

11.0.10.Final

org.infinispan

infinispan-remote-query-server

11.0.10.Final

org.infinispan

infinispan-scripting

11.0.10.Final

org.infinispan

infinispan-server-core

11.0.10.Final

org.infinispan

infinispan-server-hotrod

11.0.10.Final

org.infinispan

infinispan-server-memcached

11.0.10.Final

org.infinispan

infinispan-server-rest

11.0.10.Final

org.infinispan

infinispan-server-router

11.0.10.Final

org.infinispan

infinispan-server-runtime

11.0.10.Final

org.infinispan

infinispan-spring5-common

11.0.10.Final

org.infinispan

infinispan-spring5-embedded

11.0.10.Final

org.infinispan

infinispan-spring5-remote

11.0.10.Final

org.infinispan

infinispan-tasks

11.0.10.Final

org.infinispan

infinispan-tasks-api

11.0.10.Final

org.infinispan

infinispan-tools

11.0.10.Final

org.infinispan.protostream

protostream

4.3.4.Final

org.infinispan.protostream

protostream-processor

4.3.4.Final

org.influxdb

influxdb-java

2.20

org.jboss

jboss-transaction-spi

7.6.0.Final

org.jboss.logging

jboss-logging

3.4.1.Final

org.jdom

jdom2

2.0.6

org.jetbrains.kotlin

kotlin-compiler

1.4.32

org.jetbrains.kotlin

kotlin-compiler-embeddable

1.4.32

org.jetbrains.kotlin

kotlin-daemon-client

1.4.32

org.jetbrains.kotlin

kotlin-main-kts

1.4.32

org.jetbrains.kotlin

kotlin-osgi-bundle

1.4.32

org.jetbrains.kotlin

kotlin-reflect

1.4.32

org.jetbrains.kotlin

kotlin-script-runtime

1.4.32

org.jetbrains.kotlin

kotlin-script-util

1.4.32

org.jetbrains.kotlin

kotlin-scripting-common

1.4.32

org.jetbrains.kotlin

kotlin-scripting-ide-services

1.4.32

org.jetbrains.kotlin

kotlin-scripting-jvm

1.4.32

org.jetbrains.kotlin

kotlin-scripting-jvm-host

1.4.32

org.jetbrains.kotlin

kotlin-stdlib

1.4.32

org.jetbrains.kotlin

kotlin-stdlib-common

1.4.32

org.jetbrains.kotlin

kotlin-stdlib-jdk7

1.4.32

org.jetbrains.kotlin

kotlin-stdlib-jdk8

1.4.32

org.jetbrains.kotlin

kotlin-stdlib-js

1.4.32

org.jetbrains.kotlin

kotlin-test

1.4.32

org.jetbrains.kotlin

kotlin-test-annotations-common

1.4.32

org.jetbrains.kotlin

kotlin-test-common

1.4.32

org.jetbrains.kotlin

kotlin-test-js

1.4.32

org.jetbrains.kotlin

kotlin-test-junit

1.4.32

org.jetbrains.kotlin

kotlin-test-junit5

1.4.32

org.jetbrains.kotlin

kotlin-test-testng

1.4.32

org.jetbrains.kotlinx

kotlinx-coroutines-android

1.4.3

org.jetbrains.kotlinx

kotlinx-coroutines-core

1.4.3

org.jetbrains.kotlinx

kotlinx-coroutines-core-jvm

1.4.3

org.jetbrains.kotlinx

kotlinx-coroutines-debug

1.4.3

org.jetbrains.kotlinx

kotlinx-coroutines-guava

1.4.3

org.jetbrains.kotlinx

kotlinx-coroutines-javafx

1.4.3

org.jetbrains.kotlinx

kotlinx-coroutines-jdk8

1.4.3

org.jetbrains.kotlinx

kotlinx-coroutines-jdk9

1.4.3

org.jetbrains.kotlinx

kotlinx-coroutines-play-services

1.4.3

org.jetbrains.kotlinx

kotlinx-coroutines-reactive

1.4.3

org.jetbrains.kotlinx

kotlinx-coroutines-reactor

1.4.3

org.jetbrains.kotlinx

kotlinx-coroutines-rx2

1.4.3

org.jetbrains.kotlinx

kotlinx-coroutines-rx3

1.4.3

org.jetbrains.kotlinx

kotlinx-coroutines-slf4j

1.4.3

org.jetbrains.kotlinx

kotlinx-coroutines-swing

1.4.3

org.jetbrains.kotlinx

kotlinx-coroutines-test

1.4.3

org.jolokia

jolokia-core

1.6.2

org.jooq

jooq

3.14.8

org.jooq

jooq-codegen

3.14.8

org.jooq

jooq-kotlin

3.14.8

org.jooq

jooq-meta

3.14.8

org.junit.jupiter

junit-jupiter

5.7.1

org.junit.jupiter

junit-jupiter-api

5.7.1

org.junit.jupiter

junit-jupiter-engine

5.7.1

org.junit.jupiter

junit-jupiter-migrationsupport

5.7.1

org.junit.jupiter

junit-jupiter-params

5.7.1

org.junit.platform

junit-platform-commons

1.7.1

org.junit.platform

junit-platform-console

1.7.1

org.junit.platform

junit-platform-engine

1.7.1

org.junit.platform

junit-platform-jfr

1.7.1

org.junit.platform

junit-platform-launcher

1.7.1

org.junit.platform

junit-platform-reporting

1.7.1

org.junit.platform

junit-platform-runner

1.7.1

org.junit.platform

junit-platform-suite-api

1.7.1

org.junit.platform

junit-platform-testkit

1.7.1

org.junit.vintage

junit-vintage-engine

5.7.1

org.jvnet.mimepull

mimepull

1.9.14

org.liquibase

liquibase-core

3.10.3

org.mariadb

r2dbc-mariadb

1.0.0

org.mariadb.jdbc

mariadb-java-client

2.7.2

org.messaginghub

pooled-jms

1.2.1

org.mockito

mockito-core

3.6.28

org.mockito

mockito-inline

3.6.28

org.mockito

mockito-junit-jupiter

3.6.28

org.mongodb

bson

4.1.2

org.mongodb

mongodb-driver-core

4.1.2

org.mongodb

mongodb-driver-legacy

4.1.2

org.mongodb

mongodb-driver-reactivestreams

4.1.2

org.mongodb

mongodb-driver-sync

4.1.2

org.mortbay.jasper

apache-el

8.5.54

org.neo4j.driver

neo4j-java-driver

4.1.1

org.postgresql

postgresql

42.2.19

org.projectlombok

lombok

1.18.20

org.quartz-scheduler

quartz

2.3.2

org.quartz-scheduler

quartz-jobs

2.3.2

org.reactivestreams

reactive-streams

1.0.3

org.seleniumhq.selenium

htmlunit-driver

2.44.0

org.seleniumhq.selenium

selenium-api

3.141.59

org.seleniumhq.selenium

selenium-chrome-driver

3.141.59

org.seleniumhq.selenium

selenium-edge-driver

3.141.59

org.seleniumhq.selenium

selenium-firefox-driver

3.141.59

org.seleniumhq.selenium

selenium-ie-driver

3.141.59

org.seleniumhq.selenium

selenium-java

3.141.59

org.seleniumhq.selenium

selenium-opera-driver

3.141.59

org.seleniumhq.selenium

selenium-remote-driver

3.141.59

org.seleniumhq.selenium

selenium-safari-driver

3.141.59

org.seleniumhq.selenium

selenium-support

3.141.59

org.skyscreamer

jsonassert

1.5.0

org.slf4j

jcl-over-slf4j

1.7.30

org.slf4j

jul-to-slf4j

1.7.30

org.slf4j

log4j-over-slf4j

1.7.30

org.slf4j

slf4j-api

1.7.30

org.slf4j

slf4j-ext

1.7.30

org.slf4j

slf4j-jcl

1.7.30

org.slf4j

slf4j-jdk14

1.7.30

org.slf4j

slf4j-log4j12

1.7.30

org.slf4j

slf4j-nop

1.7.30

org.slf4j

slf4j-simple

1.7.30

org.springframework

spring-aop

5.3.6

org.springframework

spring-aspects

5.3.6

org.springframework

spring-beans

5.3.6

org.springframework

spring-context

5.3.6

org.springframework

spring-context-indexer

5.3.6

org.springframework

spring-context-support

5.3.6

org.springframework

spring-core

5.3.6

org.springframework

spring-expression

5.3.6

org.springframework

spring-instrument

5.3.6

org.springframework

spring-jcl

5.3.6

org.springframework

spring-jdbc

5.3.6

org.springframework

spring-jms

5.3.6

org.springframework

spring-messaging

5.3.6

org.springframework

spring-orm

5.3.6

org.springframework

spring-oxm

5.3.6

org.springframework

spring-r2dbc

5.3.6

org.springframework

spring-test

5.3.6

org.springframework

spring-tx

5.3.6

org.springframework

spring-web

5.3.6

org.springframework

spring-webflux

5.3.6

org.springframework

spring-webmvc

5.3.6

org.springframework

spring-websocket

5.3.6

org.springframework.amqp

spring-amqp

2.3.6

org.springframework.amqp

spring-rabbit

2.3.6

org.springframework.amqp

spring-rabbit-junit

2.3.6

org.springframework.amqp

spring-rabbit-test

2.3.6

org.springframework.batch

spring-batch-core

4.3.2

org.springframework.batch

spring-batch-infrastructure

4.3.2

org.springframework.batch

spring-batch-integration

4.3.2

org.springframework.batch

spring-batch-test

4.3.2

org.springframework.boot

spring-boot

2.4.5

org.springframework.boot

spring-boot-actuator

2.4.5

org.springframework.boot

spring-boot-actuator-autoconfigure

2.4.5

org.springframework.boot

spring-boot-autoconfigure

2.4.5

org.springframework.boot

spring-boot-autoconfigure-processor

2.4.5

org.springframework.boot

spring-boot-buildpack-platform

2.4.5

org.springframework.boot

spring-boot-configuration-metadata

2.4.5

org.springframework.boot

spring-boot-configuration-processor

2.4.5

org.springframework.boot

spring-boot-devtools

2.4.5

org.springframework.boot

spring-boot-jarmode-layertools

2.4.5

org.springframework.boot

spring-boot-loader

2.4.5

org.springframework.boot

spring-boot-loader-tools

2.4.5

org.springframework.boot

spring-boot-properties-migrator

2.4.5

org.springframework.boot

spring-boot-starter

2.4.5

org.springframework.boot

spring-boot-starter-activemq

2.4.5

org.springframework.boot

spring-boot-starter-actuator

2.4.5

org.springframework.boot

spring-boot-starter-amqp

2.4.5

org.springframework.boot

spring-boot-starter-aop

2.4.5

org.springframework.boot

spring-boot-starter-artemis

2.4.5

org.springframework.boot

spring-boot-starter-batch

2.4.5

org.springframework.boot

spring-boot-starter-cache

2.4.5

org.springframework.boot

spring-boot-starter-data-cassandra

2.4.5

org.springframework.boot

spring-boot-starter-data-cassandra-reactive

2.4.5

org.springframework.boot

spring-boot-starter-data-couchbase

2.4.5

org.springframework.boot

spring-boot-starter-data-couchbase-reactive

2.4.5

org.springframework.boot

spring-boot-starter-data-elasticsearch

2.4.5

org.springframework.boot

spring-boot-starter-data-jdbc

2.4.5

org.springframework.boot

spring-boot-starter-data-jpa

2.4.5

org.springframework.boot

spring-boot-starter-data-ldap

2.4.5

org.springframework.boot

spring-boot-starter-data-mongodb

2.4.5

org.springframework.boot

spring-boot-starter-data-mongodb-reactive

2.4.5

org.springframework.boot

spring-boot-starter-data-neo4j

2.4.5

org.springframework.boot

spring-boot-starter-data-r2dbc

2.4.5

org.springframework.boot

spring-boot-starter-data-redis

2.4.5

org.springframework.boot

spring-boot-starter-data-redis-reactive

2.4.5

org.springframework.boot

spring-boot-starter-data-rest

2.4.5

org.springframework.boot

spring-boot-starter-data-solr

2.4.5

org.springframework.boot

spring-boot-starter-freemarker

2.4.5

org.springframework.boot

spring-boot-starter-groovy-templates

2.4.5

org.springframework.boot

spring-boot-starter-hateoas

2.4.5

org.springframework.boot

spring-boot-starter-integration

2.4.5

org.springframework.boot

spring-boot-starter-jdbc

2.4.5

org.springframework.boot

spring-boot-starter-jersey

2.4.5

org.springframework.boot

spring-boot-starter-jetty

2.4.5

org.springframework.boot

spring-boot-starter-jooq

2.4.5

org.springframework.boot

spring-boot-starter-json

2.4.5

org.springframework.boot

spring-boot-starter-jta-atomikos

2.4.5

org.springframework.boot

spring-boot-starter-jta-bitronix

2.4.5

org.springframework.boot

spring-boot-starter-log4j2

2.4.5

org.springframework.boot

spring-boot-starter-logging

2.4.5

org.springframework.boot

spring-boot-starter-mail

2.4.5

org.springframework.boot

spring-boot-starter-mustache

2.4.5

org.springframework.boot

spring-boot-starter-oauth2-client

2.4.5

org.springframework.boot

spring-boot-starter-oauth2-resource-server

2.4.5

org.springframework.boot

spring-boot-starter-quartz

2.4.5

org.springframework.boot

spring-boot-starter-reactor-netty

2.4.5

org.springframework.boot

spring-boot-starter-rsocket

2.4.5

org.springframework.boot

spring-boot-starter-security

2.4.5

org.springframework.boot

spring-boot-starter-test

2.4.5

org.springframework.boot

spring-boot-starter-thymeleaf

2.4.5

org.springframework.boot

spring-boot-starter-tomcat

2.4.5

org.springframework.boot

spring-boot-starter-undertow

2.4.5

org.springframework.boot

spring-boot-starter-validation

2.4.5

org.springframework.boot

spring-boot-starter-web

2.4.5

org.springframework.boot

spring-boot-starter-web-services

2.4.5

org.springframework.boot

spring-boot-starter-webflux

2.4.5

org.springframework.boot

spring-boot-starter-websocket

2.4.5

org.springframework.boot

spring-boot-test

2.4.5

org.springframework.boot

spring-boot-test-autoconfigure

2.4.5

org.springframework.data

spring-data-cassandra

3.1.8

org.springframework.data

spring-data-commons

2.4.8

org.springframework.data

spring-data-couchbase

4.1.8

org.springframework.data

spring-data-elasticsearch

4.1.8

org.springframework.data

spring-data-envers

2.4.8

org.springframework.data

spring-data-geode

2.4.8

org.springframework.data

spring-data-jdbc

2.1.8

org.springframework.data

spring-data-jpa

2.4.8

org.springframework.data

spring-data-keyvalue

2.4.8

org.springframework.data

spring-data-ldap

2.4.8

org.springframework.data

spring-data-mongodb

3.1.8

org.springframework.data

spring-data-neo4j

6.0.8

org.springframework.data

spring-data-r2dbc

1.2.8

org.springframework.data

spring-data-redis

2.4.8

org.springframework.data

spring-data-relational

2.1.8

org.springframework.data

spring-data-rest-core

3.4.8

org.springframework.data

spring-data-rest-hal-explorer

3.4.8

org.springframework.data

spring-data-rest-webmvc

3.4.8

org.springframework.data

spring-data-solr

4.3.8

org.springframework.hateoas

spring-hateoas

1.2.5

org.springframework.integration

spring-integration-amqp

5.4.6

org.springframework.integration

spring-integration-core

5.4.6

org.springframework.integration

spring-integration-event

5.4.6

org.springframework.integration

spring-integration-feed

5.4.6

org.springframework.integration

spring-integration-file

5.4.6

org.springframework.integration

spring-integration-ftp

5.4.6

org.springframework.integration

spring-integration-gemfire

5.4.6

org.springframework.integration

spring-integration-groovy

5.4.6

org.springframework.integration

spring-integration-http

5.4.6

org.springframework.integration

spring-integration-ip

5.4.6

org.springframework.integration

spring-integration-jdbc

5.4.6

org.springframework.integration

spring-integration-jms

5.4.6

org.springframework.integration

spring-integration-jmx

5.4.6

org.springframework.integration

spring-integration-jpa

5.4.6

org.springframework.integration

spring-integration-kafka

5.4.6

org.springframework.integration

spring-integration-mail

5.4.6

org.springframework.integration

spring-integration-mongodb

5.4.6

org.springframework.integration

spring-integration-mqtt

5.4.6

org.springframework.integration

spring-integration-r2dbc

5.4.6

org.springframework.integration

spring-integration-redis

5.4.6

org.springframework.integration

spring-integration-rmi

5.4.6

org.springframework.integration

spring-integration-rsocket

5.4.6

org.springframework.integration

spring-integration-scripting

5.4.6

org.springframework.integration

spring-integration-security

5.4.6

org.springframework.integration

spring-integration-sftp

5.4.6

org.springframework.integration

spring-integration-stomp

5.4.6

org.springframework.integration

spring-integration-stream

5.4.6

org.springframework.integration

spring-integration-syslog

5.4.6

org.springframework.integration

spring-integration-test

5.4.6

org.springframework.integration

spring-integration-test-support

5.4.6

org.springframework.integration

spring-integration-webflux

5.4.6

org.springframework.integration

spring-integration-websocket

5.4.6

org.springframework.integration

spring-integration-ws

5.4.6

org.springframework.integration

spring-integration-xml

5.4.6

org.springframework.integration

spring-integration-xmpp

5.4.6

org.springframework.integration

spring-integration-zeromq

5.4.6

org.springframework.integration

spring-integration-zookeeper

5.4.6

org.springframework.kafka

spring-kafka

2.6.7

org.springframework.kafka

spring-kafka-test

2.6.7

org.springframework.ldap

spring-ldap-core

2.3.3.RELEASE

org.springframework.ldap

spring-ldap-core-tiger

2.3.3.RELEASE

org.springframework.ldap

spring-ldap-ldif-batch

2.3.3.RELEASE

org.springframework.ldap

spring-ldap-ldif-core

2.3.3.RELEASE

org.springframework.ldap

spring-ldap-odm

2.3.3.RELEASE

org.springframework.ldap

spring-ldap-test

2.3.3.RELEASE

org.springframework.restdocs

spring-restdocs-asciidoctor

2.0.5.RELEASE

org.springframework.restdocs

spring-restdocs-core

2.0.5.RELEASE

org.springframework.restdocs

spring-restdocs-mockmvc

2.0.5.RELEASE

org.springframework.restdocs

spring-restdocs-restassured

2.0.5.RELEASE

org.springframework.restdocs

spring-restdocs-webtestclient

2.0.5.RELEASE

org.springframework.retry

spring-retry

1.3.1

org.springframework.security

spring-security-acl

5.4.6

org.springframework.security

spring-security-aspects

5.4.6

org.springframework.security

spring-security-cas

5.4.6

org.springframework.security

spring-security-config

5.4.6

org.springframework.security

spring-security-core

5.4.6

org.springframework.security

spring-security-crypto

5.4.6

org.springframework.security

spring-security-data

5.4.6

org.springframework.security

spring-security-ldap

5.4.6

org.springframework.security

spring-security-messaging

5.4.6

org.springframework.security

spring-security-oauth2-client

5.4.6

org.springframework.security

spring-security-oauth2-core

5.4.6

org.springframework.security

spring-security-oauth2-jose

5.4.6

org.springframework.security

spring-security-oauth2-resource-server

5.4.6

org.springframework.security

spring-security-openid

5.4.6

org.springframework.security

spring-security-remoting

5.4.6

org.springframework.security

spring-security-rsocket

5.4.6

org.springframework.security

spring-security-saml2-service-provider

5.4.6

org.springframework.security

spring-security-taglibs

5.4.6

org.springframework.security

spring-security-test

5.4.6

org.springframework.security

spring-security-web

5.4.6

org.springframework.session

spring-session-core

2.4.3

org.springframework.session

spring-session-data-geode

2.4.3

org.springframework.session

spring-session-data-mongodb

2.4.4

org.springframework.session

spring-session-data-redis

2.4.3

org.springframework.session

spring-session-hazelcast

2.4.3

org.springframework.session

spring-session-jdbc

2.4.3

org.springframework.ws

spring-ws-core

3.0.10.RELEASE

org.springframework.ws

spring-ws-security

3.0.10.RELEASE

org.springframework.ws

spring-ws-support

3.0.10.RELEASE

org.springframework.ws

spring-ws-test

3.0.10.RELEASE

org.springframework.ws

spring-xml

3.0.10.RELEASE

org.thymeleaf

thymeleaf

3.0.12.RELEASE

org.thymeleaf

thymeleaf-spring5

3.0.12.RELEASE

org.thymeleaf.extras

thymeleaf-extras-java8time

3.0.4.RELEASE

org.thymeleaf.extras

thymeleaf-extras-springsecurity5

3.0.4.RELEASE

org.webjars

hal-browser

3325375

org.webjars

webjars-locator-core

0.46

org.xerial

sqlite-jdbc

3.32.3.3

org.xmlunit

xmlunit-assertj

2.7.0

org.xmlunit

xmlunit-core

2.7.0

org.xmlunit

xmlunit-legacy

2.7.0

org.xmlunit

xmlunit-matchers

2.7.0

org.xmlunit

xmlunit-placeholders

2.7.0

org.yaml

snakeyaml

1.27

redis.clients

jedis

3.3.0

wsdl4j

wsdl4j

1.6.3

10.F.2. Version Properties
The following table provides all properties that can be used to override the versions managed by Spring Boot. Browse the spring-boot-dependencies build.gradle for a complete list of dependencies.

Library	Version Property
ActiveMQ

activemq.version

ANTLR2

antlr2.version

AppEngine SDK

appengine-sdk.version

Artemis

artemis.version

AspectJ

aspectj.version

AssertJ

assertj.version

Atomikos

atomikos.version

Awaitility

awaitility.version

Bitronix

bitronix.version

Build Helper Maven Plugin

build-helper-maven-plugin.version

Byte Buddy

byte-buddy.version

Caffeine

caffeine.version

Cassandra Driver

cassandra-driver.version

Classmate

classmate.version

Commons Codec

commons-codec.version

Commons DBCP2

commons-dbcp2.version

Commons Lang3

commons-lang3.version

Commons Pool

commons-pool.version

Commons Pool2

commons-pool2.version

Couchbase Client

couchbase-client.version

DB2 JDBC

db2-jdbc.version

Dependency Management Plugin

dependency-management-plugin.version

Derby

derby.version

Dropwizard Metrics

dropwizard-metrics.version

Ehcache

ehcache.version

Ehcache3

ehcache3.version

Elasticsearch

elasticsearch.version

Embedded Mongo

embedded-mongo.version

Flyway

flyway.version

FreeMarker

freemarker.version

Git Commit ID Plugin

git-commit-id-plugin.version

Glassfish EL

glassfish-el.version

Glassfish JAXB

glassfish-jaxb.version

Groovy

groovy.version

Gson

gson.version

H2

h2.version

Hamcrest

hamcrest.version

Hazelcast

hazelcast.version

Hazelcast Hibernate5

hazelcast-hibernate5.version

Hibernate

hibernate.version

Hibernate Validator

hibernate-validator.version

HikariCP

hikaricp.version

HSQLDB

hsqldb.version

HtmlUnit

htmlunit.version

HttpAsyncClient

httpasyncclient.version

HttpClient

httpclient.version

HttpCore

httpcore.version

Infinispan

infinispan.version

InfluxDB Java

influxdb-java.version

Jackson Bom

jackson-bom.version

Jakarta Activation

jakarta-activation.version

Jakarta Annotation

jakarta-annotation.version

Jakarta JMS

jakarta-jms.version

Jakarta Json

jakarta-json.version

Jakarta Json Bind

jakarta-json-bind.version

Jakarta Mail

jakarta-mail.version

Jakarta Persistence

jakarta-persistence.version

Jakarta Servlet

jakarta-servlet.version

Jakarta Servlet JSP JSTL

jakarta-servlet-jsp-jstl.version

Jakarta Transaction

jakarta-transaction.version

Jakarta Validation

jakarta-validation.version

Jakarta WebSocket

jakarta-websocket.version

Jakarta WS RS

jakarta-ws-rs.version

Jakarta XML Bind

jakarta-xml-bind.version

Jakarta XML SOAP

jakarta-xml-soap.version

Jakarta XML WS

jakarta-xml-ws.version

Janino

janino.version

Javax Activation

javax-activation.version

Javax Annotation

javax-annotation.version

Javax Cache

javax-cache.version

Javax JAXB

javax-jaxb.version

Javax JAXWS

javax-jaxws.version

Javax JMS

javax-jms.version

Javax Json

javax-json.version

Javax JsonB

javax-jsonb.version

Javax Mail

javax-mail.version

Javax Money

javax-money.version

Javax Persistence

javax-persistence.version

Javax Transaction

javax-transaction.version

Javax Validation

javax-validation.version

Javax WebSocket

javax-websocket.version

Jaxen

jaxen.version

Jaybird

jaybird.version

JBoss Logging

jboss-logging.version

JBoss Transaction SPI

jboss-transaction-spi.version

JDOM2

jdom2.version

Jedis

jedis.version

Jersey

jersey.version

Jetty

jetty.version

Jetty EL

jetty-el.version

Jetty JSP

jetty-jsp.version

Jetty Reactive HTTPClient

jetty-reactive-httpclient.version

JMustache

jmustache.version

Johnzon

johnzon.version

Jolokia

jolokia.version

jOOQ

jooq.version

Json Path

json-path.version

Json-smart

json-smart.version

JsonAssert

jsonassert.version

JSTL

jstl.version

JTDS

jtds.version

JUnit

junit.version

JUnit Jupiter

junit-jupiter.version

Kafka

kafka.version

Kotlin

kotlin.version

Kotlin Coroutines

kotlin-coroutines.version

Lettuce

lettuce.version

Liquibase

liquibase.version

Log4j2

log4j2.version

Logback

logback.version

Lombok

lombok.version

MariaDB

mariadb.version

Maven AntRun Plugin

maven-antrun-plugin.version

Maven Assembly Plugin

maven-assembly-plugin.version

Maven Clean Plugin

maven-clean-plugin.version

Maven Compiler Plugin

maven-compiler-plugin.version

Maven Dependency Plugin

maven-dependency-plugin.version

Maven Deploy Plugin

maven-deploy-plugin.version

Maven Enforcer Plugin

maven-enforcer-plugin.version

Maven Failsafe Plugin

maven-failsafe-plugin.version

Maven Help Plugin

maven-help-plugin.version

Maven Install Plugin

maven-install-plugin.version

Maven Invoker Plugin

maven-invoker-plugin.version

Maven Jar Plugin

maven-jar-plugin.version

Maven Javadoc Plugin

maven-javadoc-plugin.version

Maven Resources Plugin

maven-resources-plugin.version

Maven Shade Plugin

maven-shade-plugin.version

Maven Source Plugin

maven-source-plugin.version

Maven Surefire Plugin

maven-surefire-plugin.version

Maven War Plugin

maven-war-plugin.version

Micrometer

micrometer.version

MIMEPull

mimepull.version

Mockito

mockito.version

MongoDB

mongodb.version

MSSQL JDBC

mssql-jdbc.version

MySQL

mysql.version

NekoHTML

nekohtml.version

Neo4j Java Driver

neo4j-java-driver.version

Netty

netty.version

Netty tcNative

netty-tcnative.version

Nimbus JOSE JWT

nimbus-jose-jwt.version

OAuth2 OIDC SDK

oauth2-oidc-sdk.version

OJDBC

ojdbc.version

OkHttp3

okhttp3.version

Oracle Database

oracle-database.version

Pooled JMS

pooled-jms.version

Postgresql

postgresql.version

Prometheus PushGateway

prometheus-pushgateway.version

Quartz

quartz.version

QueryDSL

querydsl.version

R2DBC Bom

r2dbc-bom.version

Rabbit AMQP Client

rabbit-amqp-client.version

Reactive Streams

reactive-streams.version

Reactor Bom

reactor-bom.version

REST Assured

rest-assured.version

RSocket

rsocket.version

RxJava

rxjava.version

RxJava Adapter

rxjava-adapter.version

RxJava2

rxjava2.version

SAAJ Impl

saaj-impl.version

Selenium

selenium.version

Selenium HtmlUnit

selenium-htmlunit.version

SendGrid

sendgrid.version

Servlet API

servlet-api.version

SLF4J

slf4j.version

SnakeYAML

snakeyaml.version

Solr

solr.version

Spring AMQP

spring-amqp.version

Spring Batch

spring-batch.version

Spring Data Bom

spring-data-bom.version

Spring Framework

spring-framework.version

Spring HATEOAS

spring-hateoas.version

Spring Integration

spring-integration.version

Spring Kafka

spring-kafka.version

Spring LDAP

spring-ldap.version

Spring RESTDocs

spring-restdocs.version

Spring Retry

spring-retry.version

Spring Security

spring-security.version

Spring Session Bom

spring-session-bom.version

Spring WS

spring-ws.version

SQLite JDBC

sqlite-jdbc.version

Sun Mail

sun-mail.version

Thymeleaf

thymeleaf.version

Thymeleaf Extras Data Attribute

thymeleaf-extras-data-attribute.version

Thymeleaf Extras Java8Time

thymeleaf-extras-java8time.version

Thymeleaf Extras SpringSecurity

thymeleaf-extras-springsecurity.version

Thymeleaf Layout Dialect

thymeleaf-layout-dialect.version

Tomcat

tomcat.version

UnboundID LDAPSDK

unboundid-ldapsdk.version

Undertow

undertow.version

Versions Maven Plugin

versions-maven-plugin.version

WebJars HAL Browser

webjars-hal-browser.version

WebJars Locator Core

webjars-locator-core.version
